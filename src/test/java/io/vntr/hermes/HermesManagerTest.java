package io.vntr.hermes;

import io.vntr.User;
import org.junit.Test;

import java.util.*;

import static io.vntr.TestUtils.getTopographyForMultigroupSocialNetwork;
import static io.vntr.TestUtils.initSet;
import static org.junit.Assert.*;

/**
 * Created by robertlindquist on 9/20/16.
 */
public class HermesManagerTest {

    @Test
    public void testThingsInGeneral() {
        float gamma = 1.6f;
        HermesManager manager = new HermesManager(gamma, false);

        Integer pid1 = manager.addPartition();
        Integer pid2 = manager.addPartition();

        User user1 = new User(1, pid1);
        User user2 = new User(2, pid2);
        User user3 = new User(3, pid1);
        User user4 = new User(4, pid2);
        User user5 = new User(5, pid1);
        User user6 = new User(6, pid2);

        manager.addUser(user1);
        manager.addUser(user2);
        manager.addUser(user3);
        manager.addUser(user4);
        manager.addUser(user5);
        manager.addUser(user6);

        Map<Integer, Set<Integer>> pMap = manager.getPartitionToUsers();
        assertTrue(pMap.size() == 2);
        assertTrue(pMap.get(pid1).equals(new HashSet<>(Arrays.asList(1, 3, 5))));
        assertTrue(pMap.get(pid2).equals(new HashSet<>(Arrays.asList(2, 4, 6))));

        assertEquals(user1, manager.getUser(1));
        assertEquals(user2, manager.getUser(2));
        assertEquals(user3, manager.getUser(3));
        assertEquals(user4, manager.getUser(4));
        assertEquals(user5, manager.getUser(5));
        assertEquals(user6, manager.getUser(6));

        manager.befriend(1, 2);
        manager.befriend(1, 3);
        manager.befriend(1, 4);
        manager.befriend(1, 5);
        manager.befriend(1, 6);

        assertTrue(manager.getEdgeCut() == 3);

        manager.unfriend(1, 6);

        assertTrue(manager.getEdgeCut() == 2);

        Integer pid3 = manager.addPartition();

        User user7 = new User(7, pid3);
        User user8 = new User(8, pid3);
        User user9 = new User(9, pid3);

        manager.addUser(user7);
        manager.addUser(user8);
        manager.addUser(user9);

        manager.befriend(1, 7);
        manager.befriend(1, 8);
        manager.befriend(1, 9);

        assertTrue(manager.getEdgeCut() == 5);

        manager.removeUser(8);

        assertTrue(manager.getEdgeCut() == 4);

        manager.moveUser(4, pid1, false);

        assertTrue(manager.getEdgeCut() == 3);

        manager.moveUser(4, pid3, false);

        assertTrue(manager.getEdgeCut() == 4);

        for(int id=2; id<=9; id++) {
            if(id != 8) {
                manager.moveUser(id, pid3, false);
            }
        }

        manager.repartition();

        System.out.println("Hermes edge cut #1: " + manager.getEdgeCut());
    }

    @Test
    public void testRepartitionInDepth() {
        //TODO: this occasionally doesn't terminate
//        for(int i=0; i<10000; i++) {
//            System.out.println("Outer loop " + i);
            int numUsers = 1000;
            int numPartitions = 10;

            float gamma = 1.5f;
            Map<Integer, Set<Integer>> friendships = getTopographyForMultigroupSocialNetwork(numUsers, 20, 0.1f, 0.1f);
            Map<Integer, Set<Integer>> partitions = new HashMap<>();
            for(int pid=0; pid<numPartitions; pid++) {
                partitions.put(pid, new HashSet<Integer>());
            }
            for(int uid=0; uid<numUsers; uid++) {
                partitions.get(uid % numPartitions).add(uid);
            }
            HermesManager manager = HermesTestUtils.initGraph(gamma, true, partitions, friendships);
            Integer initialEdgeCut = manager.getEdgeCut();
            long start = System.nanoTime();
            manager.repartition();
            long end = System.nanoTime();
            Integer finalEdgeCut = manager.getEdgeCut();
            System.out.println("Edge cut before: " + initialEdgeCut + ", after: " + finalEdgeCut + " in " + ((end-start)/1000000) + "ms");
//        }
    }

//    @Test
    public void specialDeadlockTest() {
        float gamma = 1.5f;
        Map<Integer, Set<Integer>> partitions = new HashMap<>();
        partitions.put(0, initSet(0, 770, 260, 520, 10, 780, 270, 530, 20, 790, 280, 540, 30, 800, 290, 550, 40, 810, 300, 560, 50, 820, 310, 570, 60, 830, 320, 580, 70, 840, 330, 590, 80, 850, 340, 600, 90, 860, 350, 610, 100, 870, 360, 620, 110, 880, 370, 630, 120, 890, 380, 640, 130, 900, 390, 650, 140, 910, 400, 660, 150, 920, 410, 670, 160, 930, 420, 680, 170, 940, 430, 690, 180, 950, 440, 700, 190, 960, 450, 710, 200, 970, 460, 720, 210, 980, 470, 730, 220, 990, 480, 740, 230, 490, 750, 240, 500, 760, 250, 510));
        partitions.put(1, initSet(1, 771, 261, 521, 11, 781, 271, 531, 21, 791, 281, 541, 31, 801, 291, 551, 41, 811, 301, 561, 51, 821, 311, 571, 61, 831, 321, 581, 71, 841, 331, 591, 81, 851, 341, 601, 91, 861, 351, 611, 101, 871, 361, 621, 111, 881, 371, 631, 121, 891, 381, 641, 131, 901, 391, 651, 141, 911, 401, 661, 151, 921, 411, 671, 161, 931, 421, 681, 171, 941, 431, 691, 181, 951, 441, 701, 191, 961, 451, 711, 201, 971, 461, 721, 211, 981, 471, 731, 221, 991, 481, 741, 231, 491, 751, 241, 501, 761, 251, 511));
        partitions.put(2, initSet(512, 2, 772, 262, 522, 12, 782, 272, 532, 22, 792, 282, 542, 32, 802, 292, 552, 42, 812, 302, 562, 52, 822, 312, 572, 62, 832, 322, 582, 72, 842, 332, 592, 82, 852, 342, 602, 92, 862, 352, 612, 102, 872, 362, 622, 112, 882, 372, 632, 122, 892, 382, 642, 132, 902, 392, 652, 142, 912, 402, 662, 152, 922, 412, 672, 162, 932, 422, 682, 172, 942, 432, 692, 182, 952, 442, 702, 192, 962, 452, 712, 202, 972, 462, 722, 212, 982, 472, 732, 222, 992, 482, 742, 232, 492, 752, 242, 502, 762, 252));
        partitions.put(3, initSet(513, 3, 773, 263, 523, 13, 783, 273, 533, 23, 793, 283, 543, 33, 803, 293, 553, 43, 813, 303, 563, 53, 823, 313, 573, 63, 833, 323, 583, 73, 843, 333, 593, 83, 853, 343, 603, 93, 863, 353, 613, 103, 873, 363, 623, 113, 883, 373, 633, 123, 893, 383, 643, 133, 903, 393, 653, 143, 913, 403, 663, 153, 923, 413, 673, 163, 933, 423, 683, 173, 943, 433, 693, 183, 953, 443, 703, 193, 963, 453, 713, 203, 973, 463, 723, 213, 983, 473, 733, 223, 993, 483, 743, 233, 493, 753, 243, 503, 763, 253));
        partitions.put(4, initSet(514, 4, 774, 264, 524, 14, 784, 274, 534, 24, 794, 284, 544, 34, 804, 294, 554, 44, 814, 304, 564, 54, 824, 314, 574, 64, 834, 324, 584, 74, 844, 334, 594, 84, 854, 344, 604, 94, 864, 354, 614, 104, 874, 364, 624, 114, 884, 374, 634, 124, 894, 384, 644, 134, 904, 394, 654, 144, 914, 404, 664, 154, 924, 414, 674, 164, 934, 424, 684, 174, 944, 434, 694, 184, 954, 444, 704, 194, 964, 454, 714, 204, 974, 464, 724, 214, 984, 474, 734, 224, 994, 484, 744, 234, 494, 754, 244, 504, 764, 254));
        partitions.put(5, initSet(515, 5, 775, 265, 525, 15, 785, 275, 535, 25, 795, 285, 545, 35, 805, 295, 555, 45, 815, 305, 565, 55, 825, 315, 575, 65, 835, 325, 585, 75, 845, 335, 595, 85, 855, 345, 605, 95, 865, 355, 615, 105, 875, 365, 625, 115, 885, 375, 635, 125, 895, 385, 645, 135, 905, 395, 655, 145, 915, 405, 665, 155, 925, 415, 675, 165, 935, 425, 685, 175, 945, 435, 695, 185, 955, 445, 705, 195, 965, 455, 715, 205, 975, 465, 725, 215, 985, 475, 735, 225, 995, 485, 745, 235, 495, 755, 245, 505, 765, 255));
        partitions.put(6, initSet(256, 516, 6, 776, 266, 526, 16, 786, 276, 536, 26, 796, 286, 546, 36, 806, 296, 556, 46, 816, 306, 566, 56, 826, 316, 576, 66, 836, 326, 586, 76, 846, 336, 596, 86, 856, 346, 606, 96, 866, 356, 616, 106, 876, 366, 626, 116, 886, 376, 636, 126, 896, 386, 646, 136, 906, 396, 656, 146, 916, 406, 666, 156, 926, 416, 676, 166, 936, 426, 686, 176, 946, 436, 696, 186, 956, 446, 706, 196, 966, 456, 716, 206, 976, 466, 726, 216, 986, 476, 736, 226, 996, 486, 746, 236, 496, 756, 246, 506, 766));
        partitions.put(7, initSet(257, 517, 7, 777, 267, 527, 17, 787, 277, 537, 27, 797, 287, 547, 37, 807, 297, 557, 47, 817, 307, 567, 57, 827, 317, 577, 67, 837, 327, 587, 77, 847, 337, 597, 87, 857, 347, 607, 97, 867, 357, 617, 107, 877, 367, 627, 117, 887, 377, 637, 127, 897, 387, 647, 137, 907, 397, 657, 147, 917, 407, 667, 157, 927, 417, 677, 167, 937, 427, 687, 177, 947, 437, 697, 187, 957, 447, 707, 197, 967, 457, 717, 207, 977, 467, 727, 217, 987, 477, 737, 227, 997, 487, 747, 237, 497, 757, 247, 507, 767));
        partitions.put(8, initSet(768, 258, 518, 8, 778, 268, 528, 18, 788, 278, 538, 28, 798, 288, 548, 38, 808, 298, 558, 48, 818, 308, 568, 58, 828, 318, 578, 68, 838, 328, 588, 78, 848, 338, 598, 88, 858, 348, 608, 98, 868, 358, 618, 108, 878, 368, 628, 118, 888, 378, 638, 128, 898, 388, 648, 138, 908, 398, 658, 148, 918, 408, 668, 158, 928, 418, 678, 168, 938, 428, 688, 178, 948, 438, 698, 188, 958, 448, 708, 198, 968, 458, 718, 208, 978, 468, 728, 218, 988, 478, 738, 228, 998, 488, 748, 238, 498, 758, 248, 508));
        partitions.put(9, initSet(769, 259, 519, 9, 779, 269, 529, 19, 789, 279, 539, 29, 799, 289, 549, 39, 809, 299, 559, 49, 819, 309, 569, 59, 829, 319, 579, 69, 839, 329, 589, 79, 849, 339, 599, 89, 859, 349, 609, 99, 869, 359, 619, 109, 879, 369, 629, 119, 889, 379, 639, 129, 899, 389, 649, 139, 909, 399, 659, 149, 919, 409, 669, 159, 929, 419, 679, 169, 939, 429, 689, 179, 949, 439, 699, 189, 959, 449, 709, 199, 969, 459, 719, 209, 979, 469, 729, 219, 989, 479, 739, 229, 999, 489, 749, 239, 499, 759, 249, 509));

        Map<Integer, Set<Integer>> friendships = new HashMap<>();
        friendships.putAll(getFirst300ines());
        friendships.putAll(getRemainingLines());

        HermesManager manager = HermesTestUtils.initGraph(gamma, true, partitions, friendships);
        Integer initialEdgeCut = manager.getEdgeCut();
        manager.repartition();
        Integer finalEdgeCut = manager.getEdgeCut();
        System.out.println("Edge cut before: " + initialEdgeCut + ", after: " + finalEdgeCut);
    }

    private Map<Integer, Set<Integer>> getFirst300ines() {
        Map<Integer, Set<Integer>> m = new HashMap<>();
        m.put(0, initSet(384, 257, 134, 135, 200, 905, 138, 844, 145, 81, 658, 914, 281, 476, 605, 543, 800, 737, 551, 620, 109, 942, 302, 820, 185, 701, 765));
        m.put(1, initSet(832, 5, 647, 523, 207, 595, 723, 920, 90, 670, 671, 799, 98, 164, 422, 809, 937, 490, 491, 364, 52, 245, 187, 317, 190));
        m.put(2, initSet(896, 417, 579, 708, 840, 970, 268, 112, 464, 529, 594, 308, 117, 344, 763, 414, 446, 95));
        m.put(3, initSet(192, 256, 515, 76, 910, 718, 783, 849, 530, 725, 405, 790, 535, 859, 799, 687, 947, 629, 440, 376, 954, 59, 315, 892, 573, 445, 765, 63));
        m.put(4, initSet(341, 919, 423, 215, 824, 360, 232, 59, 701, 894));
        m.put(5, initSet(704, 960, 705, 709, 902, 907, 204, 653, 718, 337, 530, 20, 597, 793, 414, 351, 162, 930, 485, 425, 490, 491, 428, 630, 951, 887, 888, 697, 443, 828, 318, 510, 894, 447));
        m.put(6, initSet(291, 483, 611, 326, 263, 327, 424, 938, 717, 365, 433, 690, 629, 150, 438, 248, 700, 733));
        m.put(7, initSet(769, 390, 8, 10, 650, 395, 13, 910, 273, 787, 406, 791, 536, 152, 157, 929, 548, 165, 807, 682, 689, 177, 178, 819, 820, 53, 822, 567, 697, 571, 828, 61, 319, 67, 838, 966, 71, 968, 456, 970, 76, 718, 80, 81, 851, 726, 473, 222, 991, 353, 226, 227, 489, 363, 750, 239, 752, 627, 885, 252, 255));
        m.put(8, initSet(643, 837, 966, 906, 650, 523, 395, 460, 462, 337, 787, 724, 477, 413, 160, 96, 353, 929, 100, 804, 41, 426, 491, 686, 46, 368, 945, 753, 433, 243, 694, 828, 381));
        m.put(9, initSet(200, 906, 78, 850, 147, 660, 661, 854, 986, 475, 476, 996, 293, 166, 807, 999, 424, 554, 939, 173, 242, 691, 243, 885, 246, 566, 956));
        m.put(10, initSet(545, 817, 674, 178, 614, 406, 666, 347, 620, 222, 767));
        m.put(11, initSet(768, 192, 897, 321, 258, 709, 967, 200, 265, 201, 457, 334, 144, 400, 656, 850, 723, 88, 984, 603, 94, 160, 230, 811, 748, 432, 496, 177, 113, 753, 498, 693, 501, 631, 951, 57, 507, 892, 253, 830, 702));
        m.put(12, initSet(929, 866, 738, 387, 643, 677, 966, 520, 13, 624, 881, 819, 472, 697));
        m.put(13, initSet(192, 835, 260, 134, 840, 456, 844, 81, 786, 723, 988, 543, 415, 866, 483, 932, 743, 233, 364, 46, 436, 52, 692, 373, 824, 443, 575));
        m.put(14, initSet(353, 865, 162, 738, 421, 230, 360, 523, 620, 493, 559, 406, 988, 478));
        m.put(15, Collections.<Integer>emptySet());
        m.put(16, initSet(391, 263, 648, 136, 905, 777, 522, 652, 785, 669, 799, 544, 416, 928, 419, 291, 164, 804, 678, 422, 936, 681, 42, 171, 684, 300, 173, 942, 48, 690, 694, 954, 826, 578, 708, 710, 967, 973, 206, 210, 853, 344, 476, 735, 867, 996, 613, 233, 234, 365, 242, 246, 763, 892));
        m.put(17, initSet(256, 545, 993, 994, 323, 325, 709, 455, 392, 620, 429, 877, 335, 85, 631, 985, 538, 506, 155, 637));
        m.put(18, Collections.<Integer>emptySet());
        m.put(19, initSet(747, 139, 108, 173, 109, 464, 401, 920, 666, 122, 507, 444, 605, 189, 701, 222));
        m.put(20, initSet(961, 72, 136, 680, 682, 139, 941, 302, 590, 275, 468, 52, 341, 759, 536, 120, 152, 125, 894, 799));
        m.put(21, initSet(176, 481, 35, 280, 476, 926, 415, 847, 367));
        m.put(22, initSet(321, 242, 579, 692, 709, 904, 56, 200, 574, 671, 799));
        m.put(23, initSet(192, 515, 259, 516, 133, 773, 581, 391, 904, 76, 782, 335, 464, 528, 81, 658, 914, 915, 980, 983, 856, 733, 227, 424, 298, 811, 172, 941, 561, 690, 308, 821, 885, 53, 694, 249, 57, 378, 507, 187, 572, 508, 253));
        m.put(24, initSet(835, 804, 677, 966, 873, 43, 588, 207, 368, 369, 433, 52, 533, 790, 567));
        m.put(25, initSet(72, 778, 397, 658, 915, 659, 983, 347, 475, 988, 222, 674, 930, 99, 615, 104, 616, 234, 299, 939, 173, 877, 304, 245, 309, 951, 56, 826, 445, 893));
        m.put(26, initSet(130, 162, 355, 875, 812, 236, 797, 383, 655));
        m.put(27, initSet(64, 832, 355, 772, 333, 913, 498, 85, 373, 790, 538, 348, 893));
        m.put(28, initSet(993, 579, 163, 675, 644, 804, 773, 933, 485, 262, 327, 392, 42, 881, 499, 276, 789, 150, 380, 30));
        m.put(29, initSet(544, 896, 611, 807, 359, 777, 169, 463, 912, 561, 787, 979, 212, 280, 313, 475, 863, 543, 383));
        m.put(30, initSet(644, 581, 262, 458, 618, 234, 908, 399, 785, 433, 113, 753, 917, 181, 535, 471, 347, 735));
        m.put(31, Collections.<Integer>emptySet());
        m.put(32, Collections.<Integer>emptySet());
        m.put(33, initSet(608, 673, 387, 643, 516, 260, 487, 426, 748, 877, 431, 592, 464, 881, 434, 147, 692, 380, 988, 892));
        m.put(34, initSet(803, 118, 150, 406, 364, 862, 910, 207));
        m.put(35, initSet(581, 134, 651, 844, 974, 207, 210, 341, 726, 88, 666, 795, 219, 989, 541, 996, 297, 745, 620, 45, 302, 46, 174, 815, 367, 754, 246, 954, 315, 60));
        m.put(36, Collections.<Integer>emptySet());
        m.put(37, initSet(832, 529, 777, 75, 843, 109, 621, 478));
        m.put(38, Collections.<Integer>emptySet());
        m.put(39, initSet(785, 246, 968, 682, 445));
        m.put(40, initSet(898, 227, 516, 612, 902, 906, 45, 686, 367, 496, 755, 821, 54, 856, 666, 60, 989, 318, 926));
        m.put(41, initSet(421, 677, 102, 809, 329, 425, 588, 204, 493, 877, 974, 849, 145, 573, 799));
        m.put(42, initSet(832, 899, 388, 326, 71, 73, 336, 723, 980, 340, 535, 471, 921, 281, 410, 346, 669, 163, 675, 164, 934, 433, 882, 309, 693, 439, 56, 825, 378, 956, 828));
        m.put(43, initSet(835, 70, 711, 78, 977, 786, 915, 467, 595, 660, 213, 726, 217, 220, 733, 98, 674, 100, 746, 495, 819, 500, 117, 502, 631, 567, 504, 127));
        m.put(44, Collections.<Integer>emptySet());
        m.put(45, initSet(450, 530, 499, 581, 213, 54, 856, 153, 780, 236, 541));
        m.put(46, initSet(450, 643, 963, 903, 648, 456, 777, 206, 785, 658, 978, 660, 916, 85, 858, 284, 224, 866, 294, 295, 872, 875, 631, 439, 760, 185, 123, 253));
        m.put(47, initSet(512, 516, 133, 904, 906, 145, 785, 658, 277, 151, 154, 412, 291, 675, 549, 679, 682, 300, 173, 941, 432, 308, 820, 313, 826, 60, 188, 700, 573, 702, 190, 320, 450, 579, 69, 840, 457, 460, 717, 463, 464, 338, 735, 992, 354, 483, 486, 742, 365, 750, 499, 627, 630, 887, 508, 125));
        m.put(48, initSet(832, 257, 644, 196, 516, 327, 392, 713, 75, 779, 653, 399, 591, 592, 658, 914, 403, 792, 344, 346, 411, 926, 734, 288, 97, 290, 933, 422, 103, 302, 691, 758, 951, 121, 633, 446, 447));
        m.put(49, initSet(324, 581, 902, 71, 327, 392, 265, 778, 779, 910, 974, 783, 464, 148, 215, 920, 601, 155, 539, 411, 412, 736, 294, 551, 103, 744, 298, 618, 242, 629, 247));
        m.put(50, Collections.<Integer>emptySet());
        m.put(51, initSet(837, 806, 791, 199, 376, 508, 573, 862, 510));
        m.put(52, initSet(832, 387, 588, 911, 143, 849, 785, 84, 597, 405, 919, 988, 351, 676, 807, 809, 620, 751, 691, 823, 442, 187, 445, 767, 447));
        m.put(53, initSet(130, 162, 291, 804, 232, 713, 394, 300, 268, 717, 237, 303, 145, 81, 564, 181, 856, 601, 766));
        m.put(54, initSet(450, 210, 371, 773, 949, 541, 317, 910));
        m.put(55, Collections.<Integer>emptySet());
        m.put(56, initSet(516, 517, 741, 904, 424, 298, 843, 268, 878, 593, 597, 566, 726, 536, 412, 828, 764, 252, 61, 542));
        m.put(57, initSet(704, 321, 453, 711, 713, 971, 974, 271, 79, 655, 785, 853, 981, 214, 157, 799, 864, 929, 677, 746, 237, 945, 242, 563, 819, 885, 955, 252, 893, 253, 830, 383));
        m.put(58, initSet(496, 324, 538));
        m.put(59, initSet(832, 580, 680, 553, 266, 365, 974, 590, 336, 592, 177, 405, 406, 407, 759, 412, 94, 319, 351));
        m.put(60, initSet(961, 770, 67, 325, 965, 170, 236, 496, 80, 81, 950, 407, 919, 439, 88, 954, 922, 507, 670));
        m.put(61, initSet(134, 519, 551, 807, 327, 681, 812, 717, 306, 564, 533, 629, 407, 120, 539, 188, 700, 125, 126));
        m.put(62, initSet(896, 228, 421, 790, 169, 154, 716, 573, 862, 383));
        m.put(63, initSet(65, 257, 260, 773, 902, 967, 72, 457, 906, 653, 334, 595, 85, 406, 151, 919, 792, 920, 476, 541, 542, 414, 96, 865, 993, 546, 549, 486, 232, 425, 298, 621, 627, 499, 309, 631, 696, 633, 699));
        m.put(64, initSet(993, 802, 997, 967, 75, 620, 236, 403, 756, 84, 789, 598, 470, 664, 984, 346, 890, 860, 637, 893, 959));
        m.put(65, initSet(640, 771, 133, 905, 523, 397, 399, 529, 918, 920, 157, 673, 547, 807, 553, 554, 939, 177, 949, 438, 187, 958, 963, 584, 75, 461, 973, 590, 81, 850, 852, 85, 215, 344, 472, 90, 475, 733, 222, 734, 606, 991, 226, 106, 875, 364, 494, 495, 753, 242, 627, 500, 117, 245, 123, 893));
        m.put(66, Collections.<Integer>emptySet());
        m.put(67, initSet(480, 162, 867, 327, 264, 520, 651, 971, 812, 271, 658, 252, 414));
        m.put(68, Collections.<Integer>emptySet());
        m.put(69, initSet(258, 324, 70, 327, 204, 273, 785, 789, 981, 919, 792, 733, 478, 863, 991, 611, 358, 871, 106, 171, 563, 117, 631, 827, 380));
        m.put(70, initSet(358, 360, 457, 906, 204, 460, 494, 462, 975, 912, 498, 693, 149, 343, 215, 503, 856, 792, 858, 699));
        m.put(71, initSet(651, 779, 461, 464, 600, 281, 547, 227, 932, 164, 614, 871, 103, 298, 618, 620, 236, 941, 750, 751, 434, 306, 819, 246, 697, 378, 957, 126, 255));
        m.put(72, initSet(130, 583, 969, 906, 523, 852, 85, 601, 665, 475, 988, 222, 414, 867, 292, 616, 424, 681, 235, 364, 812, 690, 500, 949, 246, 824, 252, 893));
        m.put(73, initSet(915, 164, 565, 934, 710, 904, 298, 748));
        m.put(74, initSet(960, 738, 485, 823, 327, 871, 919, 680, 329, 874, 445, 447));
        m.put(75, initSet(258, 195, 325, 583, 204, 784, 977, 149, 405, 599, 151, 919, 414, 96, 865, 292, 676, 294, 998, 999, 871, 616, 872, 232, 745, 363, 621, 877, 429, 493, 878, 123, 380, 445, 318));
        m.put(76, initSet(515, 651, 269, 658, 723, 851, 347, 923, 288, 227, 420, 932, 871, 234, 107, 684, 236, 173, 431, 496, 752, 243, 821, 631, 376, 826, 827, 445, 830));
        m.put(77, Collections.<Integer>emptySet());
        m.put(78, initSet(977, 850, 595, 147, 500, 982, 119, 696, 380, 877, 878));
        m.put(79, initSet(704, 258, 834, 98, 709, 871, 875, 975, 978, 915, 916, 693, 858, 189));
        m.put(80, initSet(576, 832, 417, 866, 674, 738, 323, 483, 997, 165, 294, 333, 845, 143, 431, 726, 279, 759, 567, 122, 571, 381, 478, 959));
        m.put(81, initSet(384, 579, 965, 327, 969, 329, 713, 842, 779, 715, 653, 398, 975, 784, 529, 786, 467, 725, 856, 348, 988, 157, 989, 798, 94, 478, 671, 95, 288, 417, 611, 420, 807, 427, 875, 684, 431, 175, 303, 752, 694, 758, 951, 887, 954, 892, 895));
        m.put(82, Collections.<Integer>emptySet());
        m.put(83, Collections.<Integer>emptySet());
        m.put(84, initSet(387, 772, 196, 260, 582, 966, 903, 394, 588, 143, 528, 595, 852, 85, 533, 280, 283, 288, 993, 738, 675, 483, 298, 686, 113, 433, 562, 694, 504, 506, 188));
        m.put(85, initSet(195, 646, 269, 207, 913, 402, 790, 151, 599, 984, 988, 477, 542, 866, 676, 807, 104, 745, 554, 247, 185, 889, 890, 506, 188, 958));
        m.put(86, initSet(769, 457, 969, 138, 779, 909, 718, 656, 592, 277, 152, 665, 670, 98, 875, 173, 495, 560, 690, 499, 565, 187, 956, 574, 766));
        m.put(87, initSet(609, 162, 662, 182, 951, 887, 728, 457, 699, 782, 463, 863));
        m.put(88, initSet(576, 264, 648, 777, 713, 651, 335, 785, 981, 150, 600, 664, 792, 793, 991, 288, 160, 353, 609, 745, 812, 174, 302, 431, 182, 887, 188, 575));
        m.put(89, initSet(704, 321, 353, 130, 162, 930, 452, 709, 711, 785, 113, 117, 344, 858, 540, 669, 510));
        m.put(90, initSet(930, 162, 164, 294, 647, 847, 530, 373, 885, 822, 247, 344, 409, 410, 125, 669, 158, 863, 799, 383));
        m.put(91, Collections.<Integer>emptySet());
        m.put(92, initSet(704, 752, 337, 226, 717, 207));
        m.put(93, initSet(273, 753, 309, 264, 686));
        m.put(94, initSet(896, 898, 711, 265, 718, 916, 213, 534, 475, 671, 96, 803, 611, 676, 998, 167, 232, 490, 621, 493, 238, 302, 367, 304, 561, 374, 760, 248, 824, 573, 894));
        m.put(95, initSet(708, 773, 842, 334, 271, 399, 594, 787, 979, 595, 213, 599, 281, 153, 476, 477, 414, 222, 419, 996, 485, 487, 297, 299, 939, 364, 429, 879, 177, 308, 629, 246, 374, 631, 824));
        m.put(96, initSet(257, 258, 899, 579, 902, 903, 904, 523, 972, 656, 336, 213, 662, 921, 410, 220, 925, 98, 741, 358, 486, 998, 106, 298, 493, 495, 559, 496, 177, 369, 562, 499, 565, 634, 958, 574));
        m.put(97, initSet(162, 674, 611, 516, 804, 169, 138, 396, 207, 272, 307, 564, 852, 184, 634, 442, 507));
        m.put(98, initSet(704, 579, 806, 106, 875, 972, 304, 913, 531, 117, 726, 313, 634, 574, 511));
        m.put(99, initSet(416, 516, 740, 325, 614, 454, 583, 969, 682, 811, 304, 243, 980, 181, 950, 983, 957, 798, 318));
        m.put(100, initSet(322, 834, 132, 775, 903, 457, 588, 462, 975, 785, 915, 149, 344, 925, 478, 160, 162, 674, 358, 495, 309, 507, 189, 830, 702, 894));
        m.put(101, initSet(944, 785, 930, 659, 235, 302, 495));
        m.put(102, initSet(258, 708, 900, 709, 327, 455, 520, 584, 136, 265, 329, 842, 271, 849, 146, 979, 915, 597, 726, 343, 919, 284, 543, 864, 164, 678, 807, 296, 872, 233, 618, 364, 429, 493, 687, 693, 890, 123, 315, 575));
        m.put(103, initSet(961, 739, 665, 713, 634, 682, 539, 268));
        m.put(104, initSet(416, 992, 546, 397, 173, 590, 147, 853, 885, 245, 823, 599, 119, 631, 222));
        m.put(105, initSet(416, 704, 170, 620, 817, 434, 308, 280, 857, 921, 444, 988, 286));
        m.put(106, initSet(640, 835, 387, 581, 709, 902, 204, 272, 978, 916, 788, 664, 860, 988, 285, 543, 864, 353, 929, 162, 802, 881, 118, 439, 504, 252));
        m.put(107, initSet(551, 264, 539, 443, 670, 174, 830, 271));
        m.put(108, initSet(384, 548, 843, 464, 401, 722, 885, 566, 438, 470, 318, 926, 478));
        m.put(109, initSet(288, 912, 176, 353, 294, 970, 843));
        m.put(110, Collections.<Integer>emptySet());
        m.put(111, Collections.<Integer>emptySet());
        m.put(112, initSet(930, 579, 164, 840, 777, 171, 843, 908, 429, 399, 145, 433, 753, 786, 436, 726, 281, 346, 826, 414));
        m.put(113, initSet(647, 263, 655, 530, 723, 659, 214, 921, 410, 347, 221, 158, 414, 799, 484, 741, 166, 619, 429, 749, 237, 302, 309, 885, 636, 959));
        m.put(114, Collections.<Integer>emptySet());
        m.put(115, Collections.<Integer>emptySet());
        m.put(116, initSet(544, 577, 258, 324, 485, 905, 233, 457, 713, 522, 467, 789, 534, 951, 471, 376, 314, 763, 414));
        m.put(117, initSet(864, 513, 136, 936, 139, 749, 494, 176, 177, 882, 693, 373, 181, 566, 758, 760, 219, 157));
        m.put(118, initSet(128, 356, 199, 938, 363, 971, 684, 463, 656, 785, 947, 790, 214, 982, 478));
        m.put(119, initSet(136, 986, 907, 300, 204));
        m.put(120, initSet(817, 259, 597, 461, 190, 750, 751, 255));
        m.put(121, initSet(737, 993, 708, 933, 359, 905, 522, 429, 367, 785, 145, 530, 373, 342, 951, 890, 414));
        m.put(122, initSet(176, 722, 482, 900, 837, 373, 793, 411, 796, 621));
        m.put(123, initSet(773, 966, 584, 907, 524, 910, 597, 983, 535, 216, 280, 217, 986, 412, 476, 988, 227, 676, 618, 491, 877, 429, 753, 246, 311, 315, 318, 447));
        m.put(124, Collections.<Integer>emptySet());
        m.put(125, initSet(512, 769, 838, 710, 615, 329, 233, 425, 779, 843, 172, 270, 814, 560, 564, 277, 629, 473, 603, 539, 700, 317, 190));
        m.put(126, initSet(193, 897, 196, 520, 265, 783, 208, 915, 791, 859, 476, 735, 415, 671, 482, 228, 164, 934, 551, 935, 618, 938, 170, 364, 561, 501, 758, 443, 316, 381, 189, 767, 255));
        m.put(127, initSet(785, 835, 387, 533, 567, 439, 824, 604, 396));
        m.put(128, initSet(561, 611, 293, 999, 791, 904, 201, 665, 619, 604, 510, 959));
        m.put(129, Collections.<Integer>emptySet());
        m.put(130, initSet(800, 227, 681, 330, 971, 236, 145, 785, 211, 885, 951, 344, 827, 766));
        m.put(131, Collections.<Integer>emptySet());
        m.put(132, initSet(353, 835, 678, 486, 903, 296, 905, 429, 494, 785, 754, 339, 726, 503, 314, 890, 699));
        m.put(133, initSet(258, 194, 837, 709, 454, 647, 334, 336, 210, 787, 916, 919, 858, 860, 416, 864, 612, 294, 747, 304, 562, 690, 950, 378, 573));
        m.put(134, initSet(932, 484, 582, 726, 575, 207, 639));
        m.put(135, initSet(288, 644, 932, 678, 807, 648, 200, 457, 171, 524, 493, 399, 273, 403, 723, 311, 894, 670));
        m.put(136, initSet(768, 193, 581, 709, 518, 264, 717, 909, 974, 975, 464, 978, 146, 850, 852, 981, 405, 790, 665, 475, 347, 348, 925, 862, 417, 162, 614, 167, 616, 169, 620, 752, 560, 562, 306, 820, 181, 251, 573, 767, 447));
        m.put(137, initSet(416, 928, 740, 725, 342, 652, 684, 221, 493));
        m.put(138, initSet(769, 290, 162, 611, 139, 941, 461, 654, 174, 373, 185, 697, 730, 219, 380));
        m.put(139, initSet(739, 867, 424, 329, 970, 938, 941, 814, 175, 335, 245, 309, 406, 214, 793, 411, 924, 734, 766, 543));
        m.put(140, Collections.<Integer>emptySet());
        m.put(141, Collections.<Integer>emptySet());
        m.put(142, Collections.<Integer>emptySet());
        m.put(143, initSet(866, 674, 260, 533, 520, 472, 442, 555, 396));
        m.put(144, initSet(643, 693, 709, 871, 648, 842, 875, 925, 717));
        m.put(145, initSet(258, 708, 900, 199, 327, 777, 330, 843, 206, 975, 786, 787, 789, 151, 215, 344, 158, 735, 607, 737, 993, 164, 741, 485, 998, 426, 364, 493, 561, 885, 951, 824, 447));
        m.put(146, initSet(416, 900, 907, 429, 365, 399, 335, 432, 785, 434, 852, 982, 150, 823, 215, 216, 792, 761, 542, 735));
        m.put(147, initSet(595, 691, 854, 696, 905, 969, 988, 508, 397, 429));
        m.put(148, initSet(449, 290, 450, 516, 298, 938, 332, 620, 624, 592, 913, 370, 531));
        m.put(149, initSet(832, 837, 327, 777, 269, 654, 782, 462, 336, 914, 725, 600, 793, 219, 411, 353, 165, 742, 746, 236, 749, 175, 754, 627, 628, 247, 440, 701, 894));
        m.put(150, initSet(257, 196, 900, 902, 263, 457, 778, 843, 399, 335, 786, 598, 345, 346, 604, 478, 227, 675, 483, 421, 486, 807, 999, 680, 234, 428, 749, 237, 561, 756, 885, 949, 248, 888, 313, 249, 959, 383));
        m.put(151, initSet(865, 930, 787, 691, 676, 852, 660, 199, 999, 424, 344, 331));
        m.put(152, initSet(257, 354, 517, 392, 618, 298, 429, 237, 303, 464, 757, 311, 504, 603, 766, 255));
        m.put(153, initSet(673, 610, 917, 341, 374, 235, 317, 847, 367));
        m.put(154, initSet(528, 705, 629, 422, 475, 572, 716, 508));
        m.put(155, initSet(967, 761, 316, 333));
        m.put(156, Collections.<Integer>emptySet());
        m.put(157, initSet(294, 807, 327, 616, 648, 936, 906, 970, 203, 524, 588, 367, 177, 562, 498, 916, 693, 664, 958));
        m.put(158, initSet(324, 164, 933, 870, 648, 169, 331, 971, 684, 493, 273, 212, 309, 502, 279, 824, 827, 989, 799, 191));
        m.put(159, Collections.<Integer>emptySet());
        m.put(160, initSet(545, 325, 997, 549, 309, 470, 311, 984, 346, 907, 236, 204));
        m.put(161, Collections.<Integer>emptySet());
        m.put(162, initSet(705, 195, 453, 903, 327, 264, 971, 846, 847, 785, 850, 601, 793, 537, 539, 285, 863, 543, 739, 870, 296, 425, 618, 621, 686, 949, 311, 951, 823, 759, 824, 443, 703));
        m.put(163, initSet(722, 804, 708, 263, 327, 843, 735, 895));
        m.put(164, initSet(512, 648, 904, 778, 523, 717, 399, 656, 213, 341, 537, 346, 411, 414, 670, 481, 612, 996, 293, 678, 166, 425, 681, 298, 172, 236, 364, 941, 302, 176, 690, 499, 187, 828, 956, 188, 380, 511));
        m.put(165, initSet(961, 258, 802, 906, 363, 463, 431, 207, 368, 881, 503, 699, 571, 507, 287));
        m.put(166, initSet(704, 321, 322, 584, 717, 461, 782, 400, 981, 410, 284, 670, 671, 799, 547, 422, 298, 941, 177, 503, 828, 764, 830, 383, 511));
        m.put(167, initSet(867, 677, 293, 584, 298, 974, 558, 335, 820, 790, 854, 407, 792, 762, 412, 573, 959, 767));
        m.put(168, initSet(929, 545, 353, 482, 387, 902, 840, 912, 914, 595, 692, 438, 791, 695, 189, 701, 863));
        m.put(169, initSet(258, 450, 965, 391, 199, 777, 969, 715, 271, 981, 534, 854, 471, 280, 472, 414, 608, 224, 737, 417, 806, 811, 493, 566, 822, 247, 376, 824, 317, 573, 383));
        m.put(170, initSet(480, 755, 308, 983, 393, 921, 281, 234, 651, 507));
        m.put(171, initSet(993, 450, 610, 835, 611, 612, 616, 426, 271, 273, 850, 308, 919, 951, 632, 346, 890, 414, 830, 863));
        m.put(172, initSet(482, 354, 804, 682, 879, 591, 176, 595, 213, 469, 280, 476, 766));
        m.put(173, initSet(837, 519, 234, 780, 273, 689, 627, 308, 885, 726, 954, 507, 475, 988, 348));
        m.put(174, initSet(658, 851, 533, 935, 281, 699, 255));
        m.put(175, initSet(336, 529, 417, 465, 566, 694, 391, 443, 621));
        m.put(176, initSet(288, 673, 194, 610, 868, 427, 780, 493, 847, 788, 213, 349, 189, 318));
        m.put(177, initSet(640, 259, 900, 902, 647, 524, 397, 911, 785, 915, 918, 790, 411, 669, 925, 543, 425, 554, 433, 309, 573, 958, 960, 322, 459, 843, 717, 718, 975, 591, 464, 337, 593, 850, 215, 986, 219, 351, 992, 480, 996, 871, 616, 360, 490, 491, 495, 752, 369, 885, 629, 759, 504, 251, 255));
        m.put(178, initSet(304, 674, 787, 324, 837, 950, 378, 666, 347, 444, 222, 319));
        m.put(179, Collections.<Integer>emptySet());
        m.put(180, Collections.<Integer>emptySet());
        m.put(181, initSet(576, 513, 258, 515, 771, 388, 197, 774, 391, 969, 268, 207, 912, 722, 530, 853, 926, 414, 991, 928, 416, 353, 739, 804, 934, 809, 617, 363, 427, 876, 246, 758, 248, 636, 574, 766));
        m.put(182, initSet(723, 486, 699, 431, 463));
        m.put(183, initSet(945, 865, 725, 887, 507));
        m.put(184, initSet(929, 961, 753, 387, 692, 694, 439, 217));
        m.put(185, initSet(898, 482, 327, 296, 974, 563, 723, 373, 726, 919, 855, 954, 541, 414));
        m.put(186, Collections.<Integer>emptySet());
        m.put(187, initSet(258, 515, 904, 906, 715, 653, 974, 590, 784, 528, 337, 787, 533, 213, 662, 471, 407, 664, 863, 288, 929, 930, 740, 744, 363, 752, 881, 691, 628, 884, 246, 631, 247, 376, 827, 573, 957));
        m.put(188, initSet(864, 961, 324, 516, 933, 902, 582, 710, 425, 394, 682, 203, 843, 461, 718, 496, 560, 499, 564, 277, 697, 507, 380, 252));
        m.put(189, initSet(393, 524, 974, 464, 785, 529, 465, 213, 470, 407, 919, 281, 539, 540, 798, 415, 353, 548, 613, 807, 296, 562, 887, 247, 701, 383));
        m.put(190, initSet(832, 513, 705, 296, 456, 490, 618, 938, 941, 750, 399, 337, 593, 306, 468, 629, 920, 380, 766));
        m.put(191, initSet(530, 658, 615, 951, 956, 894, 543, 847));
        m.put(192, initSet(896, 258, 260, 517, 266, 396, 530, 914, 915, 664, 410, 922, 796, 671, 288, 416, 417, 674, 547, 676, 293, 561, 819, 692, 566, 697, 827, 317, 702, 832, 710, 584, 969, 204, 846, 207, 592, 730, 604, 862, 999, 744, 491, 752, 496, 242, 758, 631, 248));
        m.put(193, initSet(516, 820, 228, 837, 790, 232, 475, 862));
        m.put(194, initSet(450, 499, 726, 317));
        m.put(195, initSet(641, 257, 258, 260, 709, 422, 294, 906, 653, 464, 402, 820, 373, 405, 374, 407, 823, 920, 697, 799));
        m.put(196, initSet(483, 884, 757, 535, 394, 826, 669, 766, 895));
        m.put(197, initSet(929, 993, 930, 564, 902, 695, 270, 991));
        m.put(198, Collections.<Integer>emptySet());
        m.put(199, initSet(777, 330, 207, 273, 786, 662, 344, 346, 798, 414, 543, 928, 804, 678, 232, 937, 938, 234, 300, 365, 753, 627, 308, 313, 249, 826, 382, 959));
        m.put(200, initSet(741, 295, 551, 264, 296, 651, 972, 812, 844, 753, 914, 754, 340, 407, 281, 443, 316));
        m.put(201, initSet(356, 676, 293, 681, 779, 684, 334, 208, 242, 854, 791, 888, 248, 665, 475, 572, 508, 510, 574));
        m.put(202, Collections.<Integer>emptySet());
        m.put(203, initSet(513, 737, 355, 387, 900, 401, 465, 913, 947, 725, 918, 694, 758, 344, 793, 506, 507));
        m.put(204, initSet(449, 325, 903, 456, 332, 462, 338, 789, 662, 599, 983, 791, 472, 984, 538, 796, 605, 542, 414, 224, 353, 418, 674, 355, 230, 429, 877, 944, 369, 753, 370, 627, 373, 631, 887, 504, 508, 703));
        m.put(205, Collections.<Integer>emptySet());
        m.put(206, initSet(483, 611, 644, 489, 842, 555, 363, 748, 877, 462, 753, 598, 735));
        m.put(207, initSet(900, 838, 327, 266, 973, 910, 590, 462, 464, 723, 853, 597, 854, 599, 727, 344, 409, 863, 415, 930, 483, 676, 490, 555, 811, 876, 620, 558, 945, 819, 245, 694, 443, 573, 957, 510));
        m.put(208, initSet(897, 804, 517, 741, 647, 521, 554, 298, 877, 432, 592, 624, 692, 634, 956, 860, 799));
        m.put(209, Collections.<Integer>emptySet());
        m.put(210, initSet(610, 773, 855, 297, 906, 842, 235, 236, 349, 926, 830));
        m.put(211, initSet(484, 870, 824, 362, 220, 893));
        m.put(212, initSet(928, 993, 708, 773, 331, 429, 271, 979, 342, 726, 346, 543, 799));
        m.put(213, initSet(450, 324, 454, 519, 524, 913, 467, 982, 855, 664, 409, 923, 670, 478, 928, 417, 933, 550, 616, 681, 883, 693, 629, 632, 313));
        m.put(214, initSet(321, 265, 332, 845, 464, 785, 914, 664, 920, 344, 409, 218, 348, 733, 670, 478, 746, 236, 877, 495, 752, 496, 498, 691, 947, 693, 507, 956, 893));
        m.put(215, initSet(714, 588, 271, 912, 400, 978, 787, 916, 340, 341, 405, 598, 536, 281, 284, 540, 799, 736, 674, 293, 741, 422, 807, 871, 425, 298, 811, 493, 367, 243, 568, 504, 761, 442, 445, 830, 958, 447));
        m.put(216, initSet(673, 292, 807, 969, 464, 915, 691, 885, 982, 823, 983, 570, 986));
        m.put(217, initSet(738, 307, 835, 627, 965, 456, 442));
        m.put(218, initSet(323, 995, 646, 726, 279, 890, 300, 860, 972, 861));
        m.put(219, initSet(358, 582, 775, 871, 711, 296, 872, 681, 271, 402, 693, 533, 730, 476, 415, 255));
        m.put(220, initSet(658, 484, 870, 951, 616, 936, 281, 793, 314, 524, 671));
        m.put(221, initSet(928, 900, 680, 937, 780, 909, 785, 627, 276, 855, 504, 569, 798, 895));
        m.put(222, initSet(865, 546, 260, 583, 967, 234, 658, 755, 691, 660, 566, 247, 921, 475, 988, 508, 798, 958));
        m.put(223, Collections.<Integer>emptySet());
        m.put(224, initSet(433, 866, 786, 611, 965, 824, 650, 426, 283, 846));
        m.put(225, Collections.<Integer>emptySet());
        m.put(226, initSet(993, 693, 326, 695, 456, 426, 684, 716, 317, 669));
        m.put(227, initSet(260, 517, 581, 453, 967, 778, 524, 910, 783, 464, 784, 915, 598, 414, 545, 482, 930, 744, 362, 875, 235, 367, 495, 496, 947, 629, 504, 315, 827, 252, 253));
        m.put(228, initSet(676, 421, 518, 681, 779, 363, 619, 942, 590, 399, 464, 916, 407, 665, 475, 828, 765, 606));
        m.put(229, initSet(835, 533, 555, 395));
        m.put(230, initSet(273, 449, 353, 258, 507, 702, 463));
        m.put(231, Collections.<Integer>emptySet());
        m.put(232, initSet(320, 640, 580, 837, 262, 263, 717, 718, 276, 852, 598, 854, 662, 790, 471, 280, 738, 678, 358, 360, 432, 688, 309, 885, 826, 701, 574));
        m.put(233, initSet(579, 933, 392, 840, 617, 271, 562, 502, 247, 920, 314, 826, 989, 317));
        m.put(234, initSet(545, 674, 483, 324, 390, 843, 747, 464, 658, 914, 786, 562, 598, 246, 440, 312, 345));
        m.put(235, initSet(864, 578, 930, 788, 581, 885, 619, 236, 237, 349, 893, 894));
        m.put(236, initSet(800, 484, 773, 742, 777, 681, 298, 812, 877, 815, 624, 530, 658, 726, 599, 471, 600, 252, 670, 415));
        m.put(237, initSet(930, 875, 268, 684, 461, 718, 335, 847, 947, 564, 852, 951, 665, 697, 314, 893, 414, 383));
        m.put(238, initSet(768, 752, 643, 916, 860, 271));
        m.put(239, initSet(752, 433, 977, 882, 787, 949, 456, 409, 443, 751));
        m.put(240, Collections.<Integer>emptySet());
        m.put(241, Collections.<Integer>emptySet());
        m.put(242, initSet(544, 674, 387, 611, 420, 517, 744, 937, 715, 363, 941, 431, 496, 246, 534, 734));
        m.put(243, initSet(577, 417, 420, 709, 902, 906, 490, 875, 717, 273, 337, 882, 372, 503, 504, 826, 443, 316, 828, 670));
        m.put(244, initSet(273, 412, 318));
        m.put(245, initSet(865, 545, 642, 296, 745, 426, 939, 588, 717, 399, 624, 977, 881, 691, 373, 986, 412, 670, 318));
        m.put(246, initSet(896, 773, 969, 715, 652, 845, 658, 338, 403, 982, 790, 406, 983, 792, 923, 867, 550, 807, 487, 304, 817, 755, 500, 309, 631, 440, 504, 249, 954, 702, 319, 959));
        m.put(247, initSet(320, 963, 867, 421, 583, 840, 616, 843, 299, 939, 270, 335, 528, 912, 660, 885, 406, 412, 508, 510));
        m.put(248, initSet(896, 422, 680, 619, 364, 429, 432, 881, 786, 406, 376, 347, 412, 862, 543));
        m.put(249, initSet(516, 324, 837, 871, 647, 749, 367, 335, 276, 852, 439, 440, 441, 345));
        m.put(250, Collections.<Integer>emptySet());
        m.put(251, initSet(688, 258, 580, 405, 697, 874, 315, 621, 925, 493));
        m.put(252, initSet(353, 450, 867, 516, 424, 814, 335, 467, 981, 629, 438, 634, 411, 893, 894, 510, 543));
        m.put(253, initSet(864, 674, 711, 296, 681, 336, 434, 562, 439, 921, 286, 830, 958));
        m.put(254, Collections.<Integer>emptySet());
        m.put(255, initSet(769, 290, 804, 677, 838, 710, 264, 809, 523, 620, 271, 591, 593, 562, 819, 597, 373, 438, 920, 412, 476, 670, 830, 831));
        m.put(256, initSet(932, 757, 551, 761, 318, 975));
        m.put(257, initSet(421, 807, 823, 603, 620, 476, 333, 493, 302, 894, 607));
        m.put(258, initSet(321, 834, 900, 840, 906, 782, 398, 462, 911, 912, 784, 914, 850, 787, 660, 858, 284, 348, 669, 925, 992, 738, 809, 746, 493, 752, 562, 949, 373, 631, 952, 827, 955, 699, 958));
        m.put(259, initSet(817, 306, 629, 391, 713, 601, 634, 700, 461, 814, 751));
        m.put(260, initSet(416, 450, 644, 965, 520, 778, 620, 562, 627, 692, 597, 406, 534, 537, 283, 989, 445, 318, 543));
        m.put(261, initSet(480, 641, 963, 600, 730));
        m.put(262, initSet(928, 800, 722, 291, 579, 949, 824, 330, 331, 347, 302, 798));
        m.put(263, initSet(928, 769, 865, 677, 433, 273, 786, 725, 791, 728, 733, 702, 959, 703, 991));
        m.put(264, initSet(417, 834, 643, 775, 714, 812, 717, 942, 978, 693, 373, 599, 951, 281, 730, 539, 671, 383));
        m.put(265, initSet(640, 864, 963, 932, 422, 807, 871, 904, 360, 616, 842, 875, 941, 975, 792, 281, 409, 603, 827, 284, 828));
        m.put(266, initSet(993, 934, 807, 617, 365, 367));
        m.put(267, Collections.<Integer>emptySet());
        m.put(268, initSet(384, 592, 513, 737, 468, 613, 885, 438, 843, 717, 366, 542));
        m.put(269, initSet(723, 730, 651, 671));
        m.put(270, initSet(930, 595, 900, 677, 934, 553, 603, 991));
        m.put(271, initSet(480, 321, 417, 709, 422, 327, 905, 393, 875, 493, 782, 367, 467, 502, 856, 760, 281, 314, 573, 671, 575));
        m.put(272, initSet(369, 483, 727));
        m.put(273, initSet(674, 611, 905, 364, 493, 622, 912, 339, 787, 627, 309, 342, 311, 344, 281, 669, 381, 894, 318, 319, 767));
        m.put(274, Collections.<Integer>emptySet());
        m.put(275, initSet(800, 993, 691, 597, 759, 988, 701, 799));
        m.put(276, initSet(785, 312, 777, 842, 798));
        m.put(277, initSet(354, 450, 676, 327, 713, 618, 682, 364, 461, 463, 819, 467, 629, 694, 345, 665, 601, 700, 510));
        m.put(278, Collections.<Integer>emptySet());
        m.put(279, initSet(992, 784, 656, 944, 353, 870, 470, 935, 631, 648, 344, 827));
        m.put(280, initSet(770, 901, 837, 838, 968, 456, 777, 843, 716, 973, 717, 846, 464, 722, 533, 726, 920, 921, 346, 730, 795, 412, 605, 288, 928, 864, 482, 803, 611, 677, 613, 294, 934, 871, 489, 363, 620, 365, 815, 624, 373, 826, 572, 446, 895));
        m.put(281, initSet(737, 579, 326, 422, 327, 745, 653, 975, 751, 337, 627, 373, 949, 567, 824, 954, 284, 476, 892, 893, 478, 318));
        m.put(282, initSet(304, 545, 914, 826, 941));
        m.put(283, initSet(785, 738, 692, 965, 597, 743, 873, 442, 811, 396));
        m.put(284, initSet(416, 480, 327, 711, 935, 296, 616, 681, 654, 978, 916, 343, 669, 925, 670, 478, 830, 671));
        m.put(285, initSet(947, 693, 807, 951, 471, 330, 395, 364, 335, 655, 799));
        m.put(286, initSet(308, 598, 615, 871, 857, 681, 826, 988, 318));
        m.put(287, initSet(416, 433, 804, 724, 934, 520, 456, 472, 585, 489, 555));
        m.put(288, initSet(576, 513, 324, 644, 391, 969, 652, 336, 914, 920, 415, 928, 992, 866, 484, 804, 550, 807, 681, 617, 553, 493, 496, 754, 627, 820, 373, 631, 887, 443, 957));
        m.put(289, Collections.<Integer>emptySet());
        m.put(290, initSet(615, 713, 682, 539, 814, 766));
        m.put(291, initSet(579, 483, 677, 710, 906, 811, 652, 365, 398, 784, 725, 630, 345, 669));
        m.put(292, initSet(627, 915, 660, 676, 599, 504, 409, 969, 907));
        m.put(293, initSet(705, 611, 742, 808, 942, 656, 753, 403, 694, 792, 376, 665, 574));
        m.put(294, initSet(704, 832, 513, 774, 902, 713, 714, 842, 653, 398, 399, 975, 784, 464, 915, 467, 532, 726, 920, 793, 409, 733, 605, 478, 674, 930, 420, 868, 360, 937, 363, 684, 752, 624, 947, 822, 826, 443, 317, 765, 318));
        m.put(295, initSet(658, 723, 851, 582, 935, 651, 476, 654, 942, 670, 575));
        m.put(296, initSet(900, 519, 778, 656, 785, 658, 915, 788, 533, 919, 409, 669, 670, 543, 932, 933, 551, 681, 939, 684, 944, 563, 947, 826, 827, 701, 318, 579, 581, 584, 713, 330, 971, 467, 851, 981, 856, 730, 606, 484, 870, 871, 360, 490, 364, 627, 373, 630, 381, 510));
        m.put(297, initSet(481, 898, 298, 780, 302));
        m.put(298, initSet(898, 516, 324, 837, 581, 838, 843, 716, 972, 845, 334, 528, 592, 464, 340, 790, 726, 795, 347, 349, 992, 993, 867, 484, 678, 808, 361, 618, 363, 619, 942, 563, 371, 499, 692, 374, 631, 889, 890, 573, 317, 893, 447));
        m.put(299, initSet(416, 595, 915, 852, 660, 566, 616, 988, 508, 590));
        return m;
    }

    private Map<Integer, Set<Integer>> getRemainingLines() {
        Map<Integer, Set<Integer>> m = new HashMap<>();
        m.put(300, initSet(332, 845, 400, 595, 726, 982, 470, 535, 664, 920, 988, 860, 798, 992, 546, 355, 483, 804, 742, 875, 365, 498, 627, 373, 508, 381));
        m.put(301, Collections.<Integer>emptySet());
        m.put(302, initSet(324, 454, 966, 975, 847, 849, 530, 850, 789, 597, 856, 415, 800, 993, 481, 353, 613, 421, 998, 425, 362, 875, 812, 621, 622, 814, 563, 499, 883, 826, 890, 443, 315, 510));
        m.put(303, initSet(327, 634, 682));
        m.put(304, initSet(704, 689, 834, 915, 980, 760, 666, 651, 941, 830, 670));
        m.put(305, Collections.<Integer>emptySet());
        m.put(306, initSet(817, 536, 601, 843, 380));
        m.put(307, initSet(961, 786, 567, 456, 585, 650, 571));
        m.put(308, initSet(515, 324, 516, 325, 517, 454, 583, 392, 396, 784, 338, 595, 919, 923, 475, 989, 416, 867, 740, 933, 741, 936, 811, 429, 622, 561, 436, 631, 504, 317, 319));
        m.put(309, initSet(773, 517, 647, 713, 907, 845, 463, 542, 799, 992, 418, 867, 741, 425, 619, 748, 944, 883, 628, 373, 504, 506, 634, 827, 508, 958));
        m.put(310, Collections.<Integer>emptySet());
        m.put(311, initSet(392, 746, 523, 507, 735));
        m.put(312, initSet(388, 327, 937, 843, 798));
        m.put(313, initSet(322, 356, 676, 581, 837, 678, 327, 583, 999, 616, 811, 684, 782, 912, 784, 914, 342, 854, 954, 634, 925, 670, 702));
        m.put(314, initSet(353, 579, 835, 933, 902, 777, 713, 748, 495, 912, 658, 344, 888));
        m.put(315, initSet(736, 581, 967, 423, 872, 778, 917, 821, 726, 504, 985, 537, 730, 699, 988, 381));
        m.put(316, initSet(611, 932, 773, 709, 455, 359, 840, 392, 584, 777, 364, 494, 367, 912, 432, 496, 883, 340, 758, 919, 603, 989));
        m.put(317, initSet(577, 929, 903, 457, 681, 617, 780, 784, 528, 822, 919, 920, 856, 376, 954, 795));
        m.put(318, initSet(906, 975, 496, 337, 689, 658, 562, 756, 885, 918, 438, 920, 575));
        m.put(319, initSet(325, 871, 903, 584, 464, 658, 755, 885, 406, 857, 473, 666, 762, 412));
        m.put(320, initSet(611, 516, 821, 806, 422, 348, 684, 942));
        m.put(321, initSet(400, 914, 899, 340, 631, 906, 972, 733, 782, 495));
        m.put(322, initSet(498, 581, 358, 669, 830, 350, 478));
        m.put(323, initSet(545, 753, 772, 582, 620, 381, 637, 335));
        m.put(324, initSet(896, 513, 647, 392, 648, 523, 780, 914, 917, 664, 921, 666, 541, 798, 799, 674, 804, 934, 807, 940, 944, 436, 565, 449, 578, 579, 963, 710, 454, 968, 972, 336, 467, 595, 726, 857, 731, 992, 741, 617, 875, 620, 748, 367, 496, 753, 502, 374, 378, 507));
        m.put(325, initSet(516, 837, 647, 521, 972, 333, 464, 785, 658, 914, 915, 917, 598, 664, 603, 674, 482, 997, 614, 747, 367, 755, 950, 759, 381, 893));
        m.put(326, initSet(353, 774, 456, 621, 336, 752, 881, 593, 722, 820, 597, 629, 470, 630, 826, 411, 765, 766, 767));
        m.put(327, initSet(704, 834, 713, 843, 844, 846, 912, 978, 850, 467, 405, 597, 790, 406, 601, 539, 347, 669, 414, 798, 671, 416, 354, 615, 871, 875, 559, 432, 629, 892, 445, 830));
        m.put(328, initSet(405, 998, 425, 874, 859, 894));
        m.put(329, initSet(800, 597, 998, 823, 859, 493, 974, 542, 670));
        m.put(330, initSet(784, 930, 499, 947, 937, 793, 906, 893, 766, 335, 959));
        m.put(331, initSet(737, 785, 930, 867, 875, 893, 894, 543));
        m.put(332, initSet(640, 545, 449, 691, 374, 648, 521, 361, 333));
        m.put(333, initSet(640, 624, 496, 629, 551, 967, 872, 648, 504, 985, 877, 447));
        m.put(334, initSet(450, 547, 915, 340, 788, 422, 632, 748, 796, 764));
        m.put(335, initSet(832, 898, 900, 452, 518, 914, 786, 658, 789, 790, 982, 984, 859, 928, 355, 678, 684, 749, 495, 944, 947, 885, 949, 824, 441, 572, 381, 893, 766, 383));
        m.put(336, initSet(832, 960, 739, 900, 390, 998, 871, 778, 689, 914, 755, 470, 823, 347));
        m.put(337, initSet(464, 630, 647, 491));
        m.put(338, initSet(400, 992, 502, 487, 424, 890, 621));
        m.put(339, initSet(928, 785, 612, 373, 824, 872));
        m.put(340, initSet(704, 930, 517, 934, 871, 921, 409, 523, 941, 669));
        m.put(341, initSet(469, 966, 726, 406, 632, 537, 906, 765, 559, 415, 799, 607));
        m.put(342, initSet(611, 933, 485, 681, 493, 622, 530, 787, 502, 855, 923, 348, 892));
        m.put(343, initSet(563, 467, 903, 360, 860, 367));
        m.put(344, initSet(832, 449, 386, 835, 452, 519, 648, 714, 847, 799, 417, 801, 353, 867, 741, 807, 616, 681, 620, 752, 693, 824, 888, 443, 637, 893, 894));
        m.put(345, initSet(898, 388, 677, 938, 826, 573, 733, 910, 862, 574));
        m.put(346, initSet(576, 832, 773, 840, 777, 521, 908, 531, 726, 664, 856, 348, 414, 737, 545, 802, 419, 933, 742, 681, 374, 759, 827, 381, 574, 382));
        m.put(347, initSet(675, 681, 906, 651, 620, 817, 627, 885, 665, 826, 414, 382, 766, 735, 959));
        m.put(348, initSet(992, 577, 713, 394, 558, 464, 561, 498, 691, 947, 373, 534, 470, 694, 471, 984, 506));
        m.put(349, initSet(374, 919, 906, 476, 367, 879));
        m.put(350, initSet(785, 562, 660, 648, 893, 478));
        m.put(351, initSet(597, 522, 620, 988, 447));
        m.put(352, Collections.<Integer>emptySet());
        m.put(353, initSet(705, 417, 482, 674, 867, 900, 837, 902, 746, 843, 875, 782, 686, 656, 914, 882, 373, 662, 694, 791, 699, 827));
        m.put(354, initSet(516, 804, 852, 468, 713, 717, 670));
        m.put(355, initSet(576, 705, 387, 875, 908, 972, 624, 373, 885, 507, 381, 893, 894));
        m.put(356, initSet(884, 916, 676, 486, 679, 573, 558));
        m.put(357, Collections.<Integer>emptySet());
        m.put(358, initSet(640, 775, 681, 906, 714, 490, 811, 493, 782, 718, 367, 919, 824, 860, 669));
        m.put(359, initSet(530, 658, 436, 373, 731, 494, 399));
        m.put(360, initSet(576, 945, 978, 485, 597, 902, 680, 664, 494, 670, 831));
        m.put(361, initSet(993, 802, 772, 807, 521, 908, 877, 789, 887, 759, 920, 889, 637, 893));
        m.put(362, initSet(386, 788, 981, 870, 410, 619, 684));
        m.put(363, initSet(961, 387, 934, 840, 553, 970, 938, 779, 619, 653, 910, 914, 595, 534, 598, 694, 791, 922, 859, 862));
        m.put(364, initSet(896, 704, 708, 521, 522, 778, 653, 463, 400, 787, 916, 854, 409, 670, 991, 803, 611, 678, 807, 999, 681, 426, 493, 751, 433, 434, 627, 436, 694, 823, 504, 376, 826, 890, 957));
        m.put(365, initSet(500, 777, 762, 826, 733));
        m.put(366, initSet(467, 615, 536, 424, 411));
        m.put(367, initSet(610, 965, 581, 615, 457, 617, 842, 941, 399, 562, 692, 981, 534, 950, 439, 664, 568, 378, 795, 573, 926, 671, 415));
        m.put(368, initSet(416, 450, 387));
        m.put(369, initSet(480, 929, 770, 802, 738, 804, 677, 425, 493, 974, 462, 911, 849, 374, 727, 571));
        m.put(370, initSet(976, 867, 995, 373, 538, 637, 893));
        m.put(371, initSet(481, 450, 902, 855, 780, 975));
        m.put(372, initSet(515, 947, 517, 534, 376, 892, 398));
        m.put(373, initSet(640, 960, 387, 708, 773, 838, 582, 519, 391, 392, 520, 905, 713, 843, 844, 976, 979, 788, 852, 405, 981, 918, 534, 599, 409, 411, 731, 476, 414, 543, 992, 611, 867, 485, 422, 875, 429, 621, 749, 754, 885, 566, 758, 951, 887, 443, 639));
        m.put(374, initSet(864, 993, 450, 387, 423, 616, 688, 629, 631, 506, 381, 893, 573, 701));
        m.put(375, Collections.<Integer>emptySet());
        m.put(376, initSet(640, 896, 837, 518, 422, 519, 936, 909, 398, 910, 561, 854, 664, 478));
        m.put(377, Collections.<Integer>emptySet());
        m.put(378, initSet(545, 950, 871, 647, 666, 747, 620));
        m.put(379, Collections.<Integer>emptySet());
        m.put(380, initSet(544, 769, 867, 485, 838, 807, 905, 713, 938, 429, 493, 622, 399, 530, 979, 819, 566, 504, 665, 570, 798, 414, 670, 799));
        m.put(381, initSet(576, 417, 932, 997, 620, 845, 429, 688, 913, 433, 914, 403, 756, 629, 918, 535, 538, 827, 701, 894));
        m.put(382, initSet(881, 852, 441, 412, 429));
        m.put(383, initSet(386, 643, 518, 806, 678, 519, 746, 811, 619, 428, 752, 916, 981, 858, 410, 827, 733, 893, 767));
        m.put(384, initSet(784, 914, 613, 777, 553, 555, 971, 796, 446));
        m.put(385, Collections.<Integer>emptySet());
        m.put(386, initSet(659, 788, 949, 519, 812, 847));
        m.put(387, initSet(611, 676, 997, 937, 489, 431, 976, 913, 881, 433, 564, 789, 533, 726, 790, 439, 664, 603, 571, 831));
        m.put(388, initSet(394, 717));
        m.put(389, Collections.<Integer>emptySet());
        m.put(390, initSet(785, 562, 674, 516, 612, 681, 412, 957));
        m.put(391, initSet(544, 769, 739, 548, 868, 804, 838, 583, 938, 784, 624, 532, 725, 726, 566, 952, 601, 924));
        m.put(392, initSet(960, 930, 644, 773, 551, 522, 524, 975, 543));
        m.put(393, initSet(866, 456, 651, 539, 798, 974));
        m.put(394, initSet(644, 709, 582, 807, 777, 906, 944, 496, 432, 785, 627, 726, 538, 893));
        m.put(395, initSet(753, 627, 804, 630, 694, 407, 520, 824, 472, 988, 973));
        m.put(396, initSet(450, 996, 676, 877, 462, 400, 434, 627, 819, 692, 472, 504, 890, 506, 475));
        m.put(397, initSet(850, 773, 661, 823, 616, 424, 521, 506, 845));
        m.put(398, initSet(784, 416, 420, 726, 715, 684));
        m.put(399, initSet(642, 708, 709, 678, 457, 522, 906, 426, 491, 493, 783, 464, 688, 436, 504, 473, 701, 798, 606, 894, 543, 735, 991, 575));
        m.put(400, initSet(865, 673, 422, 904, 907, 941, 592, 624, 691, 883, 853, 885, 823, 472, 409, 796, 958, 671, 799));
        m.put(401, initSet(482, 758, 887, 745, 427));
        m.put(402, initSet(978, 550, 407, 456, 954, 812, 476, 654, 671));
        m.put(403, initSet(896, 803, 611, 691, 916, 486, 904, 792, 457, 779, 476, 573));
        m.put(404, Collections.<Integer>emptySet());
        m.put(405, initSet(960, 821, 838, 680, 988));
        m.put(406, initSet(960, 644, 904, 522, 651, 590, 658, 850, 598, 470, 793, 412, 926, 478, 737, 486, 680, 553, 809, 621, 562, 755, 694, 443, 445, 446, 959));
        m.put(407, initSet(932, 709, 807, 935, 491, 812, 844, 751, 595, 726, 413, 957, 415));
        m.put(408, Collections.<Integer>emptySet());
        m.put(409, initSet(417, 805, 583, 616, 906, 845, 590, 591, 912, 562, 660, 693, 475, 860, 508, 733));
        m.put(410, initSet(800, 656, 579, 692, 788, 501, 885, 566, 471, 971, 956));
        m.put(411, initSet(513, 769, 467, 900, 838, 791, 440, 745, 938, 555, 843));
        m.put(412, initSet(865, 611, 708, 615, 616, 553, 717, 429, 564, 983, 823, 920, 440, 570, 442, 507, 444));
        m.put(413, initSet(752, 433, 899, 820, 693, 567, 827, 459, 491, 828));
        m.put(414, initSet(960, 963, 708, 583, 777, 906, 847, 850, 595, 660, 852, 733, 865, 481, 867, 483, 748, 877, 879, 944, 566, 951, 632, 442, 827, 701));
        m.put(415, initSet(578, 551, 759, 745, 954, 730, 956));
        m.put(416, initSet(640, 577, 643, 581, 965, 902, 454, 647, 650, 907, 590, 528, 534, 791, 856, 540, 544, 674, 546, 483, 612, 996, 807, 809, 620, 877, 752, 753, 627, 439, 760, 504, 825, 570, 571, 957, 958));
        m.put(417, initSet(449, 837, 710, 583, 840, 456, 714, 842, 523, 652, 717, 529, 977, 914, 915, 660, 532, 662, 855, 793, 991, 992, 737, 420, 616, 553, 811, 431, 624, 562, 885, 438, 822, 951, 827, 828));
        m.put(418, initSet(609));
        m.put(419, initSet(544, 896, 835, 502, 777, 905, 522, 426, 429, 494));
        m.put(420, initSet(947, 837, 725, 726, 519, 681, 892, 589, 495));
        m.put(421, initSet(705, 849, 676, 854, 790, 874, 716, 508, 590, 446));
        m.put(422, initSet(866, 709, 934, 519, 904, 777, 908, 558, 527, 656, 592, 662, 791, 889, 954, 475, 828, 893, 670, 798));
        m.put(423, initSet(960, 485, 871, 809, 425, 701));
        m.put(424, initSet(673, 674, 611, 807, 615, 616, 554, 938, 878, 751, 690, 627, 500, 885, 982, 599, 823, 601, 506, 831));
        m.put(425, initSet(739, 452, 485, 519, 615, 618, 938, 874, 684, 653, 877, 564, 949, 534, 951, 824, 793, 697));
        m.put(426, initSet(513, 450, 930, 612, 456, 778, 555, 653, 877, 462, 622, 753, 819, 726, 919, 951, 920, 472, 670));
        m.put(427, initSet(771, 613, 725, 918, 920));
        m.put(428, initSet(788, 615, 827));
        m.put(429, initSet(928, 579, 708, 452, 455, 584, 905, 777, 522, 621, 749, 910, 687, 432, 594, 852, 504, 890, 570, 798, 447));
        m.put(430, Collections.<Integer>emptySet());
        m.put(431, initSet(928, 992, 769, 961, 929, 520, 456, 489, 746, 811, 588, 877, 784, 752, 785, 566, 822, 471, 922, 954, 604));
        m.put(432, initSet(496, 850, 885, 826, 461, 733, 527));
        m.put(433, initSet(675, 647, 489, 973, 462, 496, 785, 753, 530, 914, 787, 724, 535, 504, 441, 507, 733, 957, 765));
        m.put(434, initSet(674, 996, 454, 615, 871, 778, 554, 906, 845, 590, 854, 502, 857));
        m.put(435, Collections.<Integer>emptySet());
        m.put(436, initSet(896, 611, 612, 708, 502, 872));
        m.put(437, Collections.<Integer>emptySet());
        m.put(438, initSet(465, 482, 548, 900, 597, 842, 682, 523, 670));
        m.put(439, initSet(866, 450, 743, 650, 747, 588, 821, 533, 598, 790, 442, 507, 767));
        m.put(440, initSet(832, 784, 752, 545, 787, 454, 534, 920, 793, 682, 827, 924));
        m.put(441, initSet(786, 644, 852, 630, 826, 798));
        m.put(442, initSet(736, 674, 644, 932, 581, 678, 455, 777, 717, 877, 624, 785, 786, 819, 697, 894, 895));
        m.put(443, initSet(705, 737, 870, 871, 812, 973, 910, 847, 912, 978, 787, 566, 793, 796, 798, 734, 670, 606, 543));
        m.put(444, initSet(674, 627, 644, 647, 957));
        m.put(445, initSet(960, 993, 787, 900, 821, 998, 713, 974, 767));
        m.put(446, initSet(784, 737, 803, 516, 662, 566, 470, 791, 681, 475, 558, 767));
        m.put(447, initSet(674, 580, 551, 809, 780, 940, 850, 499, 597, 919, 759, 537, 988, 541, 701, 735));
        m.put(448, Collections.<Integer>emptySet());
        m.put(449, initSet(496, 995, 549, 837, 582, 470, 648, 906, 746, 523, 827));
        m.put(450, initSet(961, 738, 516, 773, 965, 902, 710, 966, 973, 815, 499, 981, 597, 634));
        m.put(451, Collections.<Integer>emptySet());
        m.put(452, initSet(930, 963, 691, 885, 854, 999, 616, 906, 877, 591));
        m.put(453, initSet(981, 827, 875, 495));
        m.put(454, initSet(481, 547, 612, 933, 902, 968, 879, 915, 885, 917, 919, 857, 541, 798, 830));
        m.put(455, initSet(482, 756, 581, 757, 758, 859, 975));
        m.put(456, initSet(480, 705, 961, 804, 838, 647, 523, 491, 844, 653, 654, 658, 786, 630, 919, 539, 699, 507));
        m.put(457, initSet(544, 584, 618, 460, 684, 846, 783, 947, 532, 985, 538, 892, 735));
        m.put(458, initSet(736, 644, 517, 581, 520, 859, 476, 735));
        m.put(459, initSet(482, 899, 842, 653, 882, 820, 694, 920, 826, 924, 701, 957, 991));
        m.put(460, initSet(903, 712, 523));
        m.put(461, initSet(817, 742, 967, 713, 665, 618, 634, 523, 779, 766));
        m.put(462, initSet(865, 754, 692, 837, 662, 508, 605, 846));
        m.put(463, initSet(528, 725, 518, 904, 792, 572, 782, 478, 543, 767));
        m.put(464, initSet(961, 516, 710, 583, 904, 779, 972, 910, 591, 912, 850, 595, 789, 924, 606, 992, 673, 546, 548, 553, 681, 490, 941, 817, 819, 633, 890, 828, 701));
        m.put(465, initSet(784, 868, 566, 920, 793, 478));
        m.put(466, Collections.<Integer>emptySet());
        m.put(467, initSet(993, 773, 871, 777, 713, 842, 588, 941, 494, 658, 562, 852, 468, 856, 473, 670, 799));
        m.put(468, initSet(938, 843));
        m.put(469, initSet(563, 788, 917, 966, 726, 855, 780, 541, 493, 847));
        m.put(470, initSet(992, 513, 545, 900, 804, 582, 742, 529, 722, 947, 820, 566, 758));
        m.put(471, initSet(577, 705, 930, 644, 713, 814, 495, 752, 944, 722, 947, 852, 725, 822, 827, 636, 733));
        m.put(472, initSet(992, 770, 866, 867, 996, 773, 807, 905, 585, 489, 650, 491, 915, 854, 502, 631, 633, 477));
        m.put(473, initSet(929, 817, 677, 807, 778, 603, 876, 542));
        m.put(474, Collections.<Integer>emptySet());
        m.put(475, initSet(896, 992, 996, 837, 807, 681, 619, 684, 628, 821, 726, 502, 504, 477, 573));
        m.put(476, initSet(898, 578, 966, 967, 778, 845, 783, 975, 658, 595, 660, 926, 674, 482, 610, 996, 807, 935, 616, 621, 879, 691, 629, 631, 956));
        m.put(477, initSet(853, 583, 631, 984, 905, 570, 986, 523, 827, 845, 894));
        m.put(478, initSet(643, 515, 676, 868, 997, 904, 712, 616, 875, 555, 782, 846, 978, 915, 723, 563, 660, 820, 791, 926));
        m.put(479, Collections.<Integer>emptySet());
        m.put(480, initSet(800, 484, 807, 936, 522, 588, 941, 974, 495, 559, 691, 916, 597, 599, 894, 543, 575));
        m.put(481, initSet(864, 701));
        m.put(482, initSet(576, 529, 914, 996, 901, 758, 553, 842, 603));
        m.put(483, initSet(881, 674, 677, 838, 650, 555, 748, 877, 798));
        m.put(484, initSet(641, 709, 902, 519, 807, 520, 808, 713, 656, 944, 658, 754, 531, 947, 599, 921, 543));
        m.put(485, initSet(787, 900, 838, 874, 863));
        m.put(486, initSet(609, 865, 803, 806, 678, 694, 887, 792, 779, 558));
        m.put(487, initSet(624, 992, 691, 996, 904, 969, 845, 621));
        m.put(488, Collections.<Integer>emptySet());
        m.put(489, initSet(753, 676, 520, 571, 507, 748, 892, 988, 605));
        m.put(490, initSet(977, 738, 850, 820, 693, 647, 920, 906, 606));
        m.put(491, initSet(866, 674, 835, 820, 966, 727, 653, 910));
        m.put(492, Collections.<Integer>emptySet());
        m.put(493, initSet(993, 773, 581, 741, 998, 807, 680, 905, 969, 910, 686, 787, 756, 789, 917, 949, 697, 761, 538, 795, 859, 541));
        m.put(494, initSet(896, 768, 834, 643, 773, 933, 807, 872, 681, 524, 588, 941, 981));
        m.put(495, initSet(930, 870, 711, 744, 619, 939, 941, 785, 658, 916, 532, 949, 827, 540, 669, 830, 894, 671));
        m.put(496, initSet(832, 992, 674, 644, 772, 804, 838, 806, 875, 941, 877, 786, 787, 755, 883, 790, 503, 697, 538, 827, 507, 895));
        m.put(497, Collections.<Integer>emptySet());
        m.put(498, initSet(976, 643, 691, 789, 790, 584, 664, 859, 588, 892, 830, 975));
        m.put(499, initSet(864, 897, 547, 680, 937, 780, 717, 785, 850, 627, 885, 566, 919, 730, 826, 795, 764, 701, 574, 511));
        m.put(500, initSet(993, 595, 823, 631, 983, 890));
        m.put(501, initSet(592, 579, 726, 875, 748));
        m.put(502, initSet(930, 546, 676, 741, 583, 906, 658, 691, 661, 726, 982, 824, 696, 504, 798, 542, 958, 799));
        m.put(503, initSet(992, 656, 513, 754, 883, 692, 517, 806, 902, 742, 953, 702));
        m.put(504, initSet(608, 992, 516, 517, 520, 744, 969, 585, 681, 906, 590, 591, 687, 691, 852, 724, 725, 917, 566, 599, 824, 986, 507));
        m.put(505, Collections.<Integer>emptySet());
        m.put(506, initSet(673, 545, 867, 709, 997, 742, 521, 554, 875, 977, 913, 691, 947, 726, 982, 566, 759, 984, 988, 860, 508));
        m.put(507, initSet(704, 545, 674, 772, 997, 871, 935, 907, 785, 627, 597, 538, 826, 859, 604, 508, 991, 959));
        m.put(508, initSet(992, 609, 546, 676, 902, 791, 728, 633, 554, 684, 877, 782));
        m.put(509, Collections.<Integer>emptySet());
        m.put(510, initSet(870, 982, 681, 619, 875, 956, 767, 799));
        m.put(511, initSet(547));
        m.put(512, initSet(516, 523, 750));
        m.put(513, initSet(784, 722, 771, 806, 920, 777, 634, 749, 653, 717, 701, 527));
        m.put(514, Collections.<Integer>emptySet());
        m.put(515, initSet(867, 517, 855, 631, 942));
        m.put(516, initSet(705, 898, 773, 968, 910, 718, 977, 914, 850, 852, 790, 854, 599, 798, 542, 862, 679, 615, 616, 877, 817, 690, 691, 755, 566));
        m.put(517, initSet(736, 934, 903, 584, 744, 684, 748, 589, 592, 692, 535, 792, 569, 827, 892));
        m.put(518, initSet(904, 959));
        m.put(519, initSet(752, 705, 930, 754, 659, 947, 581, 634, 893));
        m.put(520, initSet(656, 944, 961, 785, 932, 756, 870, 872, 524, 846));
        m.put(521, initSet(576, 673, 867, 691, 804, 631, 616, 905, 620, 621));
        m.put(522, initSet(960, 708, 648, 826, 763, 911));
        m.put(523, initSet(704, 741, 904, 808, 746, 875, 751, 656, 883, 820, 725, 597, 885, 918, 791, 764, 574));
        m.put(524, initSet(768, 644, 629, 807, 616, 568));
        m.put(525, Collections.<Integer>emptySet());
        m.put(526, Collections.<Integer>emptySet());
        m.put(527, initSet(914, 579, 671, 799));
        m.put(528, initSet(640, 611, 807, 679, 888, 716, 942));
        m.put(529, initSet(576, 868, 820, 971, 653));
        m.put(530, initSet(928, 644, 612, 740, 933, 678, 777, 811, 684, 940, 686, 784, 753, 850, 885, 566, 919, 890, 763, 797));
        m.put(531, initSet(576, 897, 899, 741, 710, 742, 808, 875, 620, 941, 753, 692, 827));
        m.put(532, initSet(534, 726, 936, 634, 780));
        m.put(533, initSet(710, 617, 873, 811, 780, 785, 914, 658, 947, 627, 855, 599, 730, 671));
        m.put(534, initSet(577, 691, 822, 695, 969, 874, 859, 653, 863));
        m.put(535, initSet(753, 644, 967, 792, 730, 859, 669, 574));
        m.put(536, initSet(723, 692, 629, 730, 634, 764, 671));
        m.put(537, initSet(993, 723, 741, 710, 742, 904, 824, 634, 764, 988));
        m.put(538, initSet(576, 804, 709, 646, 902, 584, 713, 908, 687, 976, 913, 691, 575));
        m.put(539, initSet(932, 601, 938, 954, 941, 942, 766));
        m.put(540, initSet(768, 562, 563, 981, 871, 584, 681, 811, 892, 670));
        m.put(541, initSet(917, 910));
        m.put(542, initSet(592, 673, 627, 982, 906, 845, 958));
        m.put(543, initSet(644, 838, 806, 870, 615, 968, 713, 681, 911, 592, 944, 787, 980, 660, 949, 726, 598, 824, 795, 763, 604, 797, 862, 702));
        m.put(544, initSet(896, 835, 867, 708, 837, 777, 652, 784, 624, 752, 789, 566, 890, 731));
        m.put(545, initSet(624, 753, 787, 900, 885, 774, 726, 890, 843, 701));
        m.put(546, initSet(865, 673, 977, 867, 691, 660, 854, 823, 590));
        m.put(547, initSet(656, 963, 755, 837, 565, 710, 967, 651));
        m.put(548, initSet(914, 887));
        m.put(549, initSet(769, 725, 984, 702));
        m.put(550, initSet(784, 928, 867, 582, 872, 651));
        m.put(551, initSet(967, 777, 651, 699, 942, 894, 783, 735, 639));
        m.put(552, Collections.<Integer>emptySet());
        m.put(553, initSet(737, 595, 566, 919, 584, 793, 843));
        m.put(554, initSet(592, 850, 967, 999, 904, 570, 796, 799));
        m.put(555, initSet(784, 676, 613, 919, 824, 745, 922, 604));
        m.put(556, Collections.<Integer>emptySet());
        m.put(557, Collections.<Integer>emptySet());
        m.put(558, initSet(888, 572, 716));
        m.put(559, initSet(688, 790, 620));
        m.put(560, initSet(681, 713, 682, 843));
        m.put(561, initSet(912, 993, 579, 867, 806, 777, 681, 716));
        m.put(562, initSet(576, 929, 674, 900, 647, 903, 584, 842, 717, 755, 563, 660, 821, 664, 825, 826, 827));
        m.put(563, initSet(864, 704, 898, 858, 686, 830, 975, 671));
        m.put(564, initSet(791, 779, 684, 716, 863));
        m.put(565, initSet(753, 899, 883, 956, 972, 748));
        m.put(566, initSet(576, 676, 741, 647, 744, 977, 882, 691, 725, 661, 885, 796, 574));
        m.put(567, initSet(992, 930, 770, 590, 846, 881, 786, 820, 692, 822, 826, 605, 767));
        m.put(568, initSet(932, 629, 598, 859, 687, 735));
        m.put(569, initSet(928, 752, 827, 684));
        m.put(570, initSet(867, 773, 983, 907));
        m.put(571, initSet(992, 961, 674, 835, 694, 748, 877));
        m.put(572, initSet(598, 904, 910));
        m.put(573, initSet(640, 704, 705, 838, 904, 906, 714, 779, 716, 590, 942, 911, 915, 660, 597, 662, 669));
        m.put(574, initSet(592, 753, 883, 708, 852, 804, 921, 906, 826, 846, 798));
        m.put(575, initSet(851, 756, 599, 744, 872, 777, 745));
        m.put(576, initSet(737, 708, 837, 716, 974, 945, 753, 914, 947, 694, 664, 762, 863));
        m.put(577, initSet(928, 710, 614, 664, 734));
        m.put(578, initSet(864, 898, 850, 788, 581, 966, 855, 856, 780));
        m.put(579, initSet(960, 737, 993, 677, 647, 904, 777, 681, 682, 730, 763, 798, 863, 959));
        m.put(580, initSet(691, 821, 597, 824, 894, 974, 911));
        m.put(581, initSet(740, 901, 966, 903, 616, 906, 940, 973, 815, 690, 947, 725, 758, 926, 830));
        m.put(582, initSet(976, 978, 646, 713, 860));
        m.put(583, initSet(627, 854, 807, 967, 696, 684, 988));
        m.put(584, initSet(929, 674, 930, 807, 840, 778, 618, 974, 915, 660, 756, 981, 758, 856, 892, 830, 991, 831));
        m.put(585, initSet(802, 743));
        m.put(586, Collections.<Integer>emptySet());
        m.put(587, Collections.<Integer>emptySet());
        m.put(588, initSet(770, 882, 739, 611, 692, 725, 677, 694, 631, 748, 893));
        m.put(589, initSet(725, 710, 614, 664, 734));
        m.put(590, initSet(900, 996, 773, 902, 967, 999, 907, 974, 849, 691, 852, 885, 918, 696, 828, 765));
        m.put(591, initSet(865, 963, 838, 615, 939, 700, 941, 814));
        m.put(592, initSet(688, 897, 723, 819, 773, 741, 806, 920, 616, 682, 843, 718));
        m.put(593, initSet(838, 682));
        m.put(594, initSet(785, 835, 777));
        m.put(595, initSet(673, 915, 627, 819, 902, 823, 759, 856, 762, 876));
        m.put(596, Collections.<Integer>emptySet());
        m.put(597, initSet(866, 643, 804, 965, 838, 743, 874, 751, 753, 690, 852, 604, 700, 892));
        m.put(598, initSet(896, 837, 618, 811, 817, 658, 884, 694, 983, 792, 921, 985, 666, 604, 767));
        m.put(599, initSet(992, 852, 726, 983, 823, 600, 696, 845, 670, 798));
        m.put(600, initSet(658, 777, 699, 812, 654, 942, 671));
        m.put(601, initSet(941));
        m.put(602, Collections.<Integer>emptySet());
        m.put(603, initSet(736, 832, 644, 677, 778, 618, 684, 910, 974, 756, 692, 758, 985));
        m.put(604, initSet(961, 786, 643, 806, 999, 619, 767));
        m.put(605, initSet(912, 643, 613, 677, 965, 934, 694, 873, 922));
        m.put(606, initSet(642, 693, 906, 653, 973));
        m.put(607, initSet(688, 871));
        m.put(608, initSet(650, 922, 988, 748));
        m.put(609, initSet(992, 865, 753, 628, 792, 984));
        m.put(610, initSet(690, 788, 966, 967, 795, 910));
        m.put(611, initSet(896, 674, 933, 679, 905, 716, 684, 748, 941, 814, 692, 821, 790, 662, 826));
        m.put(612, initSet(912, 993, 921, 666, 941, 798));
        m.put(613, initSet(928, 784, 914, 835, 741, 653, 989));
        m.put(614, initSet(752, 885, 726, 968, 664, 857, 941));
        m.put(615, initSet(785, 651, 971, 619, 684, 956, 941, 957, 893));
        m.put(616, initSet(864, 834, 898, 933, 681, 906, 746, 811, 877, 785, 915, 629, 855, 988, 892));
        m.put(617, initSet(832, 819, 627, 708, 807, 920, 859, 876, 686, 974, 991, 639));
        m.put(618, initSet(807, 792, 681, 778, 941, 751));
        m.put(619, initSet(930, 820, 788, 981, 951, 792, 716, 847));
        m.put(620, initSet(837, 713, 845, 653, 941, 654, 753, 723, 787, 919, 890, 925, 830));
        m.put(621, initSet(960, 865, 809, 874, 845, 624, 849, 915, 787, 691, 660, 853, 854, 918, 633));
        m.put(622, initSet(785, 741, 890, 731));
        m.put(623, Collections.<Integer>emptySet());
        m.put(624, initSet(992, 770, 643, 676, 837, 773, 965, 966, 999, 936, 650, 784, 724, 692, 982, 664, 890));
        m.put(625, Collections.<Integer>emptySet());
        m.put(626, Collections.<Integer>emptySet());
        m.put(627, initSet(992, 770, 674, 866, 867, 838, 807, 904, 680, 873, 785, 658, 915, 724, 885, 630, 727, 631, 696, 825, 830, 767));
        m.put(628, initSet(705, 916, 938, 730, 746, 862, 702));
        m.put(629, initSet(688, 769, 961, 674, 884, 853, 744, 940, 910, 830, 975, 767));
        m.put(630, initSet(928, 900, 957));
        m.put(631, initSet(992, 673, 867, 773, 648, 845, 944, 914, 947, 660, 726, 760, 633, 634, 827, 893, 671));
        m.put(632, initSet(856, 910, 686, 815));
        m.put(633, initSet(977, 868, 820, 918, 967, 793, 796));
        m.put(634, initSet(934, 936, 808, 681, 875, 941, 784, 915, 883, 692, 726, 664, 828));
        m.put(635, Collections.<Integer>emptySet());
        m.put(636, initSet(900, 677, 680, 682, 843, 669));
        m.put(637, initSet(640, 992, 691, 742, 889, 845));
        m.put(638, Collections.<Integer>emptySet());
        m.put(639, initSet(807, 830));
        m.put(640, initSet(992, 752, 643, 742, 999, 664, 779, 955, 684, 862, 767));
        m.put(641, initSet(851, 872, 730, 812, 654));
        m.put(642, initSet(704, 752, 705, 717, 910));
        m.put(643, initSet(753, 711, 875, 830));
        m.put(644, initSet(785, 689, 675, 756, 677, 730, 988, 989, 957, 975, 735));
        m.put(645, Collections.<Integer>emptySet());
        m.put(646, initSet(947, 995, 997, 759, 648, 859, 877));
        m.put(647, initSet(963, 900, 709, 934, 682, 972, 876, 656, 881, 820, 821, 920, 921, 795, 957, 863));
        m.put(648, initSet(995, 933, 741, 906, 941, 912, 914, 664, 760, 925, 893, 799, 671));
        m.put(649, Collections.<Integer>emptySet());
        m.put(650, initSet(802, 835, 724, 934, 846));
        m.put(651, initSet(980, 935, 777, 795, 989, 798, 671));
        m.put(652, initSet(740, 684));
        m.put(653, initSet(960, 705, 899, 774, 871, 777, 751, 914, 850, 882, 823, 669, 957));
        m.put(654, initSet(978, 723, 830));
        m.put(655, initSet(800, 659, 939, 812, 814));
        m.put(656, initSet(692, 741, 885, 902, 875, 971, 799));
        m.put(657, Collections.<Integer>emptySet());
        m.put(658, initSet(800, 785, 930, 788, 773, 982, 888, 763, 797, 798, 863));
        m.put(659, initSet(951, 824, 797, 799));
        m.put(660, initSet(704, 977, 915, 773, 904, 760, 714, 925, 877));
        m.put(661, initSet(915, 691, 963, 982, 823, 696, 877));
        m.put(662, initSet(945, 753, 820, 837, 712, 906, 703));
        m.put(663, Collections.<Integer>emptySet());
        m.put(664, initSet(752, 913, 993, 916, 742, 903, 711, 807, 972, 941, 734));
        m.put(665, initSet(803, 739, 820, 999, 791, 750, 751));
        m.put(666, initSet(817, 674, 885, 857, 798));
        m.put(667, Collections.<Integer>emptySet());
        m.put(668, Collections.<Integer>emptySet());
        m.put(669, initSet(752, 705, 785, 881, 852, 775, 680, 777, 906, 682, 733));
        m.put(670, initSet(704, 834, 932, 709, 902, 871, 936, 713, 842, 941, 751, 913, 914, 915, 916, 852, 885, 920, 700, 733));
        m.put(671, initSet(864, 866, 710, 982, 726, 972, 956, 893));
        m.put(672, Collections.<Integer>emptySet());
        m.put(673, initSet(690, 883, 788, 966, 854, 759, 904, 906, 815));
        m.put(674, initSet(993, 753, 738, 756, 692, 951, 872, 682, 957, 783));
        m.put(675, initSet(928));
        m.put(676, initSet(770, 867, 890, 845, 910, 862, 878, 702, 895));
        m.put(677, initSet(832, 753, 881, 819, 900, 708, 853, 743, 697, 988, 735));
        m.put(678, initSet(993, 930, 905, 681, 843, 767));
        m.put(679, initSet(803, 916, 806, 904, 681, 716));
        m.put(680, initSet(919, 682));
        m.put(681, initSet(928, 804, 711, 999, 904, 872, 969, 682, 942, 817, 884, 725, 950, 791, 983, 760, 826, 827, 731, 925, 957));
        m.put(682, initSet(965, 983, 697, 843, 700, 717));
        m.put(683, Collections.<Integer>emptySet());
        m.put(684, initSet(705, 867, 837, 806, 999, 744, 713, 971, 942, 692, 725, 853, 726, 982, 831));
        m.put(685, Collections.<Integer>emptySet());
        m.put(686, initSet(903, 807, 855, 887, 842, 699, 956));
        m.put(687, initSet(910, 735));
        m.put(688, initSet(993, 967, 859));
        m.put(689, initSet(915, 885, 825));
        m.put(690, initSet(981, 855, 778, 750));
        m.put(691, initSet(992, 850, 916, 820, 884, 790, 887, 696, 986, 845, 765, 958));
        m.put(692, initSet(850, 786, 835, 709, 966, 694, 967, 791, 920, 824, 922, 892));
        m.put(693, initSet(768, 832, 864, 900, 916, 981, 775, 875, 860));
        m.put(694, initSet(738, 835, 739, 804, 965, 806, 934, 904, 748, 942, 888, 824, 892, 926));
        m.put(695, initSet(993, 819, 708, 902, 934, 903, 791));
        m.put(696, initSet(915, 906, 890));
        m.put(697, initSet(835, 819, 874, 750));
        m.put(698, Collections.<Integer>emptySet());
        m.put(699, initSet(932, 840, 906, 942, 798, 879, 863));
        m.put(700, Collections.<Integer>emptySet());
        m.put(701, initSet(832, 902, 871, 809, 970, 940, 975, 850, 949, 855, 759, 920, 795, 957));
        m.put(702, initSet(705, 867, 951, 712, 792, 730));
        m.put(703, initSet(791, 746, 879));
        m.put(704, initSet(801, 817, 900, 916, 950, 760, 827, 860));
        m.put(705, initSet(896, 944, 803, 947, 821, 949, 713, 767));
        m.put(706, Collections.<Integer>emptySet());
        m.put(707, Collections.<Integer>emptySet());
        m.put(708, initSet(929, 885, 840, 856, 777, 842, 762, 876));
        m.put(709, initSet(992, 930, 899, 741, 806, 934, 871, 936, 714, 717, 941, 975, 752, 785, 914, 787, 947, 916, 920, 826, 955, 956, 765));
        m.put(710, initSet(752, 769, 963, 819, 822, 778, 730, 972, 734, 750));
        m.put(711, initSet(811, 717));
        m.put(712, initSet(865, 742, 827, 846));
        m.put(713, initSet(994, 739, 778, 941, 814, 784, 914, 947, 981, 790, 887, 824, 889, 956, 861));
        m.put(714, initSet(912, 913));
        m.put(715, initSet(740, 822, 758, 744));
        m.put(716, initSet(832, 929, 993, 945, 898, 916, 837, 888, 767));
        m.put(717, initSet(752, 769, 834, 787, 885, 822, 908, 941, 893, 766, 975));
        m.put(718, initSet(920));
        m.put(719, Collections.<Integer>emptySet());
        m.put(720, Collections.<Integer>emptySet());
        m.put(721, Collections.<Integer>emptySet());
        m.put(722, initSet(882, 838, 887, 920, 856, 906, 843, 749, 926));
        m.put(723, initSet(914, 963, 883, 742, 953, 956, 782));
        m.put(724, initSet(838, 743));
        m.put(725, initSet(752, 737, 900, 820, 822, 734, 879));
        m.put(726, initSet(896, 737, 787, 915, 996, 790, 822, 855, 999, 889, 890, 859));
        m.put(727, initSet(786, 802, 790, 743));
        m.put(728, initSet(791));
        m.put(729, Collections.<Integer>emptySet());
        m.put(730, initSet(753, 978, 851, 967, 764, 782, 766));
        m.put(731, initSet(930));
        m.put(732, Collections.<Integer>emptySet());
        m.put(733, initSet(752, 913, 915, 852, 982, 746, 827, 908, 892, 798, 958));
        m.put(734, initSet(784, 838, 920, 970, 924));
        m.put(735, initSet(842, 908, 959));
        m.put(736, Collections.<Integer>emptySet());
        m.put(737, initSet(785, 914, 773, 741, 789, 838));
        m.put(738, initSet(881, 786, 790, 874, 988, 894));
        m.put(739, initSet(769, 882, 814, 751));
        m.put(740, initSet(855));
        m.put(741, initSet(914, 883, 808));
        m.put(742, initSet(897, 945, 802, 789, 997, 806, 920, 875, 860, 861, 877));
        m.put(743, initSet(835, 934, 790, 919, 811, 846));
        m.put(744, initSet(967, 761, 954));
        m.put(745, initSet(912, 914, 851, 807, 887, 843, 798));
        m.put(746, initSet(768, 981, 840, 858, 811, 941, 894, 991));
        m.put(747, initSet(965, 871));
        m.put(748, initSet(800, 963, 902, 870, 785, 881, 786, 981, 885, 951, 793, 922, 799));
        m.put(749, initSet(843));
        m.put(750, initSet(814));
        m.put(751, initSet(914, 804, 920, 973));
        m.put(752, initSet(768, 785, 787, 758, 775, 936, 842));
        m.put(753, initSet(992, 881, 802, 754, 819, 804, 875, 798, 895));
        m.put(754, initSet(865, 932, 807, 777, 954, 812, 830));
        m.put(755, initSet(817, 914, 941, 767));
        m.put(756, initSet(917, 967, 792, 778));
        m.put(757, initSet(917, 894));
        m.put(758, initSet(784, 967, 936, 827));
        m.put(759, initSet(976, 993, 994, 883, 788, 902, 790, 824, 827, 830));
        m.put(760, initSet(768, 913, 916, 858, 875, 925));
        m.put(761, Collections.<Integer>emptySet());
        m.put(762, Collections.<Integer>emptySet());
        m.put(763, initSet(777));
        m.put(764, initSet(897, 850, 963, 972));
        m.put(765, initSet(800, 900, 919, 894, 991, 767));
        m.put(766, initSet(906));
        m.put(767, initSet(949, 950, 807, 888, 938));
        m.put(768, initSet(864, 858));
        m.put(769, initSet(865, 837, 903, 779));
        m.put(770, initSet(961, 802, 835, 966));
        m.put(771, initSet(774, 887));
        m.put(772, initSet(992, 804, 920, 889));
        m.put(773, initSet(912, 928, 913, 850, 787, 917, 919, 823, 904, 856, 975, 879));
        m.put(774, initSet(820, 920));
        m.put(775, initSet(913, 811, 875));
        m.put(776, Collections.<Integer>emptySet());
        m.put(777, initSet(866, 868, 838, 935, 842, 846, 895));
        m.put(778, initSet(881, 817, 902, 807, 825, 828));
        m.put(779, initSet(896, 806, 790, 999, 942, 959));
        m.put(780, initSet(837, 901, 822, 903, 954));
        m.put(781, Collections.<Integer>emptySet());
        m.put(782, initSet(837, 981, 955));
        m.put(783, initSet(792));
        m.put(784, initSet(900, 838, 982, 887, 971, 847));
        m.put(785, initSet(802, 835, 804, 933, 870, 906, 875, 908, 812, 877, 944, 786, 978, 915, 885, 919, 951, 826, 795, 955, 892, 989, 893));
        m.put(786, initSet(928, 900, 852, 804, 966, 988, 877, 846));
        m.put(787, initSet(801, 993, 899, 950, 921, 826, 795));
        m.put(788, initSet(898, 883, 939, 799));
        m.put(789, initSet(835, 807, 935, 905, 859, 861));
        m.put(790, initSet(992, 867, 804, 965, 998, 934, 999, 904, 811, 850, 791, 919, 890, 827));
        m.put(791, initSet(820, 853, 907, 796, 959));
        m.put(792, initSet(803, 884, 821, 902, 967, 903, 938, 942, 991));
        m.put(793, initSet(912, 800, 944, 867, 981, 920, 797));
        m.put(794, Collections.<Integer>emptySet());
        m.put(795, initSet(914, 996, 981, 921, 906, 975));
        m.put(796, initSet(868, 934, 984, 953, 991));
        m.put(797, initSet(867));
        m.put(798, initSet(993, 817, 978, 963, 900, 980, 807, 826, 941, 975));
        m.put(799, initSet(896, 849, 933, 919, 972, 956, 814, 975));
        m.put(800, initSet(930, 867, 885, 998, 982, 824, 874, 925));
        m.put(801, initSet(914, 957, 910));
        m.put(802, initSet(835, 873, 893));
        m.put(803, initSet(896, 898, 820));
        m.put(804, initSet(832, 913, 881, 965, 920, 856, 842, 890, 941));
        m.put(805, initSet(865, 977, 853, 890, 878));
        m.put(806, initSet(854, 828));
        m.put(807, initSet(930, 997, 935, 872, 906, 977, 881, 978, 853, 951, 920, 954, 861));
        m.put(808, initSet(915));
        m.put(809, initSet(919, 920, 874, 859, 991));
        m.put(810, Collections.<Integer>emptySet());
        m.put(811, initSet(978, 965, 903, 871));
        m.put(812, initSet(949, 877, 830));
        m.put(813, Collections.<Integer>emptySet());
        m.put(814, initSet(870, 843, 847));
        m.put(815, initSet(864));
        m.put(816, Collections.<Integer>emptySet());
        m.put(817, initSet(965, 950, 871));
        m.put(818, Collections.<Integer>emptySet());
        m.put(819, initSet(930, 838, 966, 937, 988, 892, 846, 863, 991));
        m.put(820, initSet(914, 900, 822, 871, 973, 910));
        m.put(821, initSet(900, 884, 824, 920, 921, 988, 989));
        m.put(822, initSet(928, 977, 871, 920));
        m.put(823, initSet(949, 904, 859, 958));
        m.put(824, initSet(993, 835, 838, 982, 870, 951, 890, 988, 925, 863));
        m.put(825, initSet(857, 921, 988));
        m.put(826, initSet(933, 949, 918, 973, 991));
        m.put(827, initSet(832, 867, 837, 870, 936, 969, 906, 939, 944, 913, 945, 947, 949, 981, 952, 858, 893, 894));
        m.put(828, initSet(914, 902));
        m.put(829, Collections.<Integer>emptySet());
        m.put(830, initSet(864, 963, 901, 935, 906, 842, 875, 860, 892, 847));
        m.put(831, initSet(934, 840));
        m.put(832, initSet(913, 914, 867, 900, 902, 889));
        m.put(833, Collections.<Integer>emptySet());
        m.put(834, initSet(864, 875));
        m.put(835, Collections.<Integer>emptySet());
        m.put(836, Collections.<Integer>emptySet());
        m.put(837, initSet(867, 980, 965, 902, 855, 887, 951, 952, 842, 846));
        m.put(838, initSet(960, 914, 850, 919));
        m.put(839, Collections.<Integer>emptySet());
        m.put(840, initSet(928, 993, 905, 894));
        m.put(841, Collections.<Integer>emptySet());
        m.put(842, initSet(864, 900, 885, 855, 906, 971, 924, 940, 958, 975, 959));
        m.put(843, initSet(928, 941));
        m.put(844, initSet(942));
        m.put(845, initSet(992, 913, 853, 889, 986, 939));
        m.put(846, initSet(992, 966, 908));
        m.put(847, initSet(898, 867, 947, 855));
        m.put(848, Collections.<Integer>emptySet());
        m.put(849, initSet(998, 974));
        m.put(850, initSet(992, 867, 900, 996, 853, 981, 949, 998, 967, 925));
        m.put(851, Collections.<Integer>emptySet());
        m.put(852, initSet(928, 988));
        m.put(853, initSet(865, 915, 884, 862));
        m.put(854, initSet(999, 890));
        m.put(855, initSet(928, 883, 996, 981, 902, 956));
        m.put(856, initSet(928, 981, 902, 967, 871, 908, 910));
        m.put(857, initSet(968));
        m.put(858, initSet(864, 978, 915, 981, 982, 925));
        m.put(859, initSet(947, 920, 910));
        m.put(860, initSet(992, 993, 889, 906));
        m.put(861, initSet(914, 867, 877));
        m.put(862, initSet(938, 959));
        m.put(863, initSet(865, 981, 951, 984));
        m.put(864, initSet(917, 871, 910));
        m.put(865, initSet(996, 905, 953, 986, 878));
        m.put(866, initSet(966, 935, 988, 942));
        m.put(867, initSet(916, 967, 983, 954, 890, 875));
        m.put(868, Collections.<Integer>emptySet());
        m.put(869, Collections.<Integer>emptySet());
        m.put(870, initSet(949, 982, 894));
        m.put(871, initSet(930, 980, 982, 998, 919, 920, 906, 941, 911));
        m.put(872, initSet(932, 935));
        m.put(873, Collections.<Integer>emptySet());
        m.put(874, initSet(919, 974));
        m.put(875, initSet(914, 995, 949, 981, 997, 951, 984, 971, 925, 877, 893));
        m.put(876, initSet(929));
        m.put(877, initSet(944, 913, 963, 999, 889, 971, 958));
        m.put(878, initSet(969));
        m.put(879, initSet(996, 906, 940, 973, 894));
        m.put(880, Collections.<Integer>emptySet());
        m.put(881, initSet(900, 949, 937));
        m.put(882, initSet(930, 899, 949, 973));
        m.put(883, initSet(963));
        m.put(884, initSet(910));
        m.put(885, initSet(947, 968, 921, 937, 970));
        m.put(886, Collections.<Integer>emptySet());
        m.put(887, Collections.<Integer>emptySet());
        m.put(888, initSet(942));
        m.put(889, Collections.<Integer>emptySet());
        m.put(890, initSet(896, 977, 993, 979, 935, 905));
        m.put(891, Collections.<Integer>emptySet());
        m.put(892, initSet(914, 915, 947, 916, 923, 988, 895));
        m.put(893, initSet(930, 915, 997, 984));
        m.put(894, initSet(960, 982, 974));
        m.put(895, initSet(922));
        m.put(896, initSet(910, 975, 959));
        m.put(897, Collections.<Integer>emptySet());
        m.put(898, initSet(916, 901, 966, 942));
        m.put(899, initSet(956));
        m.put(900, initSet(930, 920));
        m.put(901, initSet(902, 966, 940, 910));
        m.put(902, initSet(917, 967, 951, 940, 974));
        m.put(903, Collections.<Integer>emptySet());
        m.put(904, initSet(963, 996, 967, 999, 910));
        m.put(905, initSet(963, 979, 981));
        m.put(906, initSet(930, 915, 917, 981, 997, 966, 967, 988, 991));
        m.put(907, Collections.<Integer>emptySet());
        m.put(908, initSet(944, 913, 935));
        m.put(909, Collections.<Integer>emptySet());
        m.put(910, initSet(917, 918));
        m.put(911, initSet(920, 988));
        m.put(912, initSet(978, 982, 970, 955, 926));
        m.put(913, initSet(944, 982));
        m.put(914, initSet(993, 915, 950, 967, 991));
        m.put(915, initSet(916, 950, 983, 941));
        m.put(916, initSet(978, 975));
        m.put(917, initSet(919, 956, 975));
        m.put(918, initSet(977));
        m.put(919, initSet(992, 933, 920, 922, 971, 973, 975));
        m.put(920, initSet(993, 988));
        m.put(921, initSet(963));
        m.put(922, initSet(929));
        m.put(923, initSet(928));
        m.put(924, Collections.<Integer>emptySet());
        m.put(925, initSet(978, 988));
        m.put(926, initSet(981, 940));
        m.put(927, Collections.<Integer>emptySet());
        m.put(928, initSet(979));
        m.put(929, initSet(930, 934, 966, 988));
        m.put(930, initSet(944, 947, 981, 971));
        m.put(931, Collections.<Integer>emptySet());
        m.put(932, Collections.<Integer>emptySet());
        m.put(933, Collections.<Integer>emptySet());
        m.put(934, initSet(988));
        m.put(935, Collections.<Integer>emptySet());
        m.put(936, Collections.<Integer>emptySet());
        m.put(937, Collections.<Integer>emptySet());
        m.put(938, Collections.<Integer>emptySet());
        m.put(939, initSet(981, 982));
        m.put(940, initSet(966, 956));
        m.put(941, Collections.<Integer>emptySet());
        m.put(942, Collections.<Integer>emptySet());
        m.put(943, Collections.<Integer>emptySet());
        m.put(944, initSet(982));
        m.put(945, initSet(993));
        m.put(946, Collections.<Integer>emptySet());
        m.put(947, initSet(976, 954, 959));
        m.put(948, Collections.<Integer>emptySet());
        m.put(949, initSet(967, 957, 991));
        m.put(950, Collections.<Integer>emptySet());
        m.put(951, initSet(981, 997, 956));
        m.put(952, Collections.<Integer>emptySet());
        m.put(953, Collections.<Integer>emptySet());
        m.put(954, Collections.<Integer>emptySet());
        m.put(955, Collections.<Integer>emptySet());
        m.put(956, initSet(967));
        m.put(957, initSet(988));
        m.put(958, initSet(982));
        m.put(959, initSet(976, 999, 972));
        m.put(960, initSet(981));
        m.put(961, initSet(966));
        m.put(962, Collections.<Integer>emptySet());
        m.put(963, initSet(986));
        m.put(964, Collections.<Integer>emptySet());
        m.put(965, initSet(992));
        m.put(966, initSet(975));
        m.put(967, Collections.<Integer>emptySet());
        m.put(968, Collections.<Integer>emptySet());
        m.put(969, Collections.<Integer>emptySet());
        m.put(970, Collections.<Integer>emptySet());
        m.put(971, Collections.<Integer>emptySet());
        m.put(972, initSet(976));
        m.put(973, Collections.<Integer>emptySet());
        m.put(974, Collections.<Integer>emptySet());
        m.put(975, initSet(993, 981));
        m.put(976, initSet(997));
        m.put(977, initSet(983));
        m.put(978, Collections.<Integer>emptySet());
        m.put(979, Collections.<Integer>emptySet());
        m.put(980, initSet(988, 989));
        m.put(981, Collections.<Integer>emptySet());
        m.put(982, initSet(992, 999));
        m.put(983, initSet(996, 988));
        m.put(984, initSet(991));
        m.put(985, Collections.<Integer>emptySet());
        m.put(986, initSet(996, 988));
        m.put(987, Collections.<Integer>emptySet());
        m.put(988, initSet(996, 998));
        m.put(989, Collections.<Integer>emptySet());
        m.put(990, Collections.<Integer>emptySet());
        m.put(991, Collections.<Integer>emptySet());
        m.put(992, Collections.<Integer>emptySet());
        m.put(993, Collections.<Integer>emptySet());
        m.put(994, Collections.<Integer>emptySet());
        m.put(995, Collections.<Integer>emptySet());
        m.put(996, initSet(999));
        m.put(997, Collections.<Integer>emptySet());
        m.put(998, Collections.<Integer>emptySet());
        m.put(999, Collections.<Integer>emptySet());
        return m;
    }

//    @Test
    public void testToyExample() {
        float gamma = 1.5f;
        Map<Integer, Set<Integer>> partitions = new HashMap<>();
        partitions.put(1, initSet( 1,  2,  3,  4,  5));
        partitions.put(2, initSet( 6,  7,  8,  9, 10));
        partitions.put(3, initSet(11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26));
        partitions.put(4, initSet(27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        Map<Integer, Set<Integer>> friendships = new HashMap<>();

        friendships.put( 1, initSet( 2,  3,  4,  5,  6,  7,  8,  9, 10));
        friendships.put( 2, initSet( 3,  4,  5,  6,  7,  8,  9, 10));
        friendships.put( 3, initSet( 4,  5,  6,  7,  8,  9, 10));
        friendships.put( 4, initSet( 5,  6,  7,  8,  9, 10));
        friendships.put( 5, initSet( 6,  7,  8,  9, 10));
        friendships.put( 6, initSet( 7,  8,  9, 10));
        friendships.put( 7, initSet( 8,  9, 10));
        friendships.put( 8, initSet( 9, 10));
        friendships.put( 9, initSet(10));
        friendships.put(10, Collections.<Integer>emptySet());

        friendships.put(11, initSet(12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(12, initSet(13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(13, initSet(14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(14, initSet(15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(15, initSet(16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(16, initSet(17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(17, initSet(18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(18, initSet(19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(19, initSet(20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(20, initSet(21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(21, initSet(22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(22, initSet(23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(23, initSet(24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(24, initSet(25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(25, initSet(26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(26, initSet(27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(27, initSet(28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(28, initSet(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(29, initSet(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(30, initSet(31, 32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(31, initSet(32, 33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(32, initSet(33, 34, 35, 36, 37, 38, 39, 40));
        friendships.put(33, initSet(34, 35, 36, 37, 38, 39, 40));
        friendships.put(34, initSet(35, 36, 37, 38, 39, 40));
        friendships.put(35, initSet(36, 37, 38, 39, 40));
        friendships.put(36, initSet(37, 38, 39, 40));
        friendships.put(37, initSet(38, 39, 40));
        friendships.put(38, initSet(39, 40));
        friendships.put(39, initSet(40));
        friendships.put(40, Collections.<Integer>emptySet());

        HermesManager manager = HermesTestUtils.initGraph(gamma, true, partitions, friendships);
        Integer initialEdgeCut = manager.getEdgeCut();
        manager.repartition();
        Integer finalEdgeCut = manager.getEdgeCut();
    }
}
