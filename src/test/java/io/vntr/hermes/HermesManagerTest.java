package io.vntr.hermes;

import org.junit.Test;

import java.util.*;

import static io.vntr.TestUtils.getTopographyForMultigroupSocialNetwork;
import static io.vntr.TestUtils.initSet;
import static org.junit.Assert.*;

/**
 * Created by robertlindquist on 9/20/16.
 */
public class HermesManagerTest {

    @Test
    public void testThingsInGeneral() {
        double gamma = 1.6D;
        HermesManager manager = new HermesManager(gamma);

        Long pid1 = manager.addPartition();
        Long pid2 = manager.addPartition();

        HermesUser user1 = new HermesUser(1L, "User 1", pid1, gamma, manager);
        HermesUser user2 = new HermesUser(2L, "User 2", pid2, gamma, manager);
        HermesUser user3 = new HermesUser(3L, "User 3", pid1, gamma, manager);
        HermesUser user4 = new HermesUser(4L, "User 4", pid2, gamma, manager);
        HermesUser user5 = new HermesUser(5L, "User 5", pid1, gamma, manager);
        HermesUser user6 = new HermesUser(6L, "User 6", pid2, gamma, manager);

        manager.addUser(user1);
        manager.addUser(user2);
        manager.addUser(user3);
        manager.addUser(user4);
        manager.addUser(user5);
        manager.addUser(user6);

        Map<Long, Set<Long>> pMap = manager.getPartitionToUserMap();
        assertTrue(pMap.size() == 2);
        assertTrue(pMap.get(pid1).equals(new HashSet<Long>(Arrays.asList(1L, 3L, 5L))));
        assertTrue(pMap.get(pid2).equals(new HashSet<Long>(Arrays.asList(2L, 4L, 6L))));

        assertEquals(user1, manager.getUser(1L));
        assertEquals(user2, manager.getUser(2L));
        assertEquals(user3, manager.getUser(3L));
        assertEquals(user4, manager.getUser(4L));
        assertEquals(user5, manager.getUser(5L));
        assertEquals(user6, manager.getUser(6L));

        manager.befriend(1L, 2L);
        manager.befriend(1L, 3L);
        manager.befriend(1L, 4L);
        manager.befriend(1L, 5L);
        manager.befriend(1L, 6L);

        assertTrue(manager.getEdgeCut() == 3L);

        manager.unfriend(1L, 6L);

        assertTrue(manager.getEdgeCut() == 2L);

        Long pid3 = manager.addPartition();

        HermesUser user7 = new HermesUser(7L, "User 7", pid3, gamma, manager);
        HermesUser user8 = new HermesUser(8L, "User 8", pid3, gamma, manager);
        HermesUser user9 = new HermesUser(9L, "User 9", pid3, gamma, manager);

        manager.addUser(user7);
        manager.addUser(user8);
        manager.addUser(user9);

        manager.befriend(1L, 7L);
        manager.befriend(1L, 8L);
        manager.befriend(1L, 9L);

        assertTrue(manager.getEdgeCut() == 5L);

        manager.removeUser(8L);

        assertTrue(manager.getEdgeCut() == 4L);

        manager.moveUser(4L, pid1);

        assertTrue(manager.getEdgeCut() == 3L);

        manager.moveUser(4L, pid3);

        assertTrue(manager.getEdgeCut() == 4L);

        for(long id=2L; id<=9L; id++) {
            if(id != 8L) {
                manager.moveUser(id, pid3);
            }
        }

        manager.repartition();

        System.out.println("Hermes edge cut #1: " + manager.getEdgeCut());
    }

    @Test
    public void testRepartitionInDepth() {
        //TODO: this occasionally doesn't terminate
//        for(int i=0; i<10000; i++) {
//            System.out.println("Outer loop " + i);
            int numUsers = 1000;
            int numPartitions = 10;

            double gamma = 1.5;
            Map<Long, Set<Long>> friendships = getTopographyForMultigroupSocialNetwork(numUsers, 20, 0.1, 0.1);
            Map<Long, Set<Long>> partitions = new HashMap<Long, Set<Long>>();
            for(long pid=0L; pid<numPartitions; pid++) {
                partitions.put(pid, new HashSet<Long>());
            }
            for(long uid=0L; uid<numUsers; uid++) {
                partitions.get(uid % numPartitions).add(uid);
            }
            HermesManager manager = HermesTestUtils.initGraph(gamma, partitions, friendships);
            Long initialEdgeCut = manager.getEdgeCut();
            long start = System.nanoTime();
            manager.repartition();
            long end = System.nanoTime();
            Long finalEdgeCut = manager.getEdgeCut();
            System.out.println("Edge cut before: " + initialEdgeCut + ", after: " + finalEdgeCut + " in " + ((end-start)/1000000) + "ms");
//        }
    }

//    @Test
    public void specialDeadlockTest() {
        double gamma = 1.5;
        Map<Long, Set<Long>> partitions = new HashMap<Long, Set<Long>>();
        partitions.put(0L, initSet(0L, 770L, 260L, 520L, 10L, 780L, 270L, 530L, 20L, 790L, 280L, 540L, 30L, 800L, 290L, 550L, 40L, 810L, 300L, 560L, 50L, 820L, 310L, 570L, 60L, 830L, 320L, 580L, 70L, 840L, 330L, 590L, 80L, 850L, 340L, 600L, 90L, 860L, 350L, 610L, 100L, 870L, 360L, 620L, 110L, 880L, 370L, 630L, 120L, 890L, 380L, 640L, 130L, 900L, 390L, 650L, 140L, 910L, 400L, 660L, 150L, 920L, 410L, 670L, 160L, 930L, 420L, 680L, 170L, 940L, 430L, 690L, 180L, 950L, 440L, 700L, 190L, 960L, 450L, 710L, 200L, 970L, 460L, 720L, 210L, 980L, 470L, 730L, 220L, 990L, 480L, 740L, 230L, 490L, 750L, 240L, 500L, 760L, 250L, 510L));
        partitions.put(1L, initSet(1L, 771L, 261L, 521L, 11L, 781L, 271L, 531L, 21L, 791L, 281L, 541L, 31L, 801L, 291L, 551L, 41L, 811L, 301L, 561L, 51L, 821L, 311L, 571L, 61L, 831L, 321L, 581L, 71L, 841L, 331L, 591L, 81L, 851L, 341L, 601L, 91L, 861L, 351L, 611L, 101L, 871L, 361L, 621L, 111L, 881L, 371L, 631L, 121L, 891L, 381L, 641L, 131L, 901L, 391L, 651L, 141L, 911L, 401L, 661L, 151L, 921L, 411L, 671L, 161L, 931L, 421L, 681L, 171L, 941L, 431L, 691L, 181L, 951L, 441L, 701L, 191L, 961L, 451L, 711L, 201L, 971L, 461L, 721L, 211L, 981L, 471L, 731L, 221L, 991L, 481L, 741L, 231L, 491L, 751L, 241L, 501L, 761L, 251L, 511L));
        partitions.put(2L, initSet(512L, 2L, 772L, 262L, 522L, 12L, 782L, 272L, 532L, 22L, 792L, 282L, 542L, 32L, 802L, 292L, 552L, 42L, 812L, 302L, 562L, 52L, 822L, 312L, 572L, 62L, 832L, 322L, 582L, 72L, 842L, 332L, 592L, 82L, 852L, 342L, 602L, 92L, 862L, 352L, 612L, 102L, 872L, 362L, 622L, 112L, 882L, 372L, 632L, 122L, 892L, 382L, 642L, 132L, 902L, 392L, 652L, 142L, 912L, 402L, 662L, 152L, 922L, 412L, 672L, 162L, 932L, 422L, 682L, 172L, 942L, 432L, 692L, 182L, 952L, 442L, 702L, 192L, 962L, 452L, 712L, 202L, 972L, 462L, 722L, 212L, 982L, 472L, 732L, 222L, 992L, 482L, 742L, 232L, 492L, 752L, 242L, 502L, 762L, 252L));
        partitions.put(3L, initSet(513L, 3L, 773L, 263L, 523L, 13L, 783L, 273L, 533L, 23L, 793L, 283L, 543L, 33L, 803L, 293L, 553L, 43L, 813L, 303L, 563L, 53L, 823L, 313L, 573L, 63L, 833L, 323L, 583L, 73L, 843L, 333L, 593L, 83L, 853L, 343L, 603L, 93L, 863L, 353L, 613L, 103L, 873L, 363L, 623L, 113L, 883L, 373L, 633L, 123L, 893L, 383L, 643L, 133L, 903L, 393L, 653L, 143L, 913L, 403L, 663L, 153L, 923L, 413L, 673L, 163L, 933L, 423L, 683L, 173L, 943L, 433L, 693L, 183L, 953L, 443L, 703L, 193L, 963L, 453L, 713L, 203L, 973L, 463L, 723L, 213L, 983L, 473L, 733L, 223L, 993L, 483L, 743L, 233L, 493L, 753L, 243L, 503L, 763L, 253L));
        partitions.put(4L, initSet(514L, 4L, 774L, 264L, 524L, 14L, 784L, 274L, 534L, 24L, 794L, 284L, 544L, 34L, 804L, 294L, 554L, 44L, 814L, 304L, 564L, 54L, 824L, 314L, 574L, 64L, 834L, 324L, 584L, 74L, 844L, 334L, 594L, 84L, 854L, 344L, 604L, 94L, 864L, 354L, 614L, 104L, 874L, 364L, 624L, 114L, 884L, 374L, 634L, 124L, 894L, 384L, 644L, 134L, 904L, 394L, 654L, 144L, 914L, 404L, 664L, 154L, 924L, 414L, 674L, 164L, 934L, 424L, 684L, 174L, 944L, 434L, 694L, 184L, 954L, 444L, 704L, 194L, 964L, 454L, 714L, 204L, 974L, 464L, 724L, 214L, 984L, 474L, 734L, 224L, 994L, 484L, 744L, 234L, 494L, 754L, 244L, 504L, 764L, 254L));
        partitions.put(5L, initSet(515L, 5L, 775L, 265L, 525L, 15L, 785L, 275L, 535L, 25L, 795L, 285L, 545L, 35L, 805L, 295L, 555L, 45L, 815L, 305L, 565L, 55L, 825L, 315L, 575L, 65L, 835L, 325L, 585L, 75L, 845L, 335L, 595L, 85L, 855L, 345L, 605L, 95L, 865L, 355L, 615L, 105L, 875L, 365L, 625L, 115L, 885L, 375L, 635L, 125L, 895L, 385L, 645L, 135L, 905L, 395L, 655L, 145L, 915L, 405L, 665L, 155L, 925L, 415L, 675L, 165L, 935L, 425L, 685L, 175L, 945L, 435L, 695L, 185L, 955L, 445L, 705L, 195L, 965L, 455L, 715L, 205L, 975L, 465L, 725L, 215L, 985L, 475L, 735L, 225L, 995L, 485L, 745L, 235L, 495L, 755L, 245L, 505L, 765L, 255L));
        partitions.put(6L, initSet(256L, 516L, 6L, 776L, 266L, 526L, 16L, 786L, 276L, 536L, 26L, 796L, 286L, 546L, 36L, 806L, 296L, 556L, 46L, 816L, 306L, 566L, 56L, 826L, 316L, 576L, 66L, 836L, 326L, 586L, 76L, 846L, 336L, 596L, 86L, 856L, 346L, 606L, 96L, 866L, 356L, 616L, 106L, 876L, 366L, 626L, 116L, 886L, 376L, 636L, 126L, 896L, 386L, 646L, 136L, 906L, 396L, 656L, 146L, 916L, 406L, 666L, 156L, 926L, 416L, 676L, 166L, 936L, 426L, 686L, 176L, 946L, 436L, 696L, 186L, 956L, 446L, 706L, 196L, 966L, 456L, 716L, 206L, 976L, 466L, 726L, 216L, 986L, 476L, 736L, 226L, 996L, 486L, 746L, 236L, 496L, 756L, 246L, 506L, 766L));
        partitions.put(7L, initSet(257L, 517L, 7L, 777L, 267L, 527L, 17L, 787L, 277L, 537L, 27L, 797L, 287L, 547L, 37L, 807L, 297L, 557L, 47L, 817L, 307L, 567L, 57L, 827L, 317L, 577L, 67L, 837L, 327L, 587L, 77L, 847L, 337L, 597L, 87L, 857L, 347L, 607L, 97L, 867L, 357L, 617L, 107L, 877L, 367L, 627L, 117L, 887L, 377L, 637L, 127L, 897L, 387L, 647L, 137L, 907L, 397L, 657L, 147L, 917L, 407L, 667L, 157L, 927L, 417L, 677L, 167L, 937L, 427L, 687L, 177L, 947L, 437L, 697L, 187L, 957L, 447L, 707L, 197L, 967L, 457L, 717L, 207L, 977L, 467L, 727L, 217L, 987L, 477L, 737L, 227L, 997L, 487L, 747L, 237L, 497L, 757L, 247L, 507L, 767L));
        partitions.put(8L, initSet(768L, 258L, 518L, 8L, 778L, 268L, 528L, 18L, 788L, 278L, 538L, 28L, 798L, 288L, 548L, 38L, 808L, 298L, 558L, 48L, 818L, 308L, 568L, 58L, 828L, 318L, 578L, 68L, 838L, 328L, 588L, 78L, 848L, 338L, 598L, 88L, 858L, 348L, 608L, 98L, 868L, 358L, 618L, 108L, 878L, 368L, 628L, 118L, 888L, 378L, 638L, 128L, 898L, 388L, 648L, 138L, 908L, 398L, 658L, 148L, 918L, 408L, 668L, 158L, 928L, 418L, 678L, 168L, 938L, 428L, 688L, 178L, 948L, 438L, 698L, 188L, 958L, 448L, 708L, 198L, 968L, 458L, 718L, 208L, 978L, 468L, 728L, 218L, 988L, 478L, 738L, 228L, 998L, 488L, 748L, 238L, 498L, 758L, 248L, 508L));
        partitions.put(9L, initSet(769L, 259L, 519L, 9L, 779L, 269L, 529L, 19L, 789L, 279L, 539L, 29L, 799L, 289L, 549L, 39L, 809L, 299L, 559L, 49L, 819L, 309L, 569L, 59L, 829L, 319L, 579L, 69L, 839L, 329L, 589L, 79L, 849L, 339L, 599L, 89L, 859L, 349L, 609L, 99L, 869L, 359L, 619L, 109L, 879L, 369L, 629L, 119L, 889L, 379L, 639L, 129L, 899L, 389L, 649L, 139L, 909L, 399L, 659L, 149L, 919L, 409L, 669L, 159L, 929L, 419L, 679L, 169L, 939L, 429L, 689L, 179L, 949L, 439L, 699L, 189L, 959L, 449L, 709L, 199L, 969L, 459L, 719L, 209L, 979L, 469L, 729L, 219L, 989L, 479L, 739L, 229L, 999L, 489L, 749L, 239L, 499L, 759L, 249L, 509L));

        Map<Long, Set<Long>> friendships = new HashMap<Long, Set<Long>>();
        friendships.putAll(getFirst300Lines());
        friendships.putAll(getRemainingLines());

        HermesManager manager = HermesTestUtils.initGraph(gamma, partitions, friendships);
        Long initialEdgeCut = manager.getEdgeCut();
        manager.repartition();
        Long finalEdgeCut = manager.getEdgeCut();
        System.out.println("Edge cut before: " + initialEdgeCut + ", after: " + finalEdgeCut);
    }

    private Map<Long, Set<Long>> getFirst300Lines() {
        Map<Long, Set<Long>> m = new HashMap<Long, Set<Long>>();
        m.put(0L, initSet(384L, 257L, 134L, 135L, 200L, 905L, 138L, 844L, 145L, 81L, 658L, 914L, 281L, 476L, 605L, 543L, 800L, 737L, 551L, 620L, 109L, 942L, 302L, 820L, 185L, 701L, 765L));
        m.put(1L, initSet(832L, 5L, 647L, 523L, 207L, 595L, 723L, 920L, 90L, 670L, 671L, 799L, 98L, 164L, 422L, 809L, 937L, 490L, 491L, 364L, 52L, 245L, 187L, 317L, 190L));
        m.put(2L, initSet(896L, 417L, 579L, 708L, 840L, 970L, 268L, 112L, 464L, 529L, 594L, 308L, 117L, 344L, 763L, 414L, 446L, 95L));
        m.put(3L, initSet(192L, 256L, 515L, 76L, 910L, 718L, 783L, 849L, 530L, 725L, 405L, 790L, 535L, 859L, 799L, 687L, 947L, 629L, 440L, 376L, 954L, 59L, 315L, 892L, 573L, 445L, 765L, 63L));
        m.put(4L, initSet(341L, 919L, 423L, 215L, 824L, 360L, 232L, 59L, 701L, 894L));
        m.put(5L, initSet(704L, 960L, 705L, 709L, 902L, 907L, 204L, 653L, 718L, 337L, 530L, 20L, 597L, 793L, 414L, 351L, 162L, 930L, 485L, 425L, 490L, 491L, 428L, 630L, 951L, 887L, 888L, 697L, 443L, 828L, 318L, 510L, 894L, 447L));
        m.put(6L, initSet(291L, 483L, 611L, 326L, 263L, 327L, 424L, 938L, 717L, 365L, 433L, 690L, 629L, 150L, 438L, 248L, 700L, 733L));
        m.put(7L, initSet(769L, 390L, 8L, 10L, 650L, 395L, 13L, 910L, 273L, 787L, 406L, 791L, 536L, 152L, 157L, 929L, 548L, 165L, 807L, 682L, 689L, 177L, 178L, 819L, 820L, 53L, 822L, 567L, 697L, 571L, 828L, 61L, 319L, 67L, 838L, 966L, 71L, 968L, 456L, 970L, 76L, 718L, 80L, 81L, 851L, 726L, 473L, 222L, 991L, 353L, 226L, 227L, 489L, 363L, 750L, 239L, 752L, 627L, 885L, 252L, 255L));
        m.put(8L, initSet(643L, 837L, 966L, 906L, 650L, 523L, 395L, 460L, 462L, 337L, 787L, 724L, 477L, 413L, 160L, 96L, 353L, 929L, 100L, 804L, 41L, 426L, 491L, 686L, 46L, 368L, 945L, 753L, 433L, 243L, 694L, 828L, 381L));
        m.put(9L, initSet(200L, 906L, 78L, 850L, 147L, 660L, 661L, 854L, 986L, 475L, 476L, 996L, 293L, 166L, 807L, 999L, 424L, 554L, 939L, 173L, 242L, 691L, 243L, 885L, 246L, 566L, 956L));
        m.put(10L, initSet(545L, 817L, 674L, 178L, 614L, 406L, 666L, 347L, 620L, 222L, 767L));
        m.put(11L, initSet(768L, 192L, 897L, 321L, 258L, 709L, 967L, 200L, 265L, 201L, 457L, 334L, 144L, 400L, 656L, 850L, 723L, 88L, 984L, 603L, 94L, 160L, 230L, 811L, 748L, 432L, 496L, 177L, 113L, 753L, 498L, 693L, 501L, 631L, 951L, 57L, 507L, 892L, 253L, 830L, 702L));
        m.put(12L, initSet(929L, 866L, 738L, 387L, 643L, 677L, 966L, 520L, 13L, 624L, 881L, 819L, 472L, 697L));
        m.put(13L, initSet(192L, 835L, 260L, 134L, 840L, 456L, 844L, 81L, 786L, 723L, 988L, 543L, 415L, 866L, 483L, 932L, 743L, 233L, 364L, 46L, 436L, 52L, 692L, 373L, 824L, 443L, 575L));
        m.put(14L, initSet(353L, 865L, 162L, 738L, 421L, 230L, 360L, 523L, 620L, 493L, 559L, 406L, 988L, 478L));
        m.put(15L, Collections.<Long>emptySet());
        m.put(16L, initSet(391L, 263L, 648L, 136L, 905L, 777L, 522L, 652L, 785L, 669L, 799L, 544L, 416L, 928L, 419L, 291L, 164L, 804L, 678L, 422L, 936L, 681L, 42L, 171L, 684L, 300L, 173L, 942L, 48L, 690L, 694L, 954L, 826L, 578L, 708L, 710L, 967L, 973L, 206L, 210L, 853L, 344L, 476L, 735L, 867L, 996L, 613L, 233L, 234L, 365L, 242L, 246L, 763L, 892L));
        m.put(17L, initSet(256L, 545L, 993L, 994L, 323L, 325L, 709L, 455L, 392L, 620L, 429L, 877L, 335L, 85L, 631L, 985L, 538L, 506L, 155L, 637L));
        m.put(18L, Collections.<Long>emptySet());
        m.put(19L, initSet(747L, 139L, 108L, 173L, 109L, 464L, 401L, 920L, 666L, 122L, 507L, 444L, 605L, 189L, 701L, 222L));
        m.put(20L, initSet(961L, 72L, 136L, 680L, 682L, 139L, 941L, 302L, 590L, 275L, 468L, 52L, 341L, 759L, 536L, 120L, 152L, 125L, 894L, 799L));
        m.put(21L, initSet(176L, 481L, 35L, 280L, 476L, 926L, 415L, 847L, 367L));
        m.put(22L, initSet(321L, 242L, 579L, 692L, 709L, 904L, 56L, 200L, 574L, 671L, 799L));
        m.put(23L, initSet(192L, 515L, 259L, 516L, 133L, 773L, 581L, 391L, 904L, 76L, 782L, 335L, 464L, 528L, 81L, 658L, 914L, 915L, 980L, 983L, 856L, 733L, 227L, 424L, 298L, 811L, 172L, 941L, 561L, 690L, 308L, 821L, 885L, 53L, 694L, 249L, 57L, 378L, 507L, 187L, 572L, 508L, 253L));
        m.put(24L, initSet(835L, 804L, 677L, 966L, 873L, 43L, 588L, 207L, 368L, 369L, 433L, 52L, 533L, 790L, 567L));
        m.put(25L, initSet(72L, 778L, 397L, 658L, 915L, 659L, 983L, 347L, 475L, 988L, 222L, 674L, 930L, 99L, 615L, 104L, 616L, 234L, 299L, 939L, 173L, 877L, 304L, 245L, 309L, 951L, 56L, 826L, 445L, 893L));
        m.put(26L, initSet(130L, 162L, 355L, 875L, 812L, 236L, 797L, 383L, 655L));
        m.put(27L, initSet(64L, 832L, 355L, 772L, 333L, 913L, 498L, 85L, 373L, 790L, 538L, 348L, 893L));
        m.put(28L, initSet(993L, 579L, 163L, 675L, 644L, 804L, 773L, 933L, 485L, 262L, 327L, 392L, 42L, 881L, 499L, 276L, 789L, 150L, 380L, 30L));
        m.put(29L, initSet(544L, 896L, 611L, 807L, 359L, 777L, 169L, 463L, 912L, 561L, 787L, 979L, 212L, 280L, 313L, 475L, 863L, 543L, 383L));
        m.put(30L, initSet(644L, 581L, 262L, 458L, 618L, 234L, 908L, 399L, 785L, 433L, 113L, 753L, 917L, 181L, 535L, 471L, 347L, 735L));
        m.put(31L, Collections.<Long>emptySet());
        m.put(32L, Collections.<Long>emptySet());
        m.put(33L, initSet(608L, 673L, 387L, 643L, 516L, 260L, 487L, 426L, 748L, 877L, 431L, 592L, 464L, 881L, 434L, 147L, 692L, 380L, 988L, 892L));
        m.put(34L, initSet(803L, 118L, 150L, 406L, 364L, 862L, 910L, 207L));
        m.put(35L, initSet(581L, 134L, 651L, 844L, 974L, 207L, 210L, 341L, 726L, 88L, 666L, 795L, 219L, 989L, 541L, 996L, 297L, 745L, 620L, 45L, 302L, 46L, 174L, 815L, 367L, 754L, 246L, 954L, 315L, 60L));
        m.put(36L, Collections.<Long>emptySet());
        m.put(37L, initSet(832L, 529L, 777L, 75L, 843L, 109L, 621L, 478L));
        m.put(38L, Collections.<Long>emptySet());
        m.put(39L, initSet(785L, 246L, 968L, 682L, 445L));
        m.put(40L, initSet(898L, 227L, 516L, 612L, 902L, 906L, 45L, 686L, 367L, 496L, 755L, 821L, 54L, 856L, 666L, 60L, 989L, 318L, 926L));
        m.put(41L, initSet(421L, 677L, 102L, 809L, 329L, 425L, 588L, 204L, 493L, 877L, 974L, 849L, 145L, 573L, 799L));
        m.put(42L, initSet(832L, 899L, 388L, 326L, 71L, 73L, 336L, 723L, 980L, 340L, 535L, 471L, 921L, 281L, 410L, 346L, 669L, 163L, 675L, 164L, 934L, 433L, 882L, 309L, 693L, 439L, 56L, 825L, 378L, 956L, 828L));
        m.put(43L, initSet(835L, 70L, 711L, 78L, 977L, 786L, 915L, 467L, 595L, 660L, 213L, 726L, 217L, 220L, 733L, 98L, 674L, 100L, 746L, 495L, 819L, 500L, 117L, 502L, 631L, 567L, 504L, 127L));
        m.put(44L, Collections.<Long>emptySet());
        m.put(45L, initSet(450L, 530L, 499L, 581L, 213L, 54L, 856L, 153L, 780L, 236L, 541L));
        m.put(46L, initSet(450L, 643L, 963L, 903L, 648L, 456L, 777L, 206L, 785L, 658L, 978L, 660L, 916L, 85L, 858L, 284L, 224L, 866L, 294L, 295L, 872L, 875L, 631L, 439L, 760L, 185L, 123L, 253L));
        m.put(47L, initSet(512L, 516L, 133L, 904L, 906L, 145L, 785L, 658L, 277L, 151L, 154L, 412L, 291L, 675L, 549L, 679L, 682L, 300L, 173L, 941L, 432L, 308L, 820L, 313L, 826L, 60L, 188L, 700L, 573L, 702L, 190L, 320L, 450L, 579L, 69L, 840L, 457L, 460L, 717L, 463L, 464L, 338L, 735L, 992L, 354L, 483L, 486L, 742L, 365L, 750L, 499L, 627L, 630L, 887L, 508L, 125L));
        m.put(48L, initSet(832L, 257L, 644L, 196L, 516L, 327L, 392L, 713L, 75L, 779L, 653L, 399L, 591L, 592L, 658L, 914L, 403L, 792L, 344L, 346L, 411L, 926L, 734L, 288L, 97L, 290L, 933L, 422L, 103L, 302L, 691L, 758L, 951L, 121L, 633L, 446L, 447L));
        m.put(49L, initSet(324L, 581L, 902L, 71L, 327L, 392L, 265L, 778L, 779L, 910L, 974L, 783L, 464L, 148L, 215L, 920L, 601L, 155L, 539L, 411L, 412L, 736L, 294L, 551L, 103L, 744L, 298L, 618L, 242L, 629L, 247L));
        m.put(50L, Collections.<Long>emptySet());
        m.put(51L, initSet(837L, 806L, 791L, 199L, 376L, 508L, 573L, 862L, 510L));
        m.put(52L, initSet(832L, 387L, 588L, 911L, 143L, 849L, 785L, 84L, 597L, 405L, 919L, 988L, 351L, 676L, 807L, 809L, 620L, 751L, 691L, 823L, 442L, 187L, 445L, 767L, 447L));
        m.put(53L, initSet(130L, 162L, 291L, 804L, 232L, 713L, 394L, 300L, 268L, 717L, 237L, 303L, 145L, 81L, 564L, 181L, 856L, 601L, 766L));
        m.put(54L, initSet(450L, 210L, 371L, 773L, 949L, 541L, 317L, 910L));
        m.put(55L, Collections.<Long>emptySet());
        m.put(56L, initSet(516L, 517L, 741L, 904L, 424L, 298L, 843L, 268L, 878L, 593L, 597L, 566L, 726L, 536L, 412L, 828L, 764L, 252L, 61L, 542L));
        m.put(57L, initSet(704L, 321L, 453L, 711L, 713L, 971L, 974L, 271L, 79L, 655L, 785L, 853L, 981L, 214L, 157L, 799L, 864L, 929L, 677L, 746L, 237L, 945L, 242L, 563L, 819L, 885L, 955L, 252L, 893L, 253L, 830L, 383L));
        m.put(58L, initSet(496L, 324L, 538L));
        m.put(59L, initSet(832L, 580L, 680L, 553L, 266L, 365L, 974L, 590L, 336L, 592L, 177L, 405L, 406L, 407L, 759L, 412L, 94L, 319L, 351L));
        m.put(60L, initSet(961L, 770L, 67L, 325L, 965L, 170L, 236L, 496L, 80L, 81L, 950L, 407L, 919L, 439L, 88L, 954L, 922L, 507L, 670L));
        m.put(61L, initSet(134L, 519L, 551L, 807L, 327L, 681L, 812L, 717L, 306L, 564L, 533L, 629L, 407L, 120L, 539L, 188L, 700L, 125L, 126L));
        m.put(62L, initSet(896L, 228L, 421L, 790L, 169L, 154L, 716L, 573L, 862L, 383L));
        m.put(63L, initSet(65L, 257L, 260L, 773L, 902L, 967L, 72L, 457L, 906L, 653L, 334L, 595L, 85L, 406L, 151L, 919L, 792L, 920L, 476L, 541L, 542L, 414L, 96L, 865L, 993L, 546L, 549L, 486L, 232L, 425L, 298L, 621L, 627L, 499L, 309L, 631L, 696L, 633L, 699L));
        m.put(64L, initSet(993L, 802L, 997L, 967L, 75L, 620L, 236L, 403L, 756L, 84L, 789L, 598L, 470L, 664L, 984L, 346L, 890L, 860L, 637L, 893L, 959L));
        m.put(65L, initSet(640L, 771L, 133L, 905L, 523L, 397L, 399L, 529L, 918L, 920L, 157L, 673L, 547L, 807L, 553L, 554L, 939L, 177L, 949L, 438L, 187L, 958L, 963L, 584L, 75L, 461L, 973L, 590L, 81L, 850L, 852L, 85L, 215L, 344L, 472L, 90L, 475L, 733L, 222L, 734L, 606L, 991L, 226L, 106L, 875L, 364L, 494L, 495L, 753L, 242L, 627L, 500L, 117L, 245L, 123L, 893L));
        m.put(66L, Collections.<Long>emptySet());
        m.put(67L, initSet(480L, 162L, 867L, 327L, 264L, 520L, 651L, 971L, 812L, 271L, 658L, 252L, 414L));
        m.put(68L, Collections.<Long>emptySet());
        m.put(69L, initSet(258L, 324L, 70L, 327L, 204L, 273L, 785L, 789L, 981L, 919L, 792L, 733L, 478L, 863L, 991L, 611L, 358L, 871L, 106L, 171L, 563L, 117L, 631L, 827L, 380L));
        m.put(70L, initSet(358L, 360L, 457L, 906L, 204L, 460L, 494L, 462L, 975L, 912L, 498L, 693L, 149L, 343L, 215L, 503L, 856L, 792L, 858L, 699L));
        m.put(71L, initSet(651L, 779L, 461L, 464L, 600L, 281L, 547L, 227L, 932L, 164L, 614L, 871L, 103L, 298L, 618L, 620L, 236L, 941L, 750L, 751L, 434L, 306L, 819L, 246L, 697L, 378L, 957L, 126L, 255L));
        m.put(72L, initSet(130L, 583L, 969L, 906L, 523L, 852L, 85L, 601L, 665L, 475L, 988L, 222L, 414L, 867L, 292L, 616L, 424L, 681L, 235L, 364L, 812L, 690L, 500L, 949L, 246L, 824L, 252L, 893L));
        m.put(73L, initSet(915L, 164L, 565L, 934L, 710L, 904L, 298L, 748L));
        m.put(74L, initSet(960L, 738L, 485L, 823L, 327L, 871L, 919L, 680L, 329L, 874L, 445L, 447L));
        m.put(75L, initSet(258L, 195L, 325L, 583L, 204L, 784L, 977L, 149L, 405L, 599L, 151L, 919L, 414L, 96L, 865L, 292L, 676L, 294L, 998L, 999L, 871L, 616L, 872L, 232L, 745L, 363L, 621L, 877L, 429L, 493L, 878L, 123L, 380L, 445L, 318L));
        m.put(76L, initSet(515L, 651L, 269L, 658L, 723L, 851L, 347L, 923L, 288L, 227L, 420L, 932L, 871L, 234L, 107L, 684L, 236L, 173L, 431L, 496L, 752L, 243L, 821L, 631L, 376L, 826L, 827L, 445L, 830L));
        m.put(77L, Collections.<Long>emptySet());
        m.put(78L, initSet(977L, 850L, 595L, 147L, 500L, 982L, 119L, 696L, 380L, 877L, 878L));
        m.put(79L, initSet(704L, 258L, 834L, 98L, 709L, 871L, 875L, 975L, 978L, 915L, 916L, 693L, 858L, 189L));
        m.put(80L, initSet(576L, 832L, 417L, 866L, 674L, 738L, 323L, 483L, 997L, 165L, 294L, 333L, 845L, 143L, 431L, 726L, 279L, 759L, 567L, 122L, 571L, 381L, 478L, 959L));
        m.put(81L, initSet(384L, 579L, 965L, 327L, 969L, 329L, 713L, 842L, 779L, 715L, 653L, 398L, 975L, 784L, 529L, 786L, 467L, 725L, 856L, 348L, 988L, 157L, 989L, 798L, 94L, 478L, 671L, 95L, 288L, 417L, 611L, 420L, 807L, 427L, 875L, 684L, 431L, 175L, 303L, 752L, 694L, 758L, 951L, 887L, 954L, 892L, 895L));
        m.put(82L, Collections.<Long>emptySet());
        m.put(83L, Collections.<Long>emptySet());
        m.put(84L, initSet(387L, 772L, 196L, 260L, 582L, 966L, 903L, 394L, 588L, 143L, 528L, 595L, 852L, 85L, 533L, 280L, 283L, 288L, 993L, 738L, 675L, 483L, 298L, 686L, 113L, 433L, 562L, 694L, 504L, 506L, 188L));
        m.put(85L, initSet(195L, 646L, 269L, 207L, 913L, 402L, 790L, 151L, 599L, 984L, 988L, 477L, 542L, 866L, 676L, 807L, 104L, 745L, 554L, 247L, 185L, 889L, 890L, 506L, 188L, 958L));
        m.put(86L, initSet(769L, 457L, 969L, 138L, 779L, 909L, 718L, 656L, 592L, 277L, 152L, 665L, 670L, 98L, 875L, 173L, 495L, 560L, 690L, 499L, 565L, 187L, 956L, 574L, 766L));
        m.put(87L, initSet(609L, 162L, 662L, 182L, 951L, 887L, 728L, 457L, 699L, 782L, 463L, 863L));
        m.put(88L, initSet(576L, 264L, 648L, 777L, 713L, 651L, 335L, 785L, 981L, 150L, 600L, 664L, 792L, 793L, 991L, 288L, 160L, 353L, 609L, 745L, 812L, 174L, 302L, 431L, 182L, 887L, 188L, 575L));
        m.put(89L, initSet(704L, 321L, 353L, 130L, 162L, 930L, 452L, 709L, 711L, 785L, 113L, 117L, 344L, 858L, 540L, 669L, 510L));
        m.put(90L, initSet(930L, 162L, 164L, 294L, 647L, 847L, 530L, 373L, 885L, 822L, 247L, 344L, 409L, 410L, 125L, 669L, 158L, 863L, 799L, 383L));
        m.put(91L, Collections.<Long>emptySet());
        m.put(92L, initSet(704L, 752L, 337L, 226L, 717L, 207L));
        m.put(93L, initSet(273L, 753L, 309L, 264L, 686L));
        m.put(94L, initSet(896L, 898L, 711L, 265L, 718L, 916L, 213L, 534L, 475L, 671L, 96L, 803L, 611L, 676L, 998L, 167L, 232L, 490L, 621L, 493L, 238L, 302L, 367L, 304L, 561L, 374L, 760L, 248L, 824L, 573L, 894L));
        m.put(95L, initSet(708L, 773L, 842L, 334L, 271L, 399L, 594L, 787L, 979L, 595L, 213L, 599L, 281L, 153L, 476L, 477L, 414L, 222L, 419L, 996L, 485L, 487L, 297L, 299L, 939L, 364L, 429L, 879L, 177L, 308L, 629L, 246L, 374L, 631L, 824L));
        m.put(96L, initSet(257L, 258L, 899L, 579L, 902L, 903L, 904L, 523L, 972L, 656L, 336L, 213L, 662L, 921L, 410L, 220L, 925L, 98L, 741L, 358L, 486L, 998L, 106L, 298L, 493L, 495L, 559L, 496L, 177L, 369L, 562L, 499L, 565L, 634L, 958L, 574L));
        m.put(97L, initSet(162L, 674L, 611L, 516L, 804L, 169L, 138L, 396L, 207L, 272L, 307L, 564L, 852L, 184L, 634L, 442L, 507L));
        m.put(98L, initSet(704L, 579L, 806L, 106L, 875L, 972L, 304L, 913L, 531L, 117L, 726L, 313L, 634L, 574L, 511L));
        m.put(99L, initSet(416L, 516L, 740L, 325L, 614L, 454L, 583L, 969L, 682L, 811L, 304L, 243L, 980L, 181L, 950L, 983L, 957L, 798L, 318L));
        m.put(100L, initSet(322L, 834L, 132L, 775L, 903L, 457L, 588L, 462L, 975L, 785L, 915L, 149L, 344L, 925L, 478L, 160L, 162L, 674L, 358L, 495L, 309L, 507L, 189L, 830L, 702L, 894L));
        m.put(101L, initSet(944L, 785L, 930L, 659L, 235L, 302L, 495L));
        m.put(102L, initSet(258L, 708L, 900L, 709L, 327L, 455L, 520L, 584L, 136L, 265L, 329L, 842L, 271L, 849L, 146L, 979L, 915L, 597L, 726L, 343L, 919L, 284L, 543L, 864L, 164L, 678L, 807L, 296L, 872L, 233L, 618L, 364L, 429L, 493L, 687L, 693L, 890L, 123L, 315L, 575L));
        m.put(103L, initSet(961L, 739L, 665L, 713L, 634L, 682L, 539L, 268L));
        m.put(104L, initSet(416L, 992L, 546L, 397L, 173L, 590L, 147L, 853L, 885L, 245L, 823L, 599L, 119L, 631L, 222L));
        m.put(105L, initSet(416L, 704L, 170L, 620L, 817L, 434L, 308L, 280L, 857L, 921L, 444L, 988L, 286L));
        m.put(106L, initSet(640L, 835L, 387L, 581L, 709L, 902L, 204L, 272L, 978L, 916L, 788L, 664L, 860L, 988L, 285L, 543L, 864L, 353L, 929L, 162L, 802L, 881L, 118L, 439L, 504L, 252L));
        m.put(107L, initSet(551L, 264L, 539L, 443L, 670L, 174L, 830L, 271L));
        m.put(108L, initSet(384L, 548L, 843L, 464L, 401L, 722L, 885L, 566L, 438L, 470L, 318L, 926L, 478L));
        m.put(109L, initSet(288L, 912L, 176L, 353L, 294L, 970L, 843L));
        m.put(110L, Collections.<Long>emptySet());
        m.put(111L, Collections.<Long>emptySet());
        m.put(112L, initSet(930L, 579L, 164L, 840L, 777L, 171L, 843L, 908L, 429L, 399L, 145L, 433L, 753L, 786L, 436L, 726L, 281L, 346L, 826L, 414L));
        m.put(113L, initSet(647L, 263L, 655L, 530L, 723L, 659L, 214L, 921L, 410L, 347L, 221L, 158L, 414L, 799L, 484L, 741L, 166L, 619L, 429L, 749L, 237L, 302L, 309L, 885L, 636L, 959L));
        m.put(114L, Collections.<Long>emptySet());
        m.put(115L, Collections.<Long>emptySet());
        m.put(116L, initSet(544L, 577L, 258L, 324L, 485L, 905L, 233L, 457L, 713L, 522L, 467L, 789L, 534L, 951L, 471L, 376L, 314L, 763L, 414L));
        m.put(117L, initSet(864L, 513L, 136L, 936L, 139L, 749L, 494L, 176L, 177L, 882L, 693L, 373L, 181L, 566L, 758L, 760L, 219L, 157L));
        m.put(118L, initSet(128L, 356L, 199L, 938L, 363L, 971L, 684L, 463L, 656L, 785L, 947L, 790L, 214L, 982L, 478L));
        m.put(119L, initSet(136L, 986L, 907L, 300L, 204L));
        m.put(120L, initSet(817L, 259L, 597L, 461L, 190L, 750L, 751L, 255L));
        m.put(121L, initSet(737L, 993L, 708L, 933L, 359L, 905L, 522L, 429L, 367L, 785L, 145L, 530L, 373L, 342L, 951L, 890L, 414L));
        m.put(122L, initSet(176L, 722L, 482L, 900L, 837L, 373L, 793L, 411L, 796L, 621L));
        m.put(123L, initSet(773L, 966L, 584L, 907L, 524L, 910L, 597L, 983L, 535L, 216L, 280L, 217L, 986L, 412L, 476L, 988L, 227L, 676L, 618L, 491L, 877L, 429L, 753L, 246L, 311L, 315L, 318L, 447L));
        m.put(124L, Collections.<Long>emptySet());
        m.put(125L, initSet(512L, 769L, 838L, 710L, 615L, 329L, 233L, 425L, 779L, 843L, 172L, 270L, 814L, 560L, 564L, 277L, 629L, 473L, 603L, 539L, 700L, 317L, 190L));
        m.put(126L, initSet(193L, 897L, 196L, 520L, 265L, 783L, 208L, 915L, 791L, 859L, 476L, 735L, 415L, 671L, 482L, 228L, 164L, 934L, 551L, 935L, 618L, 938L, 170L, 364L, 561L, 501L, 758L, 443L, 316L, 381L, 189L, 767L, 255L));
        m.put(127L, initSet(785L, 835L, 387L, 533L, 567L, 439L, 824L, 604L, 396L));
        m.put(128L, initSet(561L, 611L, 293L, 999L, 791L, 904L, 201L, 665L, 619L, 604L, 510L, 959L));
        m.put(129L, Collections.<Long>emptySet());
        m.put(130L, initSet(800L, 227L, 681L, 330L, 971L, 236L, 145L, 785L, 211L, 885L, 951L, 344L, 827L, 766L));
        m.put(131L, Collections.<Long>emptySet());
        m.put(132L, initSet(353L, 835L, 678L, 486L, 903L, 296L, 905L, 429L, 494L, 785L, 754L, 339L, 726L, 503L, 314L, 890L, 699L));
        m.put(133L, initSet(258L, 194L, 837L, 709L, 454L, 647L, 334L, 336L, 210L, 787L, 916L, 919L, 858L, 860L, 416L, 864L, 612L, 294L, 747L, 304L, 562L, 690L, 950L, 378L, 573L));
        m.put(134L, initSet(932L, 484L, 582L, 726L, 575L, 207L, 639L));
        m.put(135L, initSet(288L, 644L, 932L, 678L, 807L, 648L, 200L, 457L, 171L, 524L, 493L, 399L, 273L, 403L, 723L, 311L, 894L, 670L));
        m.put(136L, initSet(768L, 193L, 581L, 709L, 518L, 264L, 717L, 909L, 974L, 975L, 464L, 978L, 146L, 850L, 852L, 981L, 405L, 790L, 665L, 475L, 347L, 348L, 925L, 862L, 417L, 162L, 614L, 167L, 616L, 169L, 620L, 752L, 560L, 562L, 306L, 820L, 181L, 251L, 573L, 767L, 447L));
        m.put(137L, initSet(416L, 928L, 740L, 725L, 342L, 652L, 684L, 221L, 493L));
        m.put(138L, initSet(769L, 290L, 162L, 611L, 139L, 941L, 461L, 654L, 174L, 373L, 185L, 697L, 730L, 219L, 380L));
        m.put(139L, initSet(739L, 867L, 424L, 329L, 970L, 938L, 941L, 814L, 175L, 335L, 245L, 309L, 406L, 214L, 793L, 411L, 924L, 734L, 766L, 543L));
        m.put(140L, Collections.<Long>emptySet());
        m.put(141L, Collections.<Long>emptySet());
        m.put(142L, Collections.<Long>emptySet());
        m.put(143L, initSet(866L, 674L, 260L, 533L, 520L, 472L, 442L, 555L, 396L));
        m.put(144L, initSet(643L, 693L, 709L, 871L, 648L, 842L, 875L, 925L, 717L));
        m.put(145L, initSet(258L, 708L, 900L, 199L, 327L, 777L, 330L, 843L, 206L, 975L, 786L, 787L, 789L, 151L, 215L, 344L, 158L, 735L, 607L, 737L, 993L, 164L, 741L, 485L, 998L, 426L, 364L, 493L, 561L, 885L, 951L, 824L, 447L));
        m.put(146L, initSet(416L, 900L, 907L, 429L, 365L, 399L, 335L, 432L, 785L, 434L, 852L, 982L, 150L, 823L, 215L, 216L, 792L, 761L, 542L, 735L));
        m.put(147L, initSet(595L, 691L, 854L, 696L, 905L, 969L, 988L, 508L, 397L, 429L));
        m.put(148L, initSet(449L, 290L, 450L, 516L, 298L, 938L, 332L, 620L, 624L, 592L, 913L, 370L, 531L));
        m.put(149L, initSet(832L, 837L, 327L, 777L, 269L, 654L, 782L, 462L, 336L, 914L, 725L, 600L, 793L, 219L, 411L, 353L, 165L, 742L, 746L, 236L, 749L, 175L, 754L, 627L, 628L, 247L, 440L, 701L, 894L));
        m.put(150L, initSet(257L, 196L, 900L, 902L, 263L, 457L, 778L, 843L, 399L, 335L, 786L, 598L, 345L, 346L, 604L, 478L, 227L, 675L, 483L, 421L, 486L, 807L, 999L, 680L, 234L, 428L, 749L, 237L, 561L, 756L, 885L, 949L, 248L, 888L, 313L, 249L, 959L, 383L));
        m.put(151L, initSet(865L, 930L, 787L, 691L, 676L, 852L, 660L, 199L, 999L, 424L, 344L, 331L));
        m.put(152L, initSet(257L, 354L, 517L, 392L, 618L, 298L, 429L, 237L, 303L, 464L, 757L, 311L, 504L, 603L, 766L, 255L));
        m.put(153L, initSet(673L, 610L, 917L, 341L, 374L, 235L, 317L, 847L, 367L));
        m.put(154L, initSet(528L, 705L, 629L, 422L, 475L, 572L, 716L, 508L));
        m.put(155L, initSet(967L, 761L, 316L, 333L));
        m.put(156L, Collections.<Long>emptySet());
        m.put(157L, initSet(294L, 807L, 327L, 616L, 648L, 936L, 906L, 970L, 203L, 524L, 588L, 367L, 177L, 562L, 498L, 916L, 693L, 664L, 958L));
        m.put(158L, initSet(324L, 164L, 933L, 870L, 648L, 169L, 331L, 971L, 684L, 493L, 273L, 212L, 309L, 502L, 279L, 824L, 827L, 989L, 799L, 191L));
        m.put(159L, Collections.<Long>emptySet());
        m.put(160L, initSet(545L, 325L, 997L, 549L, 309L, 470L, 311L, 984L, 346L, 907L, 236L, 204L));
        m.put(161L, Collections.<Long>emptySet());
        m.put(162L, initSet(705L, 195L, 453L, 903L, 327L, 264L, 971L, 846L, 847L, 785L, 850L, 601L, 793L, 537L, 539L, 285L, 863L, 543L, 739L, 870L, 296L, 425L, 618L, 621L, 686L, 949L, 311L, 951L, 823L, 759L, 824L, 443L, 703L));
        m.put(163L, initSet(722L, 804L, 708L, 263L, 327L, 843L, 735L, 895L));
        m.put(164L, initSet(512L, 648L, 904L, 778L, 523L, 717L, 399L, 656L, 213L, 341L, 537L, 346L, 411L, 414L, 670L, 481L, 612L, 996L, 293L, 678L, 166L, 425L, 681L, 298L, 172L, 236L, 364L, 941L, 302L, 176L, 690L, 499L, 187L, 828L, 956L, 188L, 380L, 511L));
        m.put(165L, initSet(961L, 258L, 802L, 906L, 363L, 463L, 431L, 207L, 368L, 881L, 503L, 699L, 571L, 507L, 287L));
        m.put(166L, initSet(704L, 321L, 322L, 584L, 717L, 461L, 782L, 400L, 981L, 410L, 284L, 670L, 671L, 799L, 547L, 422L, 298L, 941L, 177L, 503L, 828L, 764L, 830L, 383L, 511L));
        m.put(167L, initSet(867L, 677L, 293L, 584L, 298L, 974L, 558L, 335L, 820L, 790L, 854L, 407L, 792L, 762L, 412L, 573L, 959L, 767L));
        m.put(168L, initSet(929L, 545L, 353L, 482L, 387L, 902L, 840L, 912L, 914L, 595L, 692L, 438L, 791L, 695L, 189L, 701L, 863L));
        m.put(169L, initSet(258L, 450L, 965L, 391L, 199L, 777L, 969L, 715L, 271L, 981L, 534L, 854L, 471L, 280L, 472L, 414L, 608L, 224L, 737L, 417L, 806L, 811L, 493L, 566L, 822L, 247L, 376L, 824L, 317L, 573L, 383L));
        m.put(170L, initSet(480L, 755L, 308L, 983L, 393L, 921L, 281L, 234L, 651L, 507L));
        m.put(171L, initSet(993L, 450L, 610L, 835L, 611L, 612L, 616L, 426L, 271L, 273L, 850L, 308L, 919L, 951L, 632L, 346L, 890L, 414L, 830L, 863L));
        m.put(172L, initSet(482L, 354L, 804L, 682L, 879L, 591L, 176L, 595L, 213L, 469L, 280L, 476L, 766L));
        m.put(173L, initSet(837L, 519L, 234L, 780L, 273L, 689L, 627L, 308L, 885L, 726L, 954L, 507L, 475L, 988L, 348L));
        m.put(174L, initSet(658L, 851L, 533L, 935L, 281L, 699L, 255L));
        m.put(175L, initSet(336L, 529L, 417L, 465L, 566L, 694L, 391L, 443L, 621L));
        m.put(176L, initSet(288L, 673L, 194L, 610L, 868L, 427L, 780L, 493L, 847L, 788L, 213L, 349L, 189L, 318L));
        m.put(177L, initSet(640L, 259L, 900L, 902L, 647L, 524L, 397L, 911L, 785L, 915L, 918L, 790L, 411L, 669L, 925L, 543L, 425L, 554L, 433L, 309L, 573L, 958L, 960L, 322L, 459L, 843L, 717L, 718L, 975L, 591L, 464L, 337L, 593L, 850L, 215L, 986L, 219L, 351L, 992L, 480L, 996L, 871L, 616L, 360L, 490L, 491L, 495L, 752L, 369L, 885L, 629L, 759L, 504L, 251L, 255L));
        m.put(178L, initSet(304L, 674L, 787L, 324L, 837L, 950L, 378L, 666L, 347L, 444L, 222L, 319L));
        m.put(179L, Collections.<Long>emptySet());
        m.put(180L, Collections.<Long>emptySet());
        m.put(181L, initSet(576L, 513L, 258L, 515L, 771L, 388L, 197L, 774L, 391L, 969L, 268L, 207L, 912L, 722L, 530L, 853L, 926L, 414L, 991L, 928L, 416L, 353L, 739L, 804L, 934L, 809L, 617L, 363L, 427L, 876L, 246L, 758L, 248L, 636L, 574L, 766L));
        m.put(182L, initSet(723L, 486L, 699L, 431L, 463L));
        m.put(183L, initSet(945L, 865L, 725L, 887L, 507L));
        m.put(184L, initSet(929L, 961L, 753L, 387L, 692L, 694L, 439L, 217L));
        m.put(185L, initSet(898L, 482L, 327L, 296L, 974L, 563L, 723L, 373L, 726L, 919L, 855L, 954L, 541L, 414L));
        m.put(186L, Collections.<Long>emptySet());
        m.put(187L, initSet(258L, 515L, 904L, 906L, 715L, 653L, 974L, 590L, 784L, 528L, 337L, 787L, 533L, 213L, 662L, 471L, 407L, 664L, 863L, 288L, 929L, 930L, 740L, 744L, 363L, 752L, 881L, 691L, 628L, 884L, 246L, 631L, 247L, 376L, 827L, 573L, 957L));
        m.put(188L, initSet(864L, 961L, 324L, 516L, 933L, 902L, 582L, 710L, 425L, 394L, 682L, 203L, 843L, 461L, 718L, 496L, 560L, 499L, 564L, 277L, 697L, 507L, 380L, 252L));
        m.put(189L, initSet(393L, 524L, 974L, 464L, 785L, 529L, 465L, 213L, 470L, 407L, 919L, 281L, 539L, 540L, 798L, 415L, 353L, 548L, 613L, 807L, 296L, 562L, 887L, 247L, 701L, 383L));
        m.put(190L, initSet(832L, 513L, 705L, 296L, 456L, 490L, 618L, 938L, 941L, 750L, 399L, 337L, 593L, 306L, 468L, 629L, 920L, 380L, 766L));
        m.put(191L, initSet(530L, 658L, 615L, 951L, 956L, 894L, 543L, 847L));
        m.put(192L, initSet(896L, 258L, 260L, 517L, 266L, 396L, 530L, 914L, 915L, 664L, 410L, 922L, 796L, 671L, 288L, 416L, 417L, 674L, 547L, 676L, 293L, 561L, 819L, 692L, 566L, 697L, 827L, 317L, 702L, 832L, 710L, 584L, 969L, 204L, 846L, 207L, 592L, 730L, 604L, 862L, 999L, 744L, 491L, 752L, 496L, 242L, 758L, 631L, 248L));
        m.put(193L, initSet(516L, 820L, 228L, 837L, 790L, 232L, 475L, 862L));
        m.put(194L, initSet(450L, 499L, 726L, 317L));
        m.put(195L, initSet(641L, 257L, 258L, 260L, 709L, 422L, 294L, 906L, 653L, 464L, 402L, 820L, 373L, 405L, 374L, 407L, 823L, 920L, 697L, 799L));
        m.put(196L, initSet(483L, 884L, 757L, 535L, 394L, 826L, 669L, 766L, 895L));
        m.put(197L, initSet(929L, 993L, 930L, 564L, 902L, 695L, 270L, 991L));
        m.put(198L, Collections.<Long>emptySet());
        m.put(199L, initSet(777L, 330L, 207L, 273L, 786L, 662L, 344L, 346L, 798L, 414L, 543L, 928L, 804L, 678L, 232L, 937L, 938L, 234L, 300L, 365L, 753L, 627L, 308L, 313L, 249L, 826L, 382L, 959L));
        m.put(200L, initSet(741L, 295L, 551L, 264L, 296L, 651L, 972L, 812L, 844L, 753L, 914L, 754L, 340L, 407L, 281L, 443L, 316L));
        m.put(201L, initSet(356L, 676L, 293L, 681L, 779L, 684L, 334L, 208L, 242L, 854L, 791L, 888L, 248L, 665L, 475L, 572L, 508L, 510L, 574L));
        m.put(202L, Collections.<Long>emptySet());
        m.put(203L, initSet(513L, 737L, 355L, 387L, 900L, 401L, 465L, 913L, 947L, 725L, 918L, 694L, 758L, 344L, 793L, 506L, 507L));
        m.put(204L, initSet(449L, 325L, 903L, 456L, 332L, 462L, 338L, 789L, 662L, 599L, 983L, 791L, 472L, 984L, 538L, 796L, 605L, 542L, 414L, 224L, 353L, 418L, 674L, 355L, 230L, 429L, 877L, 944L, 369L, 753L, 370L, 627L, 373L, 631L, 887L, 504L, 508L, 703L));
        m.put(205L, Collections.<Long>emptySet());
        m.put(206L, initSet(483L, 611L, 644L, 489L, 842L, 555L, 363L, 748L, 877L, 462L, 753L, 598L, 735L));
        m.put(207L, initSet(900L, 838L, 327L, 266L, 973L, 910L, 590L, 462L, 464L, 723L, 853L, 597L, 854L, 599L, 727L, 344L, 409L, 863L, 415L, 930L, 483L, 676L, 490L, 555L, 811L, 876L, 620L, 558L, 945L, 819L, 245L, 694L, 443L, 573L, 957L, 510L));
        m.put(208L, initSet(897L, 804L, 517L, 741L, 647L, 521L, 554L, 298L, 877L, 432L, 592L, 624L, 692L, 634L, 956L, 860L, 799L));
        m.put(209L, Collections.<Long>emptySet());
        m.put(210L, initSet(610L, 773L, 855L, 297L, 906L, 842L, 235L, 236L, 349L, 926L, 830L));
        m.put(211L, initSet(484L, 870L, 824L, 362L, 220L, 893L));
        m.put(212L, initSet(928L, 993L, 708L, 773L, 331L, 429L, 271L, 979L, 342L, 726L, 346L, 543L, 799L));
        m.put(213L, initSet(450L, 324L, 454L, 519L, 524L, 913L, 467L, 982L, 855L, 664L, 409L, 923L, 670L, 478L, 928L, 417L, 933L, 550L, 616L, 681L, 883L, 693L, 629L, 632L, 313L));
        m.put(214L, initSet(321L, 265L, 332L, 845L, 464L, 785L, 914L, 664L, 920L, 344L, 409L, 218L, 348L, 733L, 670L, 478L, 746L, 236L, 877L, 495L, 752L, 496L, 498L, 691L, 947L, 693L, 507L, 956L, 893L));
        m.put(215L, initSet(714L, 588L, 271L, 912L, 400L, 978L, 787L, 916L, 340L, 341L, 405L, 598L, 536L, 281L, 284L, 540L, 799L, 736L, 674L, 293L, 741L, 422L, 807L, 871L, 425L, 298L, 811L, 493L, 367L, 243L, 568L, 504L, 761L, 442L, 445L, 830L, 958L, 447L));
        m.put(216L, initSet(673L, 292L, 807L, 969L, 464L, 915L, 691L, 885L, 982L, 823L, 983L, 570L, 986L));
        m.put(217L, initSet(738L, 307L, 835L, 627L, 965L, 456L, 442L));
        m.put(218L, initSet(323L, 995L, 646L, 726L, 279L, 890L, 300L, 860L, 972L, 861L));
        m.put(219L, initSet(358L, 582L, 775L, 871L, 711L, 296L, 872L, 681L, 271L, 402L, 693L, 533L, 730L, 476L, 415L, 255L));
        m.put(220L, initSet(658L, 484L, 870L, 951L, 616L, 936L, 281L, 793L, 314L, 524L, 671L));
        m.put(221L, initSet(928L, 900L, 680L, 937L, 780L, 909L, 785L, 627L, 276L, 855L, 504L, 569L, 798L, 895L));
        m.put(222L, initSet(865L, 546L, 260L, 583L, 967L, 234L, 658L, 755L, 691L, 660L, 566L, 247L, 921L, 475L, 988L, 508L, 798L, 958L));
        m.put(223L, Collections.<Long>emptySet());
        m.put(224L, initSet(433L, 866L, 786L, 611L, 965L, 824L, 650L, 426L, 283L, 846L));
        m.put(225L, Collections.<Long>emptySet());
        m.put(226L, initSet(993L, 693L, 326L, 695L, 456L, 426L, 684L, 716L, 317L, 669L));
        m.put(227L, initSet(260L, 517L, 581L, 453L, 967L, 778L, 524L, 910L, 783L, 464L, 784L, 915L, 598L, 414L, 545L, 482L, 930L, 744L, 362L, 875L, 235L, 367L, 495L, 496L, 947L, 629L, 504L, 315L, 827L, 252L, 253L));
        m.put(228L, initSet(676L, 421L, 518L, 681L, 779L, 363L, 619L, 942L, 590L, 399L, 464L, 916L, 407L, 665L, 475L, 828L, 765L, 606L));
        m.put(229L, initSet(835L, 533L, 555L, 395L));
        m.put(230L, initSet(273L, 449L, 353L, 258L, 507L, 702L, 463L));
        m.put(231L, Collections.<Long>emptySet());
        m.put(232L, initSet(320L, 640L, 580L, 837L, 262L, 263L, 717L, 718L, 276L, 852L, 598L, 854L, 662L, 790L, 471L, 280L, 738L, 678L, 358L, 360L, 432L, 688L, 309L, 885L, 826L, 701L, 574L));
        m.put(233L, initSet(579L, 933L, 392L, 840L, 617L, 271L, 562L, 502L, 247L, 920L, 314L, 826L, 989L, 317L));
        m.put(234L, initSet(545L, 674L, 483L, 324L, 390L, 843L, 747L, 464L, 658L, 914L, 786L, 562L, 598L, 246L, 440L, 312L, 345L));
        m.put(235L, initSet(864L, 578L, 930L, 788L, 581L, 885L, 619L, 236L, 237L, 349L, 893L, 894L));
        m.put(236L, initSet(800L, 484L, 773L, 742L, 777L, 681L, 298L, 812L, 877L, 815L, 624L, 530L, 658L, 726L, 599L, 471L, 600L, 252L, 670L, 415L));
        m.put(237L, initSet(930L, 875L, 268L, 684L, 461L, 718L, 335L, 847L, 947L, 564L, 852L, 951L, 665L, 697L, 314L, 893L, 414L, 383L));
        m.put(238L, initSet(768L, 752L, 643L, 916L, 860L, 271L));
        m.put(239L, initSet(752L, 433L, 977L, 882L, 787L, 949L, 456L, 409L, 443L, 751L));
        m.put(240L, Collections.<Long>emptySet());
        m.put(241L, Collections.<Long>emptySet());
        m.put(242L, initSet(544L, 674L, 387L, 611L, 420L, 517L, 744L, 937L, 715L, 363L, 941L, 431L, 496L, 246L, 534L, 734L));
        m.put(243L, initSet(577L, 417L, 420L, 709L, 902L, 906L, 490L, 875L, 717L, 273L, 337L, 882L, 372L, 503L, 504L, 826L, 443L, 316L, 828L, 670L));
        m.put(244L, initSet(273L, 412L, 318L));
        m.put(245L, initSet(865L, 545L, 642L, 296L, 745L, 426L, 939L, 588L, 717L, 399L, 624L, 977L, 881L, 691L, 373L, 986L, 412L, 670L, 318L));
        m.put(246L, initSet(896L, 773L, 969L, 715L, 652L, 845L, 658L, 338L, 403L, 982L, 790L, 406L, 983L, 792L, 923L, 867L, 550L, 807L, 487L, 304L, 817L, 755L, 500L, 309L, 631L, 440L, 504L, 249L, 954L, 702L, 319L, 959L));
        m.put(247L, initSet(320L, 963L, 867L, 421L, 583L, 840L, 616L, 843L, 299L, 939L, 270L, 335L, 528L, 912L, 660L, 885L, 406L, 412L, 508L, 510L));
        m.put(248L, initSet(896L, 422L, 680L, 619L, 364L, 429L, 432L, 881L, 786L, 406L, 376L, 347L, 412L, 862L, 543L));
        m.put(249L, initSet(516L, 324L, 837L, 871L, 647L, 749L, 367L, 335L, 276L, 852L, 439L, 440L, 441L, 345L));
        m.put(250L, Collections.<Long>emptySet());
        m.put(251L, initSet(688L, 258L, 580L, 405L, 697L, 874L, 315L, 621L, 925L, 493L));
        m.put(252L, initSet(353L, 450L, 867L, 516L, 424L, 814L, 335L, 467L, 981L, 629L, 438L, 634L, 411L, 893L, 894L, 510L, 543L));
        m.put(253L, initSet(864L, 674L, 711L, 296L, 681L, 336L, 434L, 562L, 439L, 921L, 286L, 830L, 958L));
        m.put(254L, Collections.<Long>emptySet());
        m.put(255L, initSet(769L, 290L, 804L, 677L, 838L, 710L, 264L, 809L, 523L, 620L, 271L, 591L, 593L, 562L, 819L, 597L, 373L, 438L, 920L, 412L, 476L, 670L, 830L, 831L));
        m.put(256L, initSet(932L, 757L, 551L, 761L, 318L, 975L));
        m.put(257L, initSet(421L, 807L, 823L, 603L, 620L, 476L, 333L, 493L, 302L, 894L, 607L));
        m.put(258L, initSet(321L, 834L, 900L, 840L, 906L, 782L, 398L, 462L, 911L, 912L, 784L, 914L, 850L, 787L, 660L, 858L, 284L, 348L, 669L, 925L, 992L, 738L, 809L, 746L, 493L, 752L, 562L, 949L, 373L, 631L, 952L, 827L, 955L, 699L, 958L));
        m.put(259L, initSet(817L, 306L, 629L, 391L, 713L, 601L, 634L, 700L, 461L, 814L, 751L));
        m.put(260L, initSet(416L, 450L, 644L, 965L, 520L, 778L, 620L, 562L, 627L, 692L, 597L, 406L, 534L, 537L, 283L, 989L, 445L, 318L, 543L));
        m.put(261L, initSet(480L, 641L, 963L, 600L, 730L));
        m.put(262L, initSet(928L, 800L, 722L, 291L, 579L, 949L, 824L, 330L, 331L, 347L, 302L, 798L));
        m.put(263L, initSet(928L, 769L, 865L, 677L, 433L, 273L, 786L, 725L, 791L, 728L, 733L, 702L, 959L, 703L, 991L));
        m.put(264L, initSet(417L, 834L, 643L, 775L, 714L, 812L, 717L, 942L, 978L, 693L, 373L, 599L, 951L, 281L, 730L, 539L, 671L, 383L));
        m.put(265L, initSet(640L, 864L, 963L, 932L, 422L, 807L, 871L, 904L, 360L, 616L, 842L, 875L, 941L, 975L, 792L, 281L, 409L, 603L, 827L, 284L, 828L));
        m.put(266L, initSet(993L, 934L, 807L, 617L, 365L, 367L));
        m.put(267L, Collections.<Long>emptySet());
        m.put(268L, initSet(384L, 592L, 513L, 737L, 468L, 613L, 885L, 438L, 843L, 717L, 366L, 542L));
        m.put(269L, initSet(723L, 730L, 651L, 671L));
        m.put(270L, initSet(930L, 595L, 900L, 677L, 934L, 553L, 603L, 991L));
        m.put(271L, initSet(480L, 321L, 417L, 709L, 422L, 327L, 905L, 393L, 875L, 493L, 782L, 367L, 467L, 502L, 856L, 760L, 281L, 314L, 573L, 671L, 575L));
        m.put(272L, initSet(369L, 483L, 727L));
        m.put(273L, initSet(674L, 611L, 905L, 364L, 493L, 622L, 912L, 339L, 787L, 627L, 309L, 342L, 311L, 344L, 281L, 669L, 381L, 894L, 318L, 319L, 767L));
        m.put(274L, Collections.<Long>emptySet());
        m.put(275L, initSet(800L, 993L, 691L, 597L, 759L, 988L, 701L, 799L));
        m.put(276L, initSet(785L, 312L, 777L, 842L, 798L));
        m.put(277L, initSet(354L, 450L, 676L, 327L, 713L, 618L, 682L, 364L, 461L, 463L, 819L, 467L, 629L, 694L, 345L, 665L, 601L, 700L, 510L));
        m.put(278L, Collections.<Long>emptySet());
        m.put(279L, initSet(992L, 784L, 656L, 944L, 353L, 870L, 470L, 935L, 631L, 648L, 344L, 827L));
        m.put(280L, initSet(770L, 901L, 837L, 838L, 968L, 456L, 777L, 843L, 716L, 973L, 717L, 846L, 464L, 722L, 533L, 726L, 920L, 921L, 346L, 730L, 795L, 412L, 605L, 288L, 928L, 864L, 482L, 803L, 611L, 677L, 613L, 294L, 934L, 871L, 489L, 363L, 620L, 365L, 815L, 624L, 373L, 826L, 572L, 446L, 895L));
        m.put(281L, initSet(737L, 579L, 326L, 422L, 327L, 745L, 653L, 975L, 751L, 337L, 627L, 373L, 949L, 567L, 824L, 954L, 284L, 476L, 892L, 893L, 478L, 318L));
        m.put(282L, initSet(304L, 545L, 914L, 826L, 941L));
        m.put(283L, initSet(785L, 738L, 692L, 965L, 597L, 743L, 873L, 442L, 811L, 396L));
        m.put(284L, initSet(416L, 480L, 327L, 711L, 935L, 296L, 616L, 681L, 654L, 978L, 916L, 343L, 669L, 925L, 670L, 478L, 830L, 671L));
        m.put(285L, initSet(947L, 693L, 807L, 951L, 471L, 330L, 395L, 364L, 335L, 655L, 799L));
        m.put(286L, initSet(308L, 598L, 615L, 871L, 857L, 681L, 826L, 988L, 318L));
        m.put(287L, initSet(416L, 433L, 804L, 724L, 934L, 520L, 456L, 472L, 585L, 489L, 555L));
        m.put(288L, initSet(576L, 513L, 324L, 644L, 391L, 969L, 652L, 336L, 914L, 920L, 415L, 928L, 992L, 866L, 484L, 804L, 550L, 807L, 681L, 617L, 553L, 493L, 496L, 754L, 627L, 820L, 373L, 631L, 887L, 443L, 957L));
        m.put(289L, Collections.<Long>emptySet());
        m.put(290L, initSet(615L, 713L, 682L, 539L, 814L, 766L));
        m.put(291L, initSet(579L, 483L, 677L, 710L, 906L, 811L, 652L, 365L, 398L, 784L, 725L, 630L, 345L, 669L));
        m.put(292L, initSet(627L, 915L, 660L, 676L, 599L, 504L, 409L, 969L, 907L));
        m.put(293L, initSet(705L, 611L, 742L, 808L, 942L, 656L, 753L, 403L, 694L, 792L, 376L, 665L, 574L));
        m.put(294L, initSet(704L, 832L, 513L, 774L, 902L, 713L, 714L, 842L, 653L, 398L, 399L, 975L, 784L, 464L, 915L, 467L, 532L, 726L, 920L, 793L, 409L, 733L, 605L, 478L, 674L, 930L, 420L, 868L, 360L, 937L, 363L, 684L, 752L, 624L, 947L, 822L, 826L, 443L, 317L, 765L, 318L));
        m.put(295L, initSet(658L, 723L, 851L, 582L, 935L, 651L, 476L, 654L, 942L, 670L, 575L));
        m.put(296L, initSet(900L, 519L, 778L, 656L, 785L, 658L, 915L, 788L, 533L, 919L, 409L, 669L, 670L, 543L, 932L, 933L, 551L, 681L, 939L, 684L, 944L, 563L, 947L, 826L, 827L, 701L, 318L, 579L, 581L, 584L, 713L, 330L, 971L, 467L, 851L, 981L, 856L, 730L, 606L, 484L, 870L, 871L, 360L, 490L, 364L, 627L, 373L, 630L, 381L, 510L));
        m.put(297L, initSet(481L, 898L, 298L, 780L, 302L));
        m.put(298L, initSet(898L, 516L, 324L, 837L, 581L, 838L, 843L, 716L, 972L, 845L, 334L, 528L, 592L, 464L, 340L, 790L, 726L, 795L, 347L, 349L, 992L, 993L, 867L, 484L, 678L, 808L, 361L, 618L, 363L, 619L, 942L, 563L, 371L, 499L, 692L, 374L, 631L, 889L, 890L, 573L, 317L, 893L, 447L));
        m.put(299L, initSet(416L, 595L, 915L, 852L, 660L, 566L, 616L, 988L, 508L, 590L));
        return m;
    }

    private Map<Long, Set<Long>> getRemainingLines() {
        Map<Long, Set<Long>> m = new HashMap<Long, Set<Long>>();
        m.put(300L, initSet(332L, 845L, 400L, 595L, 726L, 982L, 470L, 535L, 664L, 920L, 988L, 860L, 798L, 992L, 546L, 355L, 483L, 804L, 742L, 875L, 365L, 498L, 627L, 373L, 508L, 381L));
        m.put(301L, Collections.<Long>emptySet());
        m.put(302L, initSet(324L, 454L, 966L, 975L, 847L, 849L, 530L, 850L, 789L, 597L, 856L, 415L, 800L, 993L, 481L, 353L, 613L, 421L, 998L, 425L, 362L, 875L, 812L, 621L, 622L, 814L, 563L, 499L, 883L, 826L, 890L, 443L, 315L, 510L));
        m.put(303L, initSet(327L, 634L, 682L));
        m.put(304L, initSet(704L, 689L, 834L, 915L, 980L, 760L, 666L, 651L, 941L, 830L, 670L));
        m.put(305L, Collections.<Long>emptySet());
        m.put(306L, initSet(817L, 536L, 601L, 843L, 380L));
        m.put(307L, initSet(961L, 786L, 567L, 456L, 585L, 650L, 571L));
        m.put(308L, initSet(515L, 324L, 516L, 325L, 517L, 454L, 583L, 392L, 396L, 784L, 338L, 595L, 919L, 923L, 475L, 989L, 416L, 867L, 740L, 933L, 741L, 936L, 811L, 429L, 622L, 561L, 436L, 631L, 504L, 317L, 319L));
        m.put(309L, initSet(773L, 517L, 647L, 713L, 907L, 845L, 463L, 542L, 799L, 992L, 418L, 867L, 741L, 425L, 619L, 748L, 944L, 883L, 628L, 373L, 504L, 506L, 634L, 827L, 508L, 958L));
        m.put(310L, Collections.<Long>emptySet());
        m.put(311L, initSet(392L, 746L, 523L, 507L, 735L));
        m.put(312L, initSet(388L, 327L, 937L, 843L, 798L));
        m.put(313L, initSet(322L, 356L, 676L, 581L, 837L, 678L, 327L, 583L, 999L, 616L, 811L, 684L, 782L, 912L, 784L, 914L, 342L, 854L, 954L, 634L, 925L, 670L, 702L));
        m.put(314L, initSet(353L, 579L, 835L, 933L, 902L, 777L, 713L, 748L, 495L, 912L, 658L, 344L, 888L));
        m.put(315L, initSet(736L, 581L, 967L, 423L, 872L, 778L, 917L, 821L, 726L, 504L, 985L, 537L, 730L, 699L, 988L, 381L));
        m.put(316L, initSet(611L, 932L, 773L, 709L, 455L, 359L, 840L, 392L, 584L, 777L, 364L, 494L, 367L, 912L, 432L, 496L, 883L, 340L, 758L, 919L, 603L, 989L));
        m.put(317L, initSet(577L, 929L, 903L, 457L, 681L, 617L, 780L, 784L, 528L, 822L, 919L, 920L, 856L, 376L, 954L, 795L));
        m.put(318L, initSet(906L, 975L, 496L, 337L, 689L, 658L, 562L, 756L, 885L, 918L, 438L, 920L, 575L));
        m.put(319L, initSet(325L, 871L, 903L, 584L, 464L, 658L, 755L, 885L, 406L, 857L, 473L, 666L, 762L, 412L));
        m.put(320L, initSet(611L, 516L, 821L, 806L, 422L, 348L, 684L, 942L));
        m.put(321L, initSet(400L, 914L, 899L, 340L, 631L, 906L, 972L, 733L, 782L, 495L));
        m.put(322L, initSet(498L, 581L, 358L, 669L, 830L, 350L, 478L));
        m.put(323L, initSet(545L, 753L, 772L, 582L, 620L, 381L, 637L, 335L));
        m.put(324L, initSet(896L, 513L, 647L, 392L, 648L, 523L, 780L, 914L, 917L, 664L, 921L, 666L, 541L, 798L, 799L, 674L, 804L, 934L, 807L, 940L, 944L, 436L, 565L, 449L, 578L, 579L, 963L, 710L, 454L, 968L, 972L, 336L, 467L, 595L, 726L, 857L, 731L, 992L, 741L, 617L, 875L, 620L, 748L, 367L, 496L, 753L, 502L, 374L, 378L, 507L));
        m.put(325L, initSet(516L, 837L, 647L, 521L, 972L, 333L, 464L, 785L, 658L, 914L, 915L, 917L, 598L, 664L, 603L, 674L, 482L, 997L, 614L, 747L, 367L, 755L, 950L, 759L, 381L, 893L));
        m.put(326L, initSet(353L, 774L, 456L, 621L, 336L, 752L, 881L, 593L, 722L, 820L, 597L, 629L, 470L, 630L, 826L, 411L, 765L, 766L, 767L));
        m.put(327L, initSet(704L, 834L, 713L, 843L, 844L, 846L, 912L, 978L, 850L, 467L, 405L, 597L, 790L, 406L, 601L, 539L, 347L, 669L, 414L, 798L, 671L, 416L, 354L, 615L, 871L, 875L, 559L, 432L, 629L, 892L, 445L, 830L));
        m.put(328L, initSet(405L, 998L, 425L, 874L, 859L, 894L));
        m.put(329L, initSet(800L, 597L, 998L, 823L, 859L, 493L, 974L, 542L, 670L));
        m.put(330L, initSet(784L, 930L, 499L, 947L, 937L, 793L, 906L, 893L, 766L, 335L, 959L));
        m.put(331L, initSet(737L, 785L, 930L, 867L, 875L, 893L, 894L, 543L));
        m.put(332L, initSet(640L, 545L, 449L, 691L, 374L, 648L, 521L, 361L, 333L));
        m.put(333L, initSet(640L, 624L, 496L, 629L, 551L, 967L, 872L, 648L, 504L, 985L, 877L, 447L));
        m.put(334L, initSet(450L, 547L, 915L, 340L, 788L, 422L, 632L, 748L, 796L, 764L));
        m.put(335L, initSet(832L, 898L, 900L, 452L, 518L, 914L, 786L, 658L, 789L, 790L, 982L, 984L, 859L, 928L, 355L, 678L, 684L, 749L, 495L, 944L, 947L, 885L, 949L, 824L, 441L, 572L, 381L, 893L, 766L, 383L));
        m.put(336L, initSet(832L, 960L, 739L, 900L, 390L, 998L, 871L, 778L, 689L, 914L, 755L, 470L, 823L, 347L));
        m.put(337L, initSet(464L, 630L, 647L, 491L));
        m.put(338L, initSet(400L, 992L, 502L, 487L, 424L, 890L, 621L));
        m.put(339L, initSet(928L, 785L, 612L, 373L, 824L, 872L));
        m.put(340L, initSet(704L, 930L, 517L, 934L, 871L, 921L, 409L, 523L, 941L, 669L));
        m.put(341L, initSet(469L, 966L, 726L, 406L, 632L, 537L, 906L, 765L, 559L, 415L, 799L, 607L));
        m.put(342L, initSet(611L, 933L, 485L, 681L, 493L, 622L, 530L, 787L, 502L, 855L, 923L, 348L, 892L));
        m.put(343L, initSet(563L, 467L, 903L, 360L, 860L, 367L));
        m.put(344L, initSet(832L, 449L, 386L, 835L, 452L, 519L, 648L, 714L, 847L, 799L, 417L, 801L, 353L, 867L, 741L, 807L, 616L, 681L, 620L, 752L, 693L, 824L, 888L, 443L, 637L, 893L, 894L));
        m.put(345L, initSet(898L, 388L, 677L, 938L, 826L, 573L, 733L, 910L, 862L, 574L));
        m.put(346L, initSet(576L, 832L, 773L, 840L, 777L, 521L, 908L, 531L, 726L, 664L, 856L, 348L, 414L, 737L, 545L, 802L, 419L, 933L, 742L, 681L, 374L, 759L, 827L, 381L, 574L, 382L));
        m.put(347L, initSet(675L, 681L, 906L, 651L, 620L, 817L, 627L, 885L, 665L, 826L, 414L, 382L, 766L, 735L, 959L));
        m.put(348L, initSet(992L, 577L, 713L, 394L, 558L, 464L, 561L, 498L, 691L, 947L, 373L, 534L, 470L, 694L, 471L, 984L, 506L));
        m.put(349L, initSet(374L, 919L, 906L, 476L, 367L, 879L));
        m.put(350L, initSet(785L, 562L, 660L, 648L, 893L, 478L));
        m.put(351L, initSet(597L, 522L, 620L, 988L, 447L));
        m.put(352L, Collections.<Long>emptySet());
        m.put(353L, initSet(705L, 417L, 482L, 674L, 867L, 900L, 837L, 902L, 746L, 843L, 875L, 782L, 686L, 656L, 914L, 882L, 373L, 662L, 694L, 791L, 699L, 827L));
        m.put(354L, initSet(516L, 804L, 852L, 468L, 713L, 717L, 670L));
        m.put(355L, initSet(576L, 705L, 387L, 875L, 908L, 972L, 624L, 373L, 885L, 507L, 381L, 893L, 894L));
        m.put(356L, initSet(884L, 916L, 676L, 486L, 679L, 573L, 558L));
        m.put(357L, Collections.<Long>emptySet());
        m.put(358L, initSet(640L, 775L, 681L, 906L, 714L, 490L, 811L, 493L, 782L, 718L, 367L, 919L, 824L, 860L, 669L));
        m.put(359L, initSet(530L, 658L, 436L, 373L, 731L, 494L, 399L));
        m.put(360L, initSet(576L, 945L, 978L, 485L, 597L, 902L, 680L, 664L, 494L, 670L, 831L));
        m.put(361L, initSet(993L, 802L, 772L, 807L, 521L, 908L, 877L, 789L, 887L, 759L, 920L, 889L, 637L, 893L));
        m.put(362L, initSet(386L, 788L, 981L, 870L, 410L, 619L, 684L));
        m.put(363L, initSet(961L, 387L, 934L, 840L, 553L, 970L, 938L, 779L, 619L, 653L, 910L, 914L, 595L, 534L, 598L, 694L, 791L, 922L, 859L, 862L));
        m.put(364L, initSet(896L, 704L, 708L, 521L, 522L, 778L, 653L, 463L, 400L, 787L, 916L, 854L, 409L, 670L, 991L, 803L, 611L, 678L, 807L, 999L, 681L, 426L, 493L, 751L, 433L, 434L, 627L, 436L, 694L, 823L, 504L, 376L, 826L, 890L, 957L));
        m.put(365L, initSet(500L, 777L, 762L, 826L, 733L));
        m.put(366L, initSet(467L, 615L, 536L, 424L, 411L));
        m.put(367L, initSet(610L, 965L, 581L, 615L, 457L, 617L, 842L, 941L, 399L, 562L, 692L, 981L, 534L, 950L, 439L, 664L, 568L, 378L, 795L, 573L, 926L, 671L, 415L));
        m.put(368L, initSet(416L, 450L, 387L));
        m.put(369L, initSet(480L, 929L, 770L, 802L, 738L, 804L, 677L, 425L, 493L, 974L, 462L, 911L, 849L, 374L, 727L, 571L));
        m.put(370L, initSet(976L, 867L, 995L, 373L, 538L, 637L, 893L));
        m.put(371L, initSet(481L, 450L, 902L, 855L, 780L, 975L));
        m.put(372L, initSet(515L, 947L, 517L, 534L, 376L, 892L, 398L));
        m.put(373L, initSet(640L, 960L, 387L, 708L, 773L, 838L, 582L, 519L, 391L, 392L, 520L, 905L, 713L, 843L, 844L, 976L, 979L, 788L, 852L, 405L, 981L, 918L, 534L, 599L, 409L, 411L, 731L, 476L, 414L, 543L, 992L, 611L, 867L, 485L, 422L, 875L, 429L, 621L, 749L, 754L, 885L, 566L, 758L, 951L, 887L, 443L, 639L));
        m.put(374L, initSet(864L, 993L, 450L, 387L, 423L, 616L, 688L, 629L, 631L, 506L, 381L, 893L, 573L, 701L));
        m.put(375L, Collections.<Long>emptySet());
        m.put(376L, initSet(640L, 896L, 837L, 518L, 422L, 519L, 936L, 909L, 398L, 910L, 561L, 854L, 664L, 478L));
        m.put(377L, Collections.<Long>emptySet());
        m.put(378L, initSet(545L, 950L, 871L, 647L, 666L, 747L, 620L));
        m.put(379L, Collections.<Long>emptySet());
        m.put(380L, initSet(544L, 769L, 867L, 485L, 838L, 807L, 905L, 713L, 938L, 429L, 493L, 622L, 399L, 530L, 979L, 819L, 566L, 504L, 665L, 570L, 798L, 414L, 670L, 799L));
        m.put(381L, initSet(576L, 417L, 932L, 997L, 620L, 845L, 429L, 688L, 913L, 433L, 914L, 403L, 756L, 629L, 918L, 535L, 538L, 827L, 701L, 894L));
        m.put(382L, initSet(881L, 852L, 441L, 412L, 429L));
        m.put(383L, initSet(386L, 643L, 518L, 806L, 678L, 519L, 746L, 811L, 619L, 428L, 752L, 916L, 981L, 858L, 410L, 827L, 733L, 893L, 767L));
        m.put(384L, initSet(784L, 914L, 613L, 777L, 553L, 555L, 971L, 796L, 446L));
        m.put(385L, Collections.<Long>emptySet());
        m.put(386L, initSet(659L, 788L, 949L, 519L, 812L, 847L));
        m.put(387L, initSet(611L, 676L, 997L, 937L, 489L, 431L, 976L, 913L, 881L, 433L, 564L, 789L, 533L, 726L, 790L, 439L, 664L, 603L, 571L, 831L));
        m.put(388L, initSet(394L, 717L));
        m.put(389L, Collections.<Long>emptySet());
        m.put(390L, initSet(785L, 562L, 674L, 516L, 612L, 681L, 412L, 957L));
        m.put(391L, initSet(544L, 769L, 739L, 548L, 868L, 804L, 838L, 583L, 938L, 784L, 624L, 532L, 725L, 726L, 566L, 952L, 601L, 924L));
        m.put(392L, initSet(960L, 930L, 644L, 773L, 551L, 522L, 524L, 975L, 543L));
        m.put(393L, initSet(866L, 456L, 651L, 539L, 798L, 974L));
        m.put(394L, initSet(644L, 709L, 582L, 807L, 777L, 906L, 944L, 496L, 432L, 785L, 627L, 726L, 538L, 893L));
        m.put(395L, initSet(753L, 627L, 804L, 630L, 694L, 407L, 520L, 824L, 472L, 988L, 973L));
        m.put(396L, initSet(450L, 996L, 676L, 877L, 462L, 400L, 434L, 627L, 819L, 692L, 472L, 504L, 890L, 506L, 475L));
        m.put(397L, initSet(850L, 773L, 661L, 823L, 616L, 424L, 521L, 506L, 845L));
        m.put(398L, initSet(784L, 416L, 420L, 726L, 715L, 684L));
        m.put(399L, initSet(642L, 708L, 709L, 678L, 457L, 522L, 906L, 426L, 491L, 493L, 783L, 464L, 688L, 436L, 504L, 473L, 701L, 798L, 606L, 894L, 543L, 735L, 991L, 575L));
        m.put(400L, initSet(865L, 673L, 422L, 904L, 907L, 941L, 592L, 624L, 691L, 883L, 853L, 885L, 823L, 472L, 409L, 796L, 958L, 671L, 799L));
        m.put(401L, initSet(482L, 758L, 887L, 745L, 427L));
        m.put(402L, initSet(978L, 550L, 407L, 456L, 954L, 812L, 476L, 654L, 671L));
        m.put(403L, initSet(896L, 803L, 611L, 691L, 916L, 486L, 904L, 792L, 457L, 779L, 476L, 573L));
        m.put(404L, Collections.<Long>emptySet());
        m.put(405L, initSet(960L, 821L, 838L, 680L, 988L));
        m.put(406L, initSet(960L, 644L, 904L, 522L, 651L, 590L, 658L, 850L, 598L, 470L, 793L, 412L, 926L, 478L, 737L, 486L, 680L, 553L, 809L, 621L, 562L, 755L, 694L, 443L, 445L, 446L, 959L));
        m.put(407L, initSet(932L, 709L, 807L, 935L, 491L, 812L, 844L, 751L, 595L, 726L, 413L, 957L, 415L));
        m.put(408L, Collections.<Long>emptySet());
        m.put(409L, initSet(417L, 805L, 583L, 616L, 906L, 845L, 590L, 591L, 912L, 562L, 660L, 693L, 475L, 860L, 508L, 733L));
        m.put(410L, initSet(800L, 656L, 579L, 692L, 788L, 501L, 885L, 566L, 471L, 971L, 956L));
        m.put(411L, initSet(513L, 769L, 467L, 900L, 838L, 791L, 440L, 745L, 938L, 555L, 843L));
        m.put(412L, initSet(865L, 611L, 708L, 615L, 616L, 553L, 717L, 429L, 564L, 983L, 823L, 920L, 440L, 570L, 442L, 507L, 444L));
        m.put(413L, initSet(752L, 433L, 899L, 820L, 693L, 567L, 827L, 459L, 491L, 828L));
        m.put(414L, initSet(960L, 963L, 708L, 583L, 777L, 906L, 847L, 850L, 595L, 660L, 852L, 733L, 865L, 481L, 867L, 483L, 748L, 877L, 879L, 944L, 566L, 951L, 632L, 442L, 827L, 701L));
        m.put(415L, initSet(578L, 551L, 759L, 745L, 954L, 730L, 956L));
        m.put(416L, initSet(640L, 577L, 643L, 581L, 965L, 902L, 454L, 647L, 650L, 907L, 590L, 528L, 534L, 791L, 856L, 540L, 544L, 674L, 546L, 483L, 612L, 996L, 807L, 809L, 620L, 877L, 752L, 753L, 627L, 439L, 760L, 504L, 825L, 570L, 571L, 957L, 958L));
        m.put(417L, initSet(449L, 837L, 710L, 583L, 840L, 456L, 714L, 842L, 523L, 652L, 717L, 529L, 977L, 914L, 915L, 660L, 532L, 662L, 855L, 793L, 991L, 992L, 737L, 420L, 616L, 553L, 811L, 431L, 624L, 562L, 885L, 438L, 822L, 951L, 827L, 828L));
        m.put(418L, initSet(609L));
        m.put(419L, initSet(544L, 896L, 835L, 502L, 777L, 905L, 522L, 426L, 429L, 494L));
        m.put(420L, initSet(947L, 837L, 725L, 726L, 519L, 681L, 892L, 589L, 495L));
        m.put(421L, initSet(705L, 849L, 676L, 854L, 790L, 874L, 716L, 508L, 590L, 446L));
        m.put(422L, initSet(866L, 709L, 934L, 519L, 904L, 777L, 908L, 558L, 527L, 656L, 592L, 662L, 791L, 889L, 954L, 475L, 828L, 893L, 670L, 798L));
        m.put(423L, initSet(960L, 485L, 871L, 809L, 425L, 701L));
        m.put(424L, initSet(673L, 674L, 611L, 807L, 615L, 616L, 554L, 938L, 878L, 751L, 690L, 627L, 500L, 885L, 982L, 599L, 823L, 601L, 506L, 831L));
        m.put(425L, initSet(739L, 452L, 485L, 519L, 615L, 618L, 938L, 874L, 684L, 653L, 877L, 564L, 949L, 534L, 951L, 824L, 793L, 697L));
        m.put(426L, initSet(513L, 450L, 930L, 612L, 456L, 778L, 555L, 653L, 877L, 462L, 622L, 753L, 819L, 726L, 919L, 951L, 920L, 472L, 670L));
        m.put(427L, initSet(771L, 613L, 725L, 918L, 920L));
        m.put(428L, initSet(788L, 615L, 827L));
        m.put(429L, initSet(928L, 579L, 708L, 452L, 455L, 584L, 905L, 777L, 522L, 621L, 749L, 910L, 687L, 432L, 594L, 852L, 504L, 890L, 570L, 798L, 447L));
        m.put(430L, Collections.<Long>emptySet());
        m.put(431L, initSet(928L, 992L, 769L, 961L, 929L, 520L, 456L, 489L, 746L, 811L, 588L, 877L, 784L, 752L, 785L, 566L, 822L, 471L, 922L, 954L, 604L));
        m.put(432L, initSet(496L, 850L, 885L, 826L, 461L, 733L, 527L));
        m.put(433L, initSet(675L, 647L, 489L, 973L, 462L, 496L, 785L, 753L, 530L, 914L, 787L, 724L, 535L, 504L, 441L, 507L, 733L, 957L, 765L));
        m.put(434L, initSet(674L, 996L, 454L, 615L, 871L, 778L, 554L, 906L, 845L, 590L, 854L, 502L, 857L));
        m.put(435L, Collections.<Long>emptySet());
        m.put(436L, initSet(896L, 611L, 612L, 708L, 502L, 872L));
        m.put(437L, Collections.<Long>emptySet());
        m.put(438L, initSet(465L, 482L, 548L, 900L, 597L, 842L, 682L, 523L, 670L));
        m.put(439L, initSet(866L, 450L, 743L, 650L, 747L, 588L, 821L, 533L, 598L, 790L, 442L, 507L, 767L));
        m.put(440L, initSet(832L, 784L, 752L, 545L, 787L, 454L, 534L, 920L, 793L, 682L, 827L, 924L));
        m.put(441L, initSet(786L, 644L, 852L, 630L, 826L, 798L));
        m.put(442L, initSet(736L, 674L, 644L, 932L, 581L, 678L, 455L, 777L, 717L, 877L, 624L, 785L, 786L, 819L, 697L, 894L, 895L));
        m.put(443L, initSet(705L, 737L, 870L, 871L, 812L, 973L, 910L, 847L, 912L, 978L, 787L, 566L, 793L, 796L, 798L, 734L, 670L, 606L, 543L));
        m.put(444L, initSet(674L, 627L, 644L, 647L, 957L));
        m.put(445L, initSet(960L, 993L, 787L, 900L, 821L, 998L, 713L, 974L, 767L));
        m.put(446L, initSet(784L, 737L, 803L, 516L, 662L, 566L, 470L, 791L, 681L, 475L, 558L, 767L));
        m.put(447L, initSet(674L, 580L, 551L, 809L, 780L, 940L, 850L, 499L, 597L, 919L, 759L, 537L, 988L, 541L, 701L, 735L));
        m.put(448L, Collections.<Long>emptySet());
        m.put(449L, initSet(496L, 995L, 549L, 837L, 582L, 470L, 648L, 906L, 746L, 523L, 827L));
        m.put(450L, initSet(961L, 738L, 516L, 773L, 965L, 902L, 710L, 966L, 973L, 815L, 499L, 981L, 597L, 634L));
        m.put(451L, Collections.<Long>emptySet());
        m.put(452L, initSet(930L, 963L, 691L, 885L, 854L, 999L, 616L, 906L, 877L, 591L));
        m.put(453L, initSet(981L, 827L, 875L, 495L));
        m.put(454L, initSet(481L, 547L, 612L, 933L, 902L, 968L, 879L, 915L, 885L, 917L, 919L, 857L, 541L, 798L, 830L));
        m.put(455L, initSet(482L, 756L, 581L, 757L, 758L, 859L, 975L));
        m.put(456L, initSet(480L, 705L, 961L, 804L, 838L, 647L, 523L, 491L, 844L, 653L, 654L, 658L, 786L, 630L, 919L, 539L, 699L, 507L));
        m.put(457L, initSet(544L, 584L, 618L, 460L, 684L, 846L, 783L, 947L, 532L, 985L, 538L, 892L, 735L));
        m.put(458L, initSet(736L, 644L, 517L, 581L, 520L, 859L, 476L, 735L));
        m.put(459L, initSet(482L, 899L, 842L, 653L, 882L, 820L, 694L, 920L, 826L, 924L, 701L, 957L, 991L));
        m.put(460L, initSet(903L, 712L, 523L));
        m.put(461L, initSet(817L, 742L, 967L, 713L, 665L, 618L, 634L, 523L, 779L, 766L));
        m.put(462L, initSet(865L, 754L, 692L, 837L, 662L, 508L, 605L, 846L));
        m.put(463L, initSet(528L, 725L, 518L, 904L, 792L, 572L, 782L, 478L, 543L, 767L));
        m.put(464L, initSet(961L, 516L, 710L, 583L, 904L, 779L, 972L, 910L, 591L, 912L, 850L, 595L, 789L, 924L, 606L, 992L, 673L, 546L, 548L, 553L, 681L, 490L, 941L, 817L, 819L, 633L, 890L, 828L, 701L));
        m.put(465L, initSet(784L, 868L, 566L, 920L, 793L, 478L));
        m.put(466L, Collections.<Long>emptySet());
        m.put(467L, initSet(993L, 773L, 871L, 777L, 713L, 842L, 588L, 941L, 494L, 658L, 562L, 852L, 468L, 856L, 473L, 670L, 799L));
        m.put(468L, initSet(938L, 843L));
        m.put(469L, initSet(563L, 788L, 917L, 966L, 726L, 855L, 780L, 541L, 493L, 847L));
        m.put(470L, initSet(992L, 513L, 545L, 900L, 804L, 582L, 742L, 529L, 722L, 947L, 820L, 566L, 758L));
        m.put(471L, initSet(577L, 705L, 930L, 644L, 713L, 814L, 495L, 752L, 944L, 722L, 947L, 852L, 725L, 822L, 827L, 636L, 733L));
        m.put(472L, initSet(992L, 770L, 866L, 867L, 996L, 773L, 807L, 905L, 585L, 489L, 650L, 491L, 915L, 854L, 502L, 631L, 633L, 477L));
        m.put(473L, initSet(929L, 817L, 677L, 807L, 778L, 603L, 876L, 542L));
        m.put(474L, Collections.<Long>emptySet());
        m.put(475L, initSet(896L, 992L, 996L, 837L, 807L, 681L, 619L, 684L, 628L, 821L, 726L, 502L, 504L, 477L, 573L));
        m.put(476L, initSet(898L, 578L, 966L, 967L, 778L, 845L, 783L, 975L, 658L, 595L, 660L, 926L, 674L, 482L, 610L, 996L, 807L, 935L, 616L, 621L, 879L, 691L, 629L, 631L, 956L));
        m.put(477L, initSet(853L, 583L, 631L, 984L, 905L, 570L, 986L, 523L, 827L, 845L, 894L));
        m.put(478L, initSet(643L, 515L, 676L, 868L, 997L, 904L, 712L, 616L, 875L, 555L, 782L, 846L, 978L, 915L, 723L, 563L, 660L, 820L, 791L, 926L));
        m.put(479L, Collections.<Long>emptySet());
        m.put(480L, initSet(800L, 484L, 807L, 936L, 522L, 588L, 941L, 974L, 495L, 559L, 691L, 916L, 597L, 599L, 894L, 543L, 575L));
        m.put(481L, initSet(864L, 701L));
        m.put(482L, initSet(576L, 529L, 914L, 996L, 901L, 758L, 553L, 842L, 603L));
        m.put(483L, initSet(881L, 674L, 677L, 838L, 650L, 555L, 748L, 877L, 798L));
        m.put(484L, initSet(641L, 709L, 902L, 519L, 807L, 520L, 808L, 713L, 656L, 944L, 658L, 754L, 531L, 947L, 599L, 921L, 543L));
        m.put(485L, initSet(787L, 900L, 838L, 874L, 863L));
        m.put(486L, initSet(609L, 865L, 803L, 806L, 678L, 694L, 887L, 792L, 779L, 558L));
        m.put(487L, initSet(624L, 992L, 691L, 996L, 904L, 969L, 845L, 621L));
        m.put(488L, Collections.<Long>emptySet());
        m.put(489L, initSet(753L, 676L, 520L, 571L, 507L, 748L, 892L, 988L, 605L));
        m.put(490L, initSet(977L, 738L, 850L, 820L, 693L, 647L, 920L, 906L, 606L));
        m.put(491L, initSet(866L, 674L, 835L, 820L, 966L, 727L, 653L, 910L));
        m.put(492L, Collections.<Long>emptySet());
        m.put(493L, initSet(993L, 773L, 581L, 741L, 998L, 807L, 680L, 905L, 969L, 910L, 686L, 787L, 756L, 789L, 917L, 949L, 697L, 761L, 538L, 795L, 859L, 541L));
        m.put(494L, initSet(896L, 768L, 834L, 643L, 773L, 933L, 807L, 872L, 681L, 524L, 588L, 941L, 981L));
        m.put(495L, initSet(930L, 870L, 711L, 744L, 619L, 939L, 941L, 785L, 658L, 916L, 532L, 949L, 827L, 540L, 669L, 830L, 894L, 671L));
        m.put(496L, initSet(832L, 992L, 674L, 644L, 772L, 804L, 838L, 806L, 875L, 941L, 877L, 786L, 787L, 755L, 883L, 790L, 503L, 697L, 538L, 827L, 507L, 895L));
        m.put(497L, Collections.<Long>emptySet());
        m.put(498L, initSet(976L, 643L, 691L, 789L, 790L, 584L, 664L, 859L, 588L, 892L, 830L, 975L));
        m.put(499L, initSet(864L, 897L, 547L, 680L, 937L, 780L, 717L, 785L, 850L, 627L, 885L, 566L, 919L, 730L, 826L, 795L, 764L, 701L, 574L, 511L));
        m.put(500L, initSet(993L, 595L, 823L, 631L, 983L, 890L));
        m.put(501L, initSet(592L, 579L, 726L, 875L, 748L));
        m.put(502L, initSet(930L, 546L, 676L, 741L, 583L, 906L, 658L, 691L, 661L, 726L, 982L, 824L, 696L, 504L, 798L, 542L, 958L, 799L));
        m.put(503L, initSet(992L, 656L, 513L, 754L, 883L, 692L, 517L, 806L, 902L, 742L, 953L, 702L));
        m.put(504L, initSet(608L, 992L, 516L, 517L, 520L, 744L, 969L, 585L, 681L, 906L, 590L, 591L, 687L, 691L, 852L, 724L, 725L, 917L, 566L, 599L, 824L, 986L, 507L));
        m.put(505L, Collections.<Long>emptySet());
        m.put(506L, initSet(673L, 545L, 867L, 709L, 997L, 742L, 521L, 554L, 875L, 977L, 913L, 691L, 947L, 726L, 982L, 566L, 759L, 984L, 988L, 860L, 508L));
        m.put(507L, initSet(704L, 545L, 674L, 772L, 997L, 871L, 935L, 907L, 785L, 627L, 597L, 538L, 826L, 859L, 604L, 508L, 991L, 959L));
        m.put(508L, initSet(992L, 609L, 546L, 676L, 902L, 791L, 728L, 633L, 554L, 684L, 877L, 782L));
        m.put(509L, Collections.<Long>emptySet());
        m.put(510L, initSet(870L, 982L, 681L, 619L, 875L, 956L, 767L, 799L));
        m.put(511L, initSet(547L));
        m.put(512L, initSet(516L, 523L, 750L));
        m.put(513L, initSet(784L, 722L, 771L, 806L, 920L, 777L, 634L, 749L, 653L, 717L, 701L, 527L));
        m.put(514L, Collections.<Long>emptySet());
        m.put(515L, initSet(867L, 517L, 855L, 631L, 942L));
        m.put(516L, initSet(705L, 898L, 773L, 968L, 910L, 718L, 977L, 914L, 850L, 852L, 790L, 854L, 599L, 798L, 542L, 862L, 679L, 615L, 616L, 877L, 817L, 690L, 691L, 755L, 566L));
        m.put(517L, initSet(736L, 934L, 903L, 584L, 744L, 684L, 748L, 589L, 592L, 692L, 535L, 792L, 569L, 827L, 892L));
        m.put(518L, initSet(904L, 959L));
        m.put(519L, initSet(752L, 705L, 930L, 754L, 659L, 947L, 581L, 634L, 893L));
        m.put(520L, initSet(656L, 944L, 961L, 785L, 932L, 756L, 870L, 872L, 524L, 846L));
        m.put(521L, initSet(576L, 673L, 867L, 691L, 804L, 631L, 616L, 905L, 620L, 621L));
        m.put(522L, initSet(960L, 708L, 648L, 826L, 763L, 911L));
        m.put(523L, initSet(704L, 741L, 904L, 808L, 746L, 875L, 751L, 656L, 883L, 820L, 725L, 597L, 885L, 918L, 791L, 764L, 574L));
        m.put(524L, initSet(768L, 644L, 629L, 807L, 616L, 568L));
        m.put(525L, Collections.<Long>emptySet());
        m.put(526L, Collections.<Long>emptySet());
        m.put(527L, initSet(914L, 579L, 671L, 799L));
        m.put(528L, initSet(640L, 611L, 807L, 679L, 888L, 716L, 942L));
        m.put(529L, initSet(576L, 868L, 820L, 971L, 653L));
        m.put(530L, initSet(928L, 644L, 612L, 740L, 933L, 678L, 777L, 811L, 684L, 940L, 686L, 784L, 753L, 850L, 885L, 566L, 919L, 890L, 763L, 797L));
        m.put(531L, initSet(576L, 897L, 899L, 741L, 710L, 742L, 808L, 875L, 620L, 941L, 753L, 692L, 827L));
        m.put(532L, initSet(534L, 726L, 936L, 634L, 780L));
        m.put(533L, initSet(710L, 617L, 873L, 811L, 780L, 785L, 914L, 658L, 947L, 627L, 855L, 599L, 730L, 671L));
        m.put(534L, initSet(577L, 691L, 822L, 695L, 969L, 874L, 859L, 653L, 863L));
        m.put(535L, initSet(753L, 644L, 967L, 792L, 730L, 859L, 669L, 574L));
        m.put(536L, initSet(723L, 692L, 629L, 730L, 634L, 764L, 671L));
        m.put(537L, initSet(993L, 723L, 741L, 710L, 742L, 904L, 824L, 634L, 764L, 988L));
        m.put(538L, initSet(576L, 804L, 709L, 646L, 902L, 584L, 713L, 908L, 687L, 976L, 913L, 691L, 575L));
        m.put(539L, initSet(932L, 601L, 938L, 954L, 941L, 942L, 766L));
        m.put(540L, initSet(768L, 562L, 563L, 981L, 871L, 584L, 681L, 811L, 892L, 670L));
        m.put(541L, initSet(917L, 910L));
        m.put(542L, initSet(592L, 673L, 627L, 982L, 906L, 845L, 958L));
        m.put(543L, initSet(644L, 838L, 806L, 870L, 615L, 968L, 713L, 681L, 911L, 592L, 944L, 787L, 980L, 660L, 949L, 726L, 598L, 824L, 795L, 763L, 604L, 797L, 862L, 702L));
        m.put(544L, initSet(896L, 835L, 867L, 708L, 837L, 777L, 652L, 784L, 624L, 752L, 789L, 566L, 890L, 731L));
        m.put(545L, initSet(624L, 753L, 787L, 900L, 885L, 774L, 726L, 890L, 843L, 701L));
        m.put(546L, initSet(865L, 673L, 977L, 867L, 691L, 660L, 854L, 823L, 590L));
        m.put(547L, initSet(656L, 963L, 755L, 837L, 565L, 710L, 967L, 651L));
        m.put(548L, initSet(914L, 887L));
        m.put(549L, initSet(769L, 725L, 984L, 702L));
        m.put(550L, initSet(784L, 928L, 867L, 582L, 872L, 651L));
        m.put(551L, initSet(967L, 777L, 651L, 699L, 942L, 894L, 783L, 735L, 639L));
        m.put(552L, Collections.<Long>emptySet());
        m.put(553L, initSet(737L, 595L, 566L, 919L, 584L, 793L, 843L));
        m.put(554L, initSet(592L, 850L, 967L, 999L, 904L, 570L, 796L, 799L));
        m.put(555L, initSet(784L, 676L, 613L, 919L, 824L, 745L, 922L, 604L));
        m.put(556L, Collections.<Long>emptySet());
        m.put(557L, Collections.<Long>emptySet());
        m.put(558L, initSet(888L, 572L, 716L));
        m.put(559L, initSet(688L, 790L, 620L));
        m.put(560L, initSet(681L, 713L, 682L, 843L));
        m.put(561L, initSet(912L, 993L, 579L, 867L, 806L, 777L, 681L, 716L));
        m.put(562L, initSet(576L, 929L, 674L, 900L, 647L, 903L, 584L, 842L, 717L, 755L, 563L, 660L, 821L, 664L, 825L, 826L, 827L));
        m.put(563L, initSet(864L, 704L, 898L, 858L, 686L, 830L, 975L, 671L));
        m.put(564L, initSet(791L, 779L, 684L, 716L, 863L));
        m.put(565L, initSet(753L, 899L, 883L, 956L, 972L, 748L));
        m.put(566L, initSet(576L, 676L, 741L, 647L, 744L, 977L, 882L, 691L, 725L, 661L, 885L, 796L, 574L));
        m.put(567L, initSet(992L, 930L, 770L, 590L, 846L, 881L, 786L, 820L, 692L, 822L, 826L, 605L, 767L));
        m.put(568L, initSet(932L, 629L, 598L, 859L, 687L, 735L));
        m.put(569L, initSet(928L, 752L, 827L, 684L));
        m.put(570L, initSet(867L, 773L, 983L, 907L));
        m.put(571L, initSet(992L, 961L, 674L, 835L, 694L, 748L, 877L));
        m.put(572L, initSet(598L, 904L, 910L));
        m.put(573L, initSet(640L, 704L, 705L, 838L, 904L, 906L, 714L, 779L, 716L, 590L, 942L, 911L, 915L, 660L, 597L, 662L, 669L));
        m.put(574L, initSet(592L, 753L, 883L, 708L, 852L, 804L, 921L, 906L, 826L, 846L, 798L));
        m.put(575L, initSet(851L, 756L, 599L, 744L, 872L, 777L, 745L));
        m.put(576L, initSet(737L, 708L, 837L, 716L, 974L, 945L, 753L, 914L, 947L, 694L, 664L, 762L, 863L));
        m.put(577L, initSet(928L, 710L, 614L, 664L, 734L));
        m.put(578L, initSet(864L, 898L, 850L, 788L, 581L, 966L, 855L, 856L, 780L));
        m.put(579L, initSet(960L, 737L, 993L, 677L, 647L, 904L, 777L, 681L, 682L, 730L, 763L, 798L, 863L, 959L));
        m.put(580L, initSet(691L, 821L, 597L, 824L, 894L, 974L, 911L));
        m.put(581L, initSet(740L, 901L, 966L, 903L, 616L, 906L, 940L, 973L, 815L, 690L, 947L, 725L, 758L, 926L, 830L));
        m.put(582L, initSet(976L, 978L, 646L, 713L, 860L));
        m.put(583L, initSet(627L, 854L, 807L, 967L, 696L, 684L, 988L));
        m.put(584L, initSet(929L, 674L, 930L, 807L, 840L, 778L, 618L, 974L, 915L, 660L, 756L, 981L, 758L, 856L, 892L, 830L, 991L, 831L));
        m.put(585L, initSet(802L, 743L));
        m.put(586L, Collections.<Long>emptySet());
        m.put(587L, Collections.<Long>emptySet());
        m.put(588L, initSet(770L, 882L, 739L, 611L, 692L, 725L, 677L, 694L, 631L, 748L, 893L));
        m.put(589L, initSet(725L, 710L, 614L, 664L, 734L));
        m.put(590L, initSet(900L, 996L, 773L, 902L, 967L, 999L, 907L, 974L, 849L, 691L, 852L, 885L, 918L, 696L, 828L, 765L));
        m.put(591L, initSet(865L, 963L, 838L, 615L, 939L, 700L, 941L, 814L));
        m.put(592L, initSet(688L, 897L, 723L, 819L, 773L, 741L, 806L, 920L, 616L, 682L, 843L, 718L));
        m.put(593L, initSet(838L, 682L));
        m.put(594L, initSet(785L, 835L, 777L));
        m.put(595L, initSet(673L, 915L, 627L, 819L, 902L, 823L, 759L, 856L, 762L, 876L));
        m.put(596L, Collections.<Long>emptySet());
        m.put(597L, initSet(866L, 643L, 804L, 965L, 838L, 743L, 874L, 751L, 753L, 690L, 852L, 604L, 700L, 892L));
        m.put(598L, initSet(896L, 837L, 618L, 811L, 817L, 658L, 884L, 694L, 983L, 792L, 921L, 985L, 666L, 604L, 767L));
        m.put(599L, initSet(992L, 852L, 726L, 983L, 823L, 600L, 696L, 845L, 670L, 798L));
        m.put(600L, initSet(658L, 777L, 699L, 812L, 654L, 942L, 671L));
        m.put(601L, initSet(941L));
        m.put(602L, Collections.<Long>emptySet());
        m.put(603L, initSet(736L, 832L, 644L, 677L, 778L, 618L, 684L, 910L, 974L, 756L, 692L, 758L, 985L));
        m.put(604L, initSet(961L, 786L, 643L, 806L, 999L, 619L, 767L));
        m.put(605L, initSet(912L, 643L, 613L, 677L, 965L, 934L, 694L, 873L, 922L));
        m.put(606L, initSet(642L, 693L, 906L, 653L, 973L));
        m.put(607L, initSet(688L, 871L));
        m.put(608L, initSet(650L, 922L, 988L, 748L));
        m.put(609L, initSet(992L, 865L, 753L, 628L, 792L, 984L));
        m.put(610L, initSet(690L, 788L, 966L, 967L, 795L, 910L));
        m.put(611L, initSet(896L, 674L, 933L, 679L, 905L, 716L, 684L, 748L, 941L, 814L, 692L, 821L, 790L, 662L, 826L));
        m.put(612L, initSet(912L, 993L, 921L, 666L, 941L, 798L));
        m.put(613L, initSet(928L, 784L, 914L, 835L, 741L, 653L, 989L));
        m.put(614L, initSet(752L, 885L, 726L, 968L, 664L, 857L, 941L));
        m.put(615L, initSet(785L, 651L, 971L, 619L, 684L, 956L, 941L, 957L, 893L));
        m.put(616L, initSet(864L, 834L, 898L, 933L, 681L, 906L, 746L, 811L, 877L, 785L, 915L, 629L, 855L, 988L, 892L));
        m.put(617L, initSet(832L, 819L, 627L, 708L, 807L, 920L, 859L, 876L, 686L, 974L, 991L, 639L));
        m.put(618L, initSet(807L, 792L, 681L, 778L, 941L, 751L));
        m.put(619L, initSet(930L, 820L, 788L, 981L, 951L, 792L, 716L, 847L));
        m.put(620L, initSet(837L, 713L, 845L, 653L, 941L, 654L, 753L, 723L, 787L, 919L, 890L, 925L, 830L));
        m.put(621L, initSet(960L, 865L, 809L, 874L, 845L, 624L, 849L, 915L, 787L, 691L, 660L, 853L, 854L, 918L, 633L));
        m.put(622L, initSet(785L, 741L, 890L, 731L));
        m.put(623L, Collections.<Long>emptySet());
        m.put(624L, initSet(992L, 770L, 643L, 676L, 837L, 773L, 965L, 966L, 999L, 936L, 650L, 784L, 724L, 692L, 982L, 664L, 890L));
        m.put(625L, Collections.<Long>emptySet());
        m.put(626L, Collections.<Long>emptySet());
        m.put(627L, initSet(992L, 770L, 674L, 866L, 867L, 838L, 807L, 904L, 680L, 873L, 785L, 658L, 915L, 724L, 885L, 630L, 727L, 631L, 696L, 825L, 830L, 767L));
        m.put(628L, initSet(705L, 916L, 938L, 730L, 746L, 862L, 702L));
        m.put(629L, initSet(688L, 769L, 961L, 674L, 884L, 853L, 744L, 940L, 910L, 830L, 975L, 767L));
        m.put(630L, initSet(928L, 900L, 957L));
        m.put(631L, initSet(992L, 673L, 867L, 773L, 648L, 845L, 944L, 914L, 947L, 660L, 726L, 760L, 633L, 634L, 827L, 893L, 671L));
        m.put(632L, initSet(856L, 910L, 686L, 815L));
        m.put(633L, initSet(977L, 868L, 820L, 918L, 967L, 793L, 796L));
        m.put(634L, initSet(934L, 936L, 808L, 681L, 875L, 941L, 784L, 915L, 883L, 692L, 726L, 664L, 828L));
        m.put(635L, Collections.<Long>emptySet());
        m.put(636L, initSet(900L, 677L, 680L, 682L, 843L, 669L));
        m.put(637L, initSet(640L, 992L, 691L, 742L, 889L, 845L));
        m.put(638L, Collections.<Long>emptySet());
        m.put(639L, initSet(807L, 830L));
        m.put(640L, initSet(992L, 752L, 643L, 742L, 999L, 664L, 779L, 955L, 684L, 862L, 767L));
        m.put(641L, initSet(851L, 872L, 730L, 812L, 654L));
        m.put(642L, initSet(704L, 752L, 705L, 717L, 910L));
        m.put(643L, initSet(753L, 711L, 875L, 830L));
        m.put(644L, initSet(785L, 689L, 675L, 756L, 677L, 730L, 988L, 989L, 957L, 975L, 735L));
        m.put(645L, Collections.<Long>emptySet());
        m.put(646L, initSet(947L, 995L, 997L, 759L, 648L, 859L, 877L));
        m.put(647L, initSet(963L, 900L, 709L, 934L, 682L, 972L, 876L, 656L, 881L, 820L, 821L, 920L, 921L, 795L, 957L, 863L));
        m.put(648L, initSet(995L, 933L, 741L, 906L, 941L, 912L, 914L, 664L, 760L, 925L, 893L, 799L, 671L));
        m.put(649L, Collections.<Long>emptySet());
        m.put(650L, initSet(802L, 835L, 724L, 934L, 846L));
        m.put(651L, initSet(980L, 935L, 777L, 795L, 989L, 798L, 671L));
        m.put(652L, initSet(740L, 684L));
        m.put(653L, initSet(960L, 705L, 899L, 774L, 871L, 777L, 751L, 914L, 850L, 882L, 823L, 669L, 957L));
        m.put(654L, initSet(978L, 723L, 830L));
        m.put(655L, initSet(800L, 659L, 939L, 812L, 814L));
        m.put(656L, initSet(692L, 741L, 885L, 902L, 875L, 971L, 799L));
        m.put(657L, Collections.<Long>emptySet());
        m.put(658L, initSet(800L, 785L, 930L, 788L, 773L, 982L, 888L, 763L, 797L, 798L, 863L));
        m.put(659L, initSet(951L, 824L, 797L, 799L));
        m.put(660L, initSet(704L, 977L, 915L, 773L, 904L, 760L, 714L, 925L, 877L));
        m.put(661L, initSet(915L, 691L, 963L, 982L, 823L, 696L, 877L));
        m.put(662L, initSet(945L, 753L, 820L, 837L, 712L, 906L, 703L));
        m.put(663L, Collections.<Long>emptySet());
        m.put(664L, initSet(752L, 913L, 993L, 916L, 742L, 903L, 711L, 807L, 972L, 941L, 734L));
        m.put(665L, initSet(803L, 739L, 820L, 999L, 791L, 750L, 751L));
        m.put(666L, initSet(817L, 674L, 885L, 857L, 798L));
        m.put(667L, Collections.<Long>emptySet());
        m.put(668L, Collections.<Long>emptySet());
        m.put(669L, initSet(752L, 705L, 785L, 881L, 852L, 775L, 680L, 777L, 906L, 682L, 733L));
        m.put(670L, initSet(704L, 834L, 932L, 709L, 902L, 871L, 936L, 713L, 842L, 941L, 751L, 913L, 914L, 915L, 916L, 852L, 885L, 920L, 700L, 733L));
        m.put(671L, initSet(864L, 866L, 710L, 982L, 726L, 972L, 956L, 893L));
        m.put(672L, Collections.<Long>emptySet());
        m.put(673L, initSet(690L, 883L, 788L, 966L, 854L, 759L, 904L, 906L, 815L));
        m.put(674L, initSet(993L, 753L, 738L, 756L, 692L, 951L, 872L, 682L, 957L, 783L));
        m.put(675L, initSet(928L));
        m.put(676L, initSet(770L, 867L, 890L, 845L, 910L, 862L, 878L, 702L, 895L));
        m.put(677L, initSet(832L, 753L, 881L, 819L, 900L, 708L, 853L, 743L, 697L, 988L, 735L));
        m.put(678L, initSet(993L, 930L, 905L, 681L, 843L, 767L));
        m.put(679L, initSet(803L, 916L, 806L, 904L, 681L, 716L));
        m.put(680L, initSet(919L, 682L));
        m.put(681L, initSet(928L, 804L, 711L, 999L, 904L, 872L, 969L, 682L, 942L, 817L, 884L, 725L, 950L, 791L, 983L, 760L, 826L, 827L, 731L, 925L, 957L));
        m.put(682L, initSet(965L, 983L, 697L, 843L, 700L, 717L));
        m.put(683L, Collections.<Long>emptySet());
        m.put(684L, initSet(705L, 867L, 837L, 806L, 999L, 744L, 713L, 971L, 942L, 692L, 725L, 853L, 726L, 982L, 831L));
        m.put(685L, Collections.<Long>emptySet());
        m.put(686L, initSet(903L, 807L, 855L, 887L, 842L, 699L, 956L));
        m.put(687L, initSet(910L, 735L));
        m.put(688L, initSet(993L, 967L, 859L));
        m.put(689L, initSet(915L, 885L, 825L));
        m.put(690L, initSet(981L, 855L, 778L, 750L));
        m.put(691L, initSet(992L, 850L, 916L, 820L, 884L, 790L, 887L, 696L, 986L, 845L, 765L, 958L));
        m.put(692L, initSet(850L, 786L, 835L, 709L, 966L, 694L, 967L, 791L, 920L, 824L, 922L, 892L));
        m.put(693L, initSet(768L, 832L, 864L, 900L, 916L, 981L, 775L, 875L, 860L));
        m.put(694L, initSet(738L, 835L, 739L, 804L, 965L, 806L, 934L, 904L, 748L, 942L, 888L, 824L, 892L, 926L));
        m.put(695L, initSet(993L, 819L, 708L, 902L, 934L, 903L, 791L));
        m.put(696L, initSet(915L, 906L, 890L));
        m.put(697L, initSet(835L, 819L, 874L, 750L));
        m.put(698L, Collections.<Long>emptySet());
        m.put(699L, initSet(932L, 840L, 906L, 942L, 798L, 879L, 863L));
        m.put(700L, Collections.<Long>emptySet());
        m.put(701L, initSet(832L, 902L, 871L, 809L, 970L, 940L, 975L, 850L, 949L, 855L, 759L, 920L, 795L, 957L));
        m.put(702L, initSet(705L, 867L, 951L, 712L, 792L, 730L));
        m.put(703L, initSet(791L, 746L, 879L));
        m.put(704L, initSet(801L, 817L, 900L, 916L, 950L, 760L, 827L, 860L));
        m.put(705L, initSet(896L, 944L, 803L, 947L, 821L, 949L, 713L, 767L));
        m.put(706L, Collections.<Long>emptySet());
        m.put(707L, Collections.<Long>emptySet());
        m.put(708L, initSet(929L, 885L, 840L, 856L, 777L, 842L, 762L, 876L));
        m.put(709L, initSet(992L, 930L, 899L, 741L, 806L, 934L, 871L, 936L, 714L, 717L, 941L, 975L, 752L, 785L, 914L, 787L, 947L, 916L, 920L, 826L, 955L, 956L, 765L));
        m.put(710L, initSet(752L, 769L, 963L, 819L, 822L, 778L, 730L, 972L, 734L, 750L));
        m.put(711L, initSet(811L, 717L));
        m.put(712L, initSet(865L, 742L, 827L, 846L));
        m.put(713L, initSet(994L, 739L, 778L, 941L, 814L, 784L, 914L, 947L, 981L, 790L, 887L, 824L, 889L, 956L, 861L));
        m.put(714L, initSet(912L, 913L));
        m.put(715L, initSet(740L, 822L, 758L, 744L));
        m.put(716L, initSet(832L, 929L, 993L, 945L, 898L, 916L, 837L, 888L, 767L));
        m.put(717L, initSet(752L, 769L, 834L, 787L, 885L, 822L, 908L, 941L, 893L, 766L, 975L));
        m.put(718L, initSet(920L));
        m.put(719L, Collections.<Long>emptySet());
        m.put(720L, Collections.<Long>emptySet());
        m.put(721L, Collections.<Long>emptySet());
        m.put(722L, initSet(882L, 838L, 887L, 920L, 856L, 906L, 843L, 749L, 926L));
        m.put(723L, initSet(914L, 963L, 883L, 742L, 953L, 956L, 782L));
        m.put(724L, initSet(838L, 743L));
        m.put(725L, initSet(752L, 737L, 900L, 820L, 822L, 734L, 879L));
        m.put(726L, initSet(896L, 737L, 787L, 915L, 996L, 790L, 822L, 855L, 999L, 889L, 890L, 859L));
        m.put(727L, initSet(786L, 802L, 790L, 743L));
        m.put(728L, initSet(791L));
        m.put(729L, Collections.<Long>emptySet());
        m.put(730L, initSet(753L, 978L, 851L, 967L, 764L, 782L, 766L));
        m.put(731L, initSet(930L));
        m.put(732L, Collections.<Long>emptySet());
        m.put(733L, initSet(752L, 913L, 915L, 852L, 982L, 746L, 827L, 908L, 892L, 798L, 958L));
        m.put(734L, initSet(784L, 838L, 920L, 970L, 924L));
        m.put(735L, initSet(842L, 908L, 959L));
        m.put(736L, Collections.<Long>emptySet());
        m.put(737L, initSet(785L, 914L, 773L, 741L, 789L, 838L));
        m.put(738L, initSet(881L, 786L, 790L, 874L, 988L, 894L));
        m.put(739L, initSet(769L, 882L, 814L, 751L));
        m.put(740L, initSet(855L));
        m.put(741L, initSet(914L, 883L, 808L));
        m.put(742L, initSet(897L, 945L, 802L, 789L, 997L, 806L, 920L, 875L, 860L, 861L, 877L));
        m.put(743L, initSet(835L, 934L, 790L, 919L, 811L, 846L));
        m.put(744L, initSet(967L, 761L, 954L));
        m.put(745L, initSet(912L, 914L, 851L, 807L, 887L, 843L, 798L));
        m.put(746L, initSet(768L, 981L, 840L, 858L, 811L, 941L, 894L, 991L));
        m.put(747L, initSet(965L, 871L));
        m.put(748L, initSet(800L, 963L, 902L, 870L, 785L, 881L, 786L, 981L, 885L, 951L, 793L, 922L, 799L));
        m.put(749L, initSet(843L));
        m.put(750L, initSet(814L));
        m.put(751L, initSet(914L, 804L, 920L, 973L));
        m.put(752L, initSet(768L, 785L, 787L, 758L, 775L, 936L, 842L));
        m.put(753L, initSet(992L, 881L, 802L, 754L, 819L, 804L, 875L, 798L, 895L));
        m.put(754L, initSet(865L, 932L, 807L, 777L, 954L, 812L, 830L));
        m.put(755L, initSet(817L, 914L, 941L, 767L));
        m.put(756L, initSet(917L, 967L, 792L, 778L));
        m.put(757L, initSet(917L, 894L));
        m.put(758L, initSet(784L, 967L, 936L, 827L));
        m.put(759L, initSet(976L, 993L, 994L, 883L, 788L, 902L, 790L, 824L, 827L, 830L));
        m.put(760L, initSet(768L, 913L, 916L, 858L, 875L, 925L));
        m.put(761L, Collections.<Long>emptySet());
        m.put(762L, Collections.<Long>emptySet());
        m.put(763L, initSet(777L));
        m.put(764L, initSet(897L, 850L, 963L, 972L));
        m.put(765L, initSet(800L, 900L, 919L, 894L, 991L, 767L));
        m.put(766L, initSet(906L));
        m.put(767L, initSet(949L, 950L, 807L, 888L, 938L));
        m.put(768L, initSet(864L, 858L));
        m.put(769L, initSet(865L, 837L, 903L, 779L));
        m.put(770L, initSet(961L, 802L, 835L, 966L));
        m.put(771L, initSet(774L, 887L));
        m.put(772L, initSet(992L, 804L, 920L, 889L));
        m.put(773L, initSet(912L, 928L, 913L, 850L, 787L, 917L, 919L, 823L, 904L, 856L, 975L, 879L));
        m.put(774L, initSet(820L, 920L));
        m.put(775L, initSet(913L, 811L, 875L));
        m.put(776L, Collections.<Long>emptySet());
        m.put(777L, initSet(866L, 868L, 838L, 935L, 842L, 846L, 895L));
        m.put(778L, initSet(881L, 817L, 902L, 807L, 825L, 828L));
        m.put(779L, initSet(896L, 806L, 790L, 999L, 942L, 959L));
        m.put(780L, initSet(837L, 901L, 822L, 903L, 954L));
        m.put(781L, Collections.<Long>emptySet());
        m.put(782L, initSet(837L, 981L, 955L));
        m.put(783L, initSet(792L));
        m.put(784L, initSet(900L, 838L, 982L, 887L, 971L, 847L));
        m.put(785L, initSet(802L, 835L, 804L, 933L, 870L, 906L, 875L, 908L, 812L, 877L, 944L, 786L, 978L, 915L, 885L, 919L, 951L, 826L, 795L, 955L, 892L, 989L, 893L));
        m.put(786L, initSet(928L, 900L, 852L, 804L, 966L, 988L, 877L, 846L));
        m.put(787L, initSet(801L, 993L, 899L, 950L, 921L, 826L, 795L));
        m.put(788L, initSet(898L, 883L, 939L, 799L));
        m.put(789L, initSet(835L, 807L, 935L, 905L, 859L, 861L));
        m.put(790L, initSet(992L, 867L, 804L, 965L, 998L, 934L, 999L, 904L, 811L, 850L, 791L, 919L, 890L, 827L));
        m.put(791L, initSet(820L, 853L, 907L, 796L, 959L));
        m.put(792L, initSet(803L, 884L, 821L, 902L, 967L, 903L, 938L, 942L, 991L));
        m.put(793L, initSet(912L, 800L, 944L, 867L, 981L, 920L, 797L));
        m.put(794L, Collections.<Long>emptySet());
        m.put(795L, initSet(914L, 996L, 981L, 921L, 906L, 975L));
        m.put(796L, initSet(868L, 934L, 984L, 953L, 991L));
        m.put(797L, initSet(867L));
        m.put(798L, initSet(993L, 817L, 978L, 963L, 900L, 980L, 807L, 826L, 941L, 975L));
        m.put(799L, initSet(896L, 849L, 933L, 919L, 972L, 956L, 814L, 975L));
        m.put(800L, initSet(930L, 867L, 885L, 998L, 982L, 824L, 874L, 925L));
        m.put(801L, initSet(914L, 957L, 910L));
        m.put(802L, initSet(835L, 873L, 893L));
        m.put(803L, initSet(896L, 898L, 820L));
        m.put(804L, initSet(832L, 913L, 881L, 965L, 920L, 856L, 842L, 890L, 941L));
        m.put(805L, initSet(865L, 977L, 853L, 890L, 878L));
        m.put(806L, initSet(854L, 828L));
        m.put(807L, initSet(930L, 997L, 935L, 872L, 906L, 977L, 881L, 978L, 853L, 951L, 920L, 954L, 861L));
        m.put(808L, initSet(915L));
        m.put(809L, initSet(919L, 920L, 874L, 859L, 991L));
        m.put(810L, Collections.<Long>emptySet());
        m.put(811L, initSet(978L, 965L, 903L, 871L));
        m.put(812L, initSet(949L, 877L, 830L));
        m.put(813L, Collections.<Long>emptySet());
        m.put(814L, initSet(870L, 843L, 847L));
        m.put(815L, initSet(864L));
        m.put(816L, Collections.<Long>emptySet());
        m.put(817L, initSet(965L, 950L, 871L));
        m.put(818L, Collections.<Long>emptySet());
        m.put(819L, initSet(930L, 838L, 966L, 937L, 988L, 892L, 846L, 863L, 991L));
        m.put(820L, initSet(914L, 900L, 822L, 871L, 973L, 910L));
        m.put(821L, initSet(900L, 884L, 824L, 920L, 921L, 988L, 989L));
        m.put(822L, initSet(928L, 977L, 871L, 920L));
        m.put(823L, initSet(949L, 904L, 859L, 958L));
        m.put(824L, initSet(993L, 835L, 838L, 982L, 870L, 951L, 890L, 988L, 925L, 863L));
        m.put(825L, initSet(857L, 921L, 988L));
        m.put(826L, initSet(933L, 949L, 918L, 973L, 991L));
        m.put(827L, initSet(832L, 867L, 837L, 870L, 936L, 969L, 906L, 939L, 944L, 913L, 945L, 947L, 949L, 981L, 952L, 858L, 893L, 894L));
        m.put(828L, initSet(914L, 902L));
        m.put(829L, Collections.<Long>emptySet());
        m.put(830L, initSet(864L, 963L, 901L, 935L, 906L, 842L, 875L, 860L, 892L, 847L));
        m.put(831L, initSet(934L, 840L));
        m.put(832L, initSet(913L, 914L, 867L, 900L, 902L, 889L));
        m.put(833L, Collections.<Long>emptySet());
        m.put(834L, initSet(864L, 875L));
        m.put(835L, Collections.<Long>emptySet());
        m.put(836L, Collections.<Long>emptySet());
        m.put(837L, initSet(867L, 980L, 965L, 902L, 855L, 887L, 951L, 952L, 842L, 846L));
        m.put(838L, initSet(960L, 914L, 850L, 919L));
        m.put(839L, Collections.<Long>emptySet());
        m.put(840L, initSet(928L, 993L, 905L, 894L));
        m.put(841L, Collections.<Long>emptySet());
        m.put(842L, initSet(864L, 900L, 885L, 855L, 906L, 971L, 924L, 940L, 958L, 975L, 959L));
        m.put(843L, initSet(928L, 941L));
        m.put(844L, initSet(942L));
        m.put(845L, initSet(992L, 913L, 853L, 889L, 986L, 939L));
        m.put(846L, initSet(992L, 966L, 908L));
        m.put(847L, initSet(898L, 867L, 947L, 855L));
        m.put(848L, Collections.<Long>emptySet());
        m.put(849L, initSet(998L, 974L));
        m.put(850L, initSet(992L, 867L, 900L, 996L, 853L, 981L, 949L, 998L, 967L, 925L));
        m.put(851L, Collections.<Long>emptySet());
        m.put(852L, initSet(928L, 988L));
        m.put(853L, initSet(865L, 915L, 884L, 862L));
        m.put(854L, initSet(999L, 890L));
        m.put(855L, initSet(928L, 883L, 996L, 981L, 902L, 956L));
        m.put(856L, initSet(928L, 981L, 902L, 967L, 871L, 908L, 910L));
        m.put(857L, initSet(968L));
        m.put(858L, initSet(864L, 978L, 915L, 981L, 982L, 925L));
        m.put(859L, initSet(947L, 920L, 910L));
        m.put(860L, initSet(992L, 993L, 889L, 906L));
        m.put(861L, initSet(914L, 867L, 877L));
        m.put(862L, initSet(938L, 959L));
        m.put(863L, initSet(865L, 981L, 951L, 984L));
        m.put(864L, initSet(917L, 871L, 910L));
        m.put(865L, initSet(996L, 905L, 953L, 986L, 878L));
        m.put(866L, initSet(966L, 935L, 988L, 942L));
        m.put(867L, initSet(916L, 967L, 983L, 954L, 890L, 875L));
        m.put(868L, Collections.<Long>emptySet());
        m.put(869L, Collections.<Long>emptySet());
        m.put(870L, initSet(949L, 982L, 894L));
        m.put(871L, initSet(930L, 980L, 982L, 998L, 919L, 920L, 906L, 941L, 911L));
        m.put(872L, initSet(932L, 935L));
        m.put(873L, Collections.<Long>emptySet());
        m.put(874L, initSet(919L, 974L));
        m.put(875L, initSet(914L, 995L, 949L, 981L, 997L, 951L, 984L, 971L, 925L, 877L, 893L));
        m.put(876L, initSet(929L));
        m.put(877L, initSet(944L, 913L, 963L, 999L, 889L, 971L, 958L));
        m.put(878L, initSet(969L));
        m.put(879L, initSet(996L, 906L, 940L, 973L, 894L));
        m.put(880L, Collections.<Long>emptySet());
        m.put(881L, initSet(900L, 949L, 937L));
        m.put(882L, initSet(930L, 899L, 949L, 973L));
        m.put(883L, initSet(963L));
        m.put(884L, initSet(910L));
        m.put(885L, initSet(947L, 968L, 921L, 937L, 970L));
        m.put(886L, Collections.<Long>emptySet());
        m.put(887L, Collections.<Long>emptySet());
        m.put(888L, initSet(942L));
        m.put(889L, Collections.<Long>emptySet());
        m.put(890L, initSet(896L, 977L, 993L, 979L, 935L, 905L));
        m.put(891L, Collections.<Long>emptySet());
        m.put(892L, initSet(914L, 915L, 947L, 916L, 923L, 988L, 895L));
        m.put(893L, initSet(930L, 915L, 997L, 984L));
        m.put(894L, initSet(960L, 982L, 974L));
        m.put(895L, initSet(922L));
        m.put(896L, initSet(910L, 975L, 959L));
        m.put(897L, Collections.<Long>emptySet());
        m.put(898L, initSet(916L, 901L, 966L, 942L));
        m.put(899L, initSet(956L));
        m.put(900L, initSet(930L, 920L));
        m.put(901L, initSet(902L, 966L, 940L, 910L));
        m.put(902L, initSet(917L, 967L, 951L, 940L, 974L));
        m.put(903L, Collections.<Long>emptySet());
        m.put(904L, initSet(963L, 996L, 967L, 999L, 910L));
        m.put(905L, initSet(963L, 979L, 981L));
        m.put(906L, initSet(930L, 915L, 917L, 981L, 997L, 966L, 967L, 988L, 991L));
        m.put(907L, Collections.<Long>emptySet());
        m.put(908L, initSet(944L, 913L, 935L));
        m.put(909L, Collections.<Long>emptySet());
        m.put(910L, initSet(917L, 918L));
        m.put(911L, initSet(920L, 988L));
        m.put(912L, initSet(978L, 982L, 970L, 955L, 926L));
        m.put(913L, initSet(944L, 982L));
        m.put(914L, initSet(993L, 915L, 950L, 967L, 991L));
        m.put(915L, initSet(916L, 950L, 983L, 941L));
        m.put(916L, initSet(978L, 975L));
        m.put(917L, initSet(919L, 956L, 975L));
        m.put(918L, initSet(977L));
        m.put(919L, initSet(992L, 933L, 920L, 922L, 971L, 973L, 975L));
        m.put(920L, initSet(993L, 988L));
        m.put(921L, initSet(963L));
        m.put(922L, initSet(929L));
        m.put(923L, initSet(928L));
        m.put(924L, Collections.<Long>emptySet());
        m.put(925L, initSet(978L, 988L));
        m.put(926L, initSet(981L, 940L));
        m.put(927L, Collections.<Long>emptySet());
        m.put(928L, initSet(979L));
        m.put(929L, initSet(930L, 934L, 966L, 988L));
        m.put(930L, initSet(944L, 947L, 981L, 971L));
        m.put(931L, Collections.<Long>emptySet());
        m.put(932L, Collections.<Long>emptySet());
        m.put(933L, Collections.<Long>emptySet());
        m.put(934L, initSet(988L));
        m.put(935L, Collections.<Long>emptySet());
        m.put(936L, Collections.<Long>emptySet());
        m.put(937L, Collections.<Long>emptySet());
        m.put(938L, Collections.<Long>emptySet());
        m.put(939L, initSet(981L, 982L));
        m.put(940L, initSet(966L, 956L));
        m.put(941L, Collections.<Long>emptySet());
        m.put(942L, Collections.<Long>emptySet());
        m.put(943L, Collections.<Long>emptySet());
        m.put(944L, initSet(982L));
        m.put(945L, initSet(993L));
        m.put(946L, Collections.<Long>emptySet());
        m.put(947L, initSet(976L, 954L, 959L));
        m.put(948L, Collections.<Long>emptySet());
        m.put(949L, initSet(967L, 957L, 991L));
        m.put(950L, Collections.<Long>emptySet());
        m.put(951L, initSet(981L, 997L, 956L));
        m.put(952L, Collections.<Long>emptySet());
        m.put(953L, Collections.<Long>emptySet());
        m.put(954L, Collections.<Long>emptySet());
        m.put(955L, Collections.<Long>emptySet());
        m.put(956L, initSet(967L));
        m.put(957L, initSet(988L));
        m.put(958L, initSet(982L));
        m.put(959L, initSet(976L, 999L, 972L));
        m.put(960L, initSet(981L));
        m.put(961L, initSet(966L));
        m.put(962L, Collections.<Long>emptySet());
        m.put(963L, initSet(986L));
        m.put(964L, Collections.<Long>emptySet());
        m.put(965L, initSet(992L));
        m.put(966L, initSet(975L));
        m.put(967L, Collections.<Long>emptySet());
        m.put(968L, Collections.<Long>emptySet());
        m.put(969L, Collections.<Long>emptySet());
        m.put(970L, Collections.<Long>emptySet());
        m.put(971L, Collections.<Long>emptySet());
        m.put(972L, initSet(976L));
        m.put(973L, Collections.<Long>emptySet());
        m.put(974L, Collections.<Long>emptySet());
        m.put(975L, initSet(993L, 981L));
        m.put(976L, initSet(997L));
        m.put(977L, initSet(983L));
        m.put(978L, Collections.<Long>emptySet());
        m.put(979L, Collections.<Long>emptySet());
        m.put(980L, initSet(988L, 989L));
        m.put(981L, Collections.<Long>emptySet());
        m.put(982L, initSet(992L, 999L));
        m.put(983L, initSet(996L, 988L));
        m.put(984L, initSet(991L));
        m.put(985L, Collections.<Long>emptySet());
        m.put(986L, initSet(996L, 988L));
        m.put(987L, Collections.<Long>emptySet());
        m.put(988L, initSet(996L, 998L));
        m.put(989L, Collections.<Long>emptySet());
        m.put(990L, Collections.<Long>emptySet());
        m.put(991L, Collections.<Long>emptySet());
        m.put(992L, Collections.<Long>emptySet());
        m.put(993L, Collections.<Long>emptySet());
        m.put(994L, Collections.<Long>emptySet());
        m.put(995L, Collections.<Long>emptySet());
        m.put(996L, initSet(999L));
        m.put(997L, Collections.<Long>emptySet());
        m.put(998L, Collections.<Long>emptySet());
        m.put(999L, Collections.<Long>emptySet());
        return m;
    }

//    @Test
    public void testToyExample() {
        double gamma = 1.5;
        Map<Long, Set<Long>> partitions = new HashMap<Long, Set<Long>>();
        partitions.put(1L, initSet( 1L,  2L,  3L,  4L,  5L));
        partitions.put(2L, initSet( 6L,  7L,  8L,  9L, 10L));
        partitions.put(3L, initSet(11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L));
        partitions.put(4L, initSet(27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        Map<Long, Set<Long>> friendships = new HashMap<Long, Set<Long>>();

        friendships.put( 1L, initSet( 2L,  3L,  4L,  5L,  6L,  7L,  8L,  9L, 10L));
        friendships.put( 2L, initSet( 3L,  4L,  5L,  6L,  7L,  8L,  9L, 10L));
        friendships.put( 3L, initSet( 4L,  5L,  6L,  7L,  8L,  9L, 10L));
        friendships.put( 4L, initSet( 5L,  6L,  7L,  8L,  9L, 10L));
        friendships.put( 5L, initSet( 6L,  7L,  8L,  9L, 10L));
        friendships.put( 6L, initSet( 7L,  8L,  9L, 10L));
        friendships.put( 7L, initSet( 8L,  9L, 10L));
        friendships.put( 8L, initSet( 9L, 10L));
        friendships.put( 9L, initSet(10L));
        friendships.put(10L, Collections.<Long>emptySet());

        friendships.put(11L, initSet(12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(12L, initSet(13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(13L, initSet(14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(14L, initSet(15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(15L, initSet(16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(16L, initSet(17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(17L, initSet(18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(18L, initSet(19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(19L, initSet(20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(20L, initSet(21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(21L, initSet(22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(22L, initSet(23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(23L, initSet(24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(24L, initSet(25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(25L, initSet(26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(26L, initSet(27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(27L, initSet(28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(28L, initSet(29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(29L, initSet(30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(30L, initSet(31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(31L, initSet(32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(32L, initSet(33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(33L, initSet(34L, 35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(34L, initSet(35L, 36L, 37L, 38L, 39L, 40L));
        friendships.put(35L, initSet(36L, 37L, 38L, 39L, 40L));
        friendships.put(36L, initSet(37L, 38L, 39L, 40L));
        friendships.put(37L, initSet(38L, 39L, 40L));
        friendships.put(38L, initSet(39L, 40L));
        friendships.put(39L, initSet(40L));
        friendships.put(40L, Collections.<Long>emptySet());

        HermesManager manager = HermesTestUtils.initGraph(gamma, partitions, friendships);
        Long initialEdgeCut = manager.getEdgeCut();
        manager.repartition();
        Long finalEdgeCut = manager.getEdgeCut();
    }
}
